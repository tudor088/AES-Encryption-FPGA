-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi2matrix is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_key_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    stream_in_key_TVALID : IN STD_LOGIC;
    stream_in_key_TREADY : OUT STD_LOGIC;
    stream_in_key_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_key_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_key_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    state_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_data_V_ce0 : OUT STD_LOGIC;
    state_data_V_we0 : OUT STD_LOGIC;
    state_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_data_V_ce1 : OUT STD_LOGIC;
    state_data_V_we1 : OUT STD_LOGIC;
    state_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of axi2matrix is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal stream_in_key_TDATA_blk_n : STD_LOGIC;
    signal op2_V_read_assign_15_reg_451 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal op2_V_read_assign_16_reg_456 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_17_reg_461 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_18_reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_19_reg_471 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_20_reg_476 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_21_reg_481 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_22_reg_486 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_23_reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_24_reg_496 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_25_reg_501 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_26_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_27_reg_511 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_447_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_reg_516 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                op2_V_read_assign_15_reg_451 <= stream_in_key_TDATA(111 downto 104);
                op2_V_read_assign_16_reg_456 <= stream_in_key_TDATA(103 downto 96);
                op2_V_read_assign_17_reg_461 <= stream_in_key_TDATA(95 downto 88);
                op2_V_read_assign_18_reg_466 <= stream_in_key_TDATA(87 downto 80);
                op2_V_read_assign_19_reg_471 <= stream_in_key_TDATA(79 downto 72);
                op2_V_read_assign_20_reg_476 <= stream_in_key_TDATA(71 downto 64);
                op2_V_read_assign_21_reg_481 <= stream_in_key_TDATA(63 downto 56);
                op2_V_read_assign_22_reg_486 <= stream_in_key_TDATA(55 downto 48);
                op2_V_read_assign_23_reg_491 <= stream_in_key_TDATA(47 downto 40);
                op2_V_read_assign_24_reg_496 <= stream_in_key_TDATA(39 downto 32);
                op2_V_read_assign_25_reg_501 <= stream_in_key_TDATA(31 downto 24);
                op2_V_read_assign_26_reg_506 <= stream_in_key_TDATA(23 downto 16);
                op2_V_read_assign_27_reg_511 <= stream_in_key_TDATA(15 downto 8);
                tmp_reg_516 <= tmp_fu_447_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_in_key_TVALID)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_block_state1_assign_proc : process(ap_start, stream_in_key_TVALID)
    begin
                ap_block_state1 <= ((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_address0 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_address0 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_address0 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_data_V_address0 <= "XXXX";
        end if; 
    end process;


    state_data_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_address1 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_address1 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        else 
            state_data_V_address1 <= "XXXX";
        end if; 
    end process;


    state_data_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_ce0 <= ap_const_logic_1;
        else 
            state_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_ce1 <= ap_const_logic_1;
        else 
            state_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_d0_assign_proc : process(ap_CS_fsm_state1, stream_in_key_TDATA, op2_V_read_assign_15_reg_451, op2_V_read_assign_17_reg_461, op2_V_read_assign_19_reg_471, op2_V_read_assign_21_reg_481, op2_V_read_assign_23_reg_491, op2_V_read_assign_25_reg_501, op2_V_read_assign_27_reg_511, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_d0 <= op2_V_read_assign_27_reg_511;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_d0 <= op2_V_read_assign_25_reg_501;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_d0 <= op2_V_read_assign_23_reg_491;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_d0 <= op2_V_read_assign_21_reg_481;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_d0 <= op2_V_read_assign_19_reg_471;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_d0 <= op2_V_read_assign_17_reg_461;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_d0 <= op2_V_read_assign_15_reg_451;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_d0 <= stream_in_key_TDATA(127 downto 120);
        else 
            state_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_data_V_d1_assign_proc : process(ap_CS_fsm_state1, stream_in_key_TDATA, op2_V_read_assign_16_reg_456, op2_V_read_assign_18_reg_466, op2_V_read_assign_20_reg_476, op2_V_read_assign_22_reg_486, op2_V_read_assign_24_reg_496, op2_V_read_assign_26_reg_506, tmp_reg_516, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_d1 <= tmp_reg_516;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_d1 <= op2_V_read_assign_26_reg_506;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_d1 <= op2_V_read_assign_24_reg_496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_d1 <= op2_V_read_assign_22_reg_486;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_d1 <= op2_V_read_assign_20_reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_d1 <= op2_V_read_assign_18_reg_466;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_d1 <= op2_V_read_assign_16_reg_456;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_d1 <= stream_in_key_TDATA(119 downto 112);
        else 
            state_data_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_data_V_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_we0 <= ap_const_logic_1;
        else 
            state_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_we1 <= ap_const_logic_1;
        else 
            state_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            stream_in_key_TDATA_blk_n <= stream_in_key_TVALID;
        else 
            stream_in_key_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_key_TREADY_assign_proc : process(ap_start, ap_CS_fsm_state1, stream_in_key_TVALID)
    begin
        if ((not(((stream_in_key_TVALID = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            stream_in_key_TREADY <= ap_const_logic_1;
        else 
            stream_in_key_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_447_p1 <= stream_in_key_TDATA(8 - 1 downto 0);
end behav;
