// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "shiftRowLeft.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic shiftRowLeft::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic shiftRowLeft::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> shiftRowLeft::ap_ST_fsm_state1 = "1";
const sc_lv<4> shiftRowLeft::ap_ST_fsm_state2 = "10";
const sc_lv<4> shiftRowLeft::ap_ST_fsm_state3 = "100";
const sc_lv<4> shiftRowLeft::ap_ST_fsm_state4 = "1000";
const sc_lv<32> shiftRowLeft::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> shiftRowLeft::ap_const_lv32_1 = "1";
const sc_lv<1> shiftRowLeft::ap_const_lv1_0 = "0";
const sc_lv<32> shiftRowLeft::ap_const_lv32_3 = "11";
const sc_lv<3> shiftRowLeft::ap_const_lv3_0 = "000";
const sc_lv<32> shiftRowLeft::ap_const_lv32_2 = "10";
const sc_lv<1> shiftRowLeft::ap_const_lv1_1 = "1";
const sc_lv<2> shiftRowLeft::ap_const_lv2_0 = "00";
const sc_lv<2> shiftRowLeft::ap_const_lv2_1 = "1";
const sc_lv<2> shiftRowLeft::ap_const_lv2_2 = "10";
const sc_lv<2> shiftRowLeft::ap_const_lv2_3 = "11";
const sc_lv<3> shiftRowLeft::ap_const_lv3_4 = "100";
const sc_lv<3> shiftRowLeft::ap_const_lv3_1 = "1";
const bool shiftRowLeft::ap_const_boolean_1 = true;

shiftRowLeft::shiftRowLeft(sc_module_name name) : sc_module(name), mVcdFile(0) {
    AESEncrypt_TopFundEe_U20 = new AESEncrypt_TopFundEe<1,1,8,8,8,8,2,8>("AESEncrypt_TopFundEe_U20");
    AESEncrypt_TopFundEe_U20->din0(tempRow_3_V_fu_32);
    AESEncrypt_TopFundEe_U20->din1(tempRow_3_V_5_fu_36);
    AESEncrypt_TopFundEe_U20->din2(tempRow_3_V_6_fu_40);
    AESEncrypt_TopFundEe_U20->din3(tempRow_3_V_7_fu_44);
    AESEncrypt_TopFundEe_U20->din4(tmp_9_fu_209_p5);
    AESEncrypt_TopFundEe_U20->dout(tmp_9_fu_209_p6);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_AESMatrix_data_V_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_6_fu_142_p1 );
    sensitive << ( tmp_8_cast_fu_200_p1 );

    SC_METHOD(thread_AESMatrix_data_V_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_AESMatrix_data_V_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_9_fu_209_p6 );

    SC_METHOD(thread_AESMatrix_data_V_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_167_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_167_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_167_p2 );

    SC_METHOD(thread_col_3_fu_173_p2);
    sensitive << ( col1_reg_91 );

    SC_METHOD(thread_col_4_fu_120_p2);
    sensitive << ( col_reg_80 );

    SC_METHOD(thread_exitcond8_fu_114_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( col_reg_80 );

    SC_METHOD(thread_exitcond_fu_167_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( col1_reg_91 );

    SC_METHOD(thread_tmp_10_fu_126_p1);
    sensitive << ( col_reg_80 );

    SC_METHOD(thread_tmp_5_fu_135_p3);
    sensitive << ( row );
    sensitive << ( tmp_cast_fu_130_p2 );

    SC_METHOD(thread_tmp_6_fu_142_p1);
    sensitive << ( tmp_5_fu_135_p3 );

    SC_METHOD(thread_tmp_7_cast_fu_191_p1);
    sensitive << ( col1_reg_91 );

    SC_METHOD(thread_tmp_7_fu_110_p1);
    sensitive << ( shiftAmount );

    SC_METHOD(thread_tmp_8_cast_fu_200_p1);
    sensitive << ( tmp_8_fu_195_p2 );

    SC_METHOD(thread_tmp_8_fu_195_p2);
    sensitive << ( tmp_reg_253 );
    sensitive << ( tmp_7_cast_fu_191_p1 );

    SC_METHOD(thread_tmp_9_fu_209_p5);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( col1_reg_91 );

    SC_METHOD(thread_tmp_cast_fu_130_p2);
    sensitive << ( tmp_7_reg_258 );
    sensitive << ( tmp_10_fu_126_p1 );

    SC_METHOD(thread_tmp_fu_102_p3);
    sensitive << ( row );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond8_fu_114_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_167_p2 );

    ap_CS_fsm = "0001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "shiftRowLeft_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, AESMatrix_data_V_address0, "(port)AESMatrix_data_V_address0");
    sc_trace(mVcdFile, AESMatrix_data_V_ce0, "(port)AESMatrix_data_V_ce0");
    sc_trace(mVcdFile, AESMatrix_data_V_we0, "(port)AESMatrix_data_V_we0");
    sc_trace(mVcdFile, AESMatrix_data_V_d0, "(port)AESMatrix_data_V_d0");
    sc_trace(mVcdFile, AESMatrix_data_V_q0, "(port)AESMatrix_data_V_q0");
    sc_trace(mVcdFile, row, "(port)row");
    sc_trace(mVcdFile, shiftAmount, "(port)shiftAmount");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_fu_102_p3, "tmp_fu_102_p3");
    sc_trace(mVcdFile, tmp_reg_253, "tmp_reg_253");
    sc_trace(mVcdFile, tmp_7_fu_110_p1, "tmp_7_fu_110_p1");
    sc_trace(mVcdFile, tmp_7_reg_258, "tmp_7_reg_258");
    sc_trace(mVcdFile, col_4_fu_120_p2, "col_4_fu_120_p2");
    sc_trace(mVcdFile, col_4_reg_266, "col_4_reg_266");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_10_fu_126_p1, "tmp_10_fu_126_p1");
    sc_trace(mVcdFile, tmp_10_reg_271, "tmp_10_reg_271");
    sc_trace(mVcdFile, exitcond8_fu_114_p2, "exitcond8_fu_114_p2");
    sc_trace(mVcdFile, col_3_fu_173_p2, "col_3_fu_173_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, col_reg_80, "col_reg_80");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, col1_reg_91, "col1_reg_91");
    sc_trace(mVcdFile, exitcond_fu_167_p2, "exitcond_fu_167_p2");
    sc_trace(mVcdFile, tmp_6_fu_142_p1, "tmp_6_fu_142_p1");
    sc_trace(mVcdFile, tmp_8_cast_fu_200_p1, "tmp_8_cast_fu_200_p1");
    sc_trace(mVcdFile, tempRow_3_V_fu_32, "tempRow_3_V_fu_32");
    sc_trace(mVcdFile, tempRow_3_V_5_fu_36, "tempRow_3_V_5_fu_36");
    sc_trace(mVcdFile, tempRow_3_V_6_fu_40, "tempRow_3_V_6_fu_40");
    sc_trace(mVcdFile, tempRow_3_V_7_fu_44, "tempRow_3_V_7_fu_44");
    sc_trace(mVcdFile, tmp_9_fu_209_p6, "tmp_9_fu_209_p6");
    sc_trace(mVcdFile, tmp_cast_fu_130_p2, "tmp_cast_fu_130_p2");
    sc_trace(mVcdFile, tmp_5_fu_135_p3, "tmp_5_fu_135_p3");
    sc_trace(mVcdFile, tmp_7_cast_fu_191_p1, "tmp_7_cast_fu_191_p1");
    sc_trace(mVcdFile, tmp_8_fu_195_p2, "tmp_8_fu_195_p2");
    sc_trace(mVcdFile, tmp_9_fu_209_p5, "tmp_9_fu_209_p5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

shiftRowLeft::~shiftRowLeft() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete AESEncrypt_TopFundEe_U20;
}

void shiftRowLeft::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_114_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        col1_reg_91 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(exitcond_fu_167_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        col1_reg_91 = col_3_fu_173_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        col_reg_80 = col_4_reg_266.read();
    } else if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        col_reg_80 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        col_4_reg_266 = col_4_fu_120_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,2,2>(tmp_10_reg_271.read(), ap_const_lv2_1))) {
        tempRow_3_V_5_fu_36 = AESMatrix_data_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,2,2>(tmp_10_reg_271.read(), ap_const_lv2_2))) {
        tempRow_3_V_6_fu_40 = AESMatrix_data_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,2,2>(tmp_10_reg_271.read(), ap_const_lv2_3))) {
        tempRow_3_V_7_fu_44 = AESMatrix_data_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,2,2>(tmp_10_reg_271.read(), ap_const_lv2_0))) {
        tempRow_3_V_fu_32 = AESMatrix_data_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_114_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        tmp_10_reg_271 = tmp_10_fu_126_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_7_reg_258 = tmp_7_fu_110_p1.read();
        tmp_reg_253 = tmp_fu_102_p3.read();
    }
}

void shiftRowLeft::thread_AESMatrix_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        AESMatrix_data_V_address0 =  (sc_lv<4>) (tmp_8_cast_fu_200_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        AESMatrix_data_V_address0 =  (sc_lv<4>) (tmp_6_fu_142_p1.read());
    } else {
        AESMatrix_data_V_address0 = "XXXX";
    }
}

void shiftRowLeft::thread_AESMatrix_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        AESMatrix_data_V_ce0 = ap_const_logic_1;
    } else {
        AESMatrix_data_V_ce0 = ap_const_logic_0;
    }
}

void shiftRowLeft::thread_AESMatrix_data_V_d0() {
    AESMatrix_data_V_d0 = tmp_9_fu_209_p6.read();
}

void shiftRowLeft::thread_AESMatrix_data_V_we0() {
    if ((esl_seteq<1,1,1>(exitcond_fu_167_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        AESMatrix_data_V_we0 = ap_const_logic_1;
    } else {
        AESMatrix_data_V_we0 = ap_const_logic_0;
    }
}

void shiftRowLeft::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void shiftRowLeft::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void shiftRowLeft::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void shiftRowLeft::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void shiftRowLeft::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(exitcond_fu_167_p2.read(), ap_const_lv1_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void shiftRowLeft::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void shiftRowLeft::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(exitcond_fu_167_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void shiftRowLeft::thread_col_3_fu_173_p2() {
    col_3_fu_173_p2 = (!col1_reg_91.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col1_reg_91.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void shiftRowLeft::thread_col_4_fu_120_p2() {
    col_4_fu_120_p2 = (!col_reg_80.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col_reg_80.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void shiftRowLeft::thread_exitcond8_fu_114_p2() {
    exitcond8_fu_114_p2 = (!col_reg_80.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col_reg_80.read() == ap_const_lv3_4);
}

void shiftRowLeft::thread_exitcond_fu_167_p2() {
    exitcond_fu_167_p2 = (!col1_reg_91.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col1_reg_91.read() == ap_const_lv3_4);
}

void shiftRowLeft::thread_tmp_10_fu_126_p1() {
    tmp_10_fu_126_p1 = col_reg_80.read().range(2-1, 0);
}

void shiftRowLeft::thread_tmp_5_fu_135_p3() {
    tmp_5_fu_135_p3 = esl_concat<4,2>(row.read(), tmp_cast_fu_130_p2.read());
}

void shiftRowLeft::thread_tmp_6_fu_142_p1() {
    tmp_6_fu_142_p1 = esl_zext<64,6>(tmp_5_fu_135_p3.read());
}

void shiftRowLeft::thread_tmp_7_cast_fu_191_p1() {
    tmp_7_cast_fu_191_p1 = esl_zext<6,3>(col1_reg_91.read());
}

void shiftRowLeft::thread_tmp_7_fu_110_p1() {
    tmp_7_fu_110_p1 = shiftAmount.read().range(2-1, 0);
}

void shiftRowLeft::thread_tmp_8_cast_fu_200_p1() {
    tmp_8_cast_fu_200_p1 = esl_zext<64,6>(tmp_8_fu_195_p2.read());
}

void shiftRowLeft::thread_tmp_8_fu_195_p2() {
    tmp_8_fu_195_p2 = (!tmp_reg_253.read().is_01() || !tmp_7_cast_fu_191_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_reg_253.read()) + sc_biguint<6>(tmp_7_cast_fu_191_p1.read()));
}

void shiftRowLeft::thread_tmp_9_fu_209_p5() {
    tmp_9_fu_209_p5 = col1_reg_91.read().range(2-1, 0);
}

void shiftRowLeft::thread_tmp_cast_fu_130_p2() {
    tmp_cast_fu_130_p2 = (!tmp_7_reg_258.read().is_01() || !tmp_10_fu_126_p1.read().is_01())? sc_lv<2>(): (sc_biguint<2>(tmp_7_reg_258.read()) + sc_biguint<2>(tmp_10_fu_126_p1.read()));
}

void shiftRowLeft::thread_tmp_fu_102_p3() {
    tmp_fu_102_p3 = esl_concat<4,2>(row.read(), ap_const_lv2_0);
}

void shiftRowLeft::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(exitcond8_fu_114_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(exitcond_fu_167_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

