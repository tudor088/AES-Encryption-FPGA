// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shiftRowRight_HH_
#define _shiftRowRight_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AESEncrypt_TopFundEe.h"

namespace ap_rtl {

struct shiftRowRight : public sc_module {
    // Port declarations 11
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > AESMatrix_data_V_address0;
    sc_out< sc_logic > AESMatrix_data_V_ce0;
    sc_out< sc_logic > AESMatrix_data_V_we0;
    sc_out< sc_lv<8> > AESMatrix_data_V_d0;
    sc_in< sc_lv<8> > AESMatrix_data_V_q0;


    // Module declarations
    shiftRowRight(sc_module_name name);
    SC_HAS_PROCESS(shiftRowRight);

    ~shiftRowRight();

    sc_trace_file* mVcdFile;

    AESEncrypt_TopFundEe<1,1,8,8,8,8,2,8>* AESEncrypt_TopFundEe_U24;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > col_2_fu_94_p2;
    sc_signal< sc_lv<3> > col_2_reg_224;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > tmp_fu_100_p1;
    sc_signal< sc_lv<2> > tmp_reg_229;
    sc_signal< sc_lv<1> > exitcond8_fu_88_p2;
    sc_signal< sc_lv<3> > col_1_fu_145_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > col_reg_66;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > col1_reg_77;
    sc_signal< sc_lv<1> > exitcond_fu_139_p2;
    sc_signal< sc_lv<64> > tmp_1_fu_110_p3;
    sc_signal< sc_lv<64> > tmp_2_cast_fu_173_p1;
    sc_signal< sc_lv<8> > tempRow_3_V_fu_30;
    sc_signal< sc_lv<8> > tempRow_3_V_1_fu_34;
    sc_signal< sc_lv<8> > tempRow_3_V_2_fu_38;
    sc_signal< sc_lv<8> > tempRow_3_V_3_fu_42;
    sc_signal< sc_lv<8> > tmp_3_fu_182_p6;
    sc_signal< sc_lv<2> > tmp_cast_fu_104_p2;
    sc_signal< sc_lv<3> > tmp_2_fu_163_p2;
    sc_signal< sc_lv<4> > tmp_2_cast1_fu_169_p1;
    sc_signal< sc_lv<2> > tmp_3_fu_182_p5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<62> ap_const_lv62_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AESMatrix_data_V_address0();
    void thread_AESMatrix_data_V_ce0();
    void thread_AESMatrix_data_V_d0();
    void thread_AESMatrix_data_V_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_1_fu_145_p2();
    void thread_col_2_fu_94_p2();
    void thread_exitcond8_fu_88_p2();
    void thread_exitcond_fu_139_p2();
    void thread_tmp_1_fu_110_p3();
    void thread_tmp_2_cast1_fu_169_p1();
    void thread_tmp_2_cast_fu_173_p1();
    void thread_tmp_2_fu_163_p2();
    void thread_tmp_3_fu_182_p5();
    void thread_tmp_cast_fu_104_p2();
    void thread_tmp_fu_100_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
