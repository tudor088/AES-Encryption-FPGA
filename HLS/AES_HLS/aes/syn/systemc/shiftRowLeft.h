// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _shiftRowLeft_HH_
#define _shiftRowLeft_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "AESEncrypt_TopFundEe.h"

namespace ap_rtl {

struct shiftRowLeft : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > AESMatrix_data_V_address0;
    sc_out< sc_logic > AESMatrix_data_V_ce0;
    sc_out< sc_logic > AESMatrix_data_V_we0;
    sc_out< sc_lv<8> > AESMatrix_data_V_d0;
    sc_in< sc_lv<8> > AESMatrix_data_V_q0;
    sc_in< sc_lv<4> > row;
    sc_in< sc_lv<4> > shiftAmount;


    // Module declarations
    shiftRowLeft(sc_module_name name);
    SC_HAS_PROCESS(shiftRowLeft);

    ~shiftRowLeft();

    sc_trace_file* mVcdFile;

    AESEncrypt_TopFundEe<1,1,8,8,8,8,2,8>* AESEncrypt_TopFundEe_U20;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > tmp_fu_102_p3;
    sc_signal< sc_lv<6> > tmp_reg_253;
    sc_signal< sc_lv<2> > tmp_7_fu_110_p1;
    sc_signal< sc_lv<2> > tmp_7_reg_258;
    sc_signal< sc_lv<3> > col_4_fu_120_p2;
    sc_signal< sc_lv<3> > col_4_reg_266;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > tmp_10_fu_126_p1;
    sc_signal< sc_lv<2> > tmp_10_reg_271;
    sc_signal< sc_lv<1> > exitcond8_fu_114_p2;
    sc_signal< sc_lv<3> > col_3_fu_173_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > col_reg_80;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > col1_reg_91;
    sc_signal< sc_lv<1> > exitcond_fu_167_p2;
    sc_signal< sc_lv<64> > tmp_6_fu_142_p1;
    sc_signal< sc_lv<64> > tmp_8_cast_fu_200_p1;
    sc_signal< sc_lv<8> > tempRow_3_V_fu_32;
    sc_signal< sc_lv<8> > tempRow_3_V_5_fu_36;
    sc_signal< sc_lv<8> > tempRow_3_V_6_fu_40;
    sc_signal< sc_lv<8> > tempRow_3_V_7_fu_44;
    sc_signal< sc_lv<8> > tmp_9_fu_209_p6;
    sc_signal< sc_lv<2> > tmp_cast_fu_130_p2;
    sc_signal< sc_lv<6> > tmp_5_fu_135_p3;
    sc_signal< sc_lv<6> > tmp_7_cast_fu_191_p1;
    sc_signal< sc_lv<6> > tmp_8_fu_195_p2;
    sc_signal< sc_lv<2> > tmp_9_fu_209_p5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_AESMatrix_data_V_address0();
    void thread_AESMatrix_data_V_ce0();
    void thread_AESMatrix_data_V_d0();
    void thread_AESMatrix_data_V_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_col_3_fu_173_p2();
    void thread_col_4_fu_120_p2();
    void thread_exitcond8_fu_114_p2();
    void thread_exitcond_fu_167_p2();
    void thread_tmp_10_fu_126_p1();
    void thread_tmp_5_fu_135_p3();
    void thread_tmp_6_fu_142_p1();
    void thread_tmp_7_cast_fu_191_p1();
    void thread_tmp_7_fu_110_p1();
    void thread_tmp_8_cast_fu_200_p1();
    void thread_tmp_8_fu_195_p2();
    void thread_tmp_9_fu_209_p5();
    void thread_tmp_cast_fu_130_p2();
    void thread_tmp_fu_102_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
