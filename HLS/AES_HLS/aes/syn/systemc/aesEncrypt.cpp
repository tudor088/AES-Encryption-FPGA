// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aesEncrypt.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aesEncrypt::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aesEncrypt::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<33> aesEncrypt::ap_ST_fsm_state1 = "1";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state2 = "10";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state3 = "100";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state4 = "1000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state5 = "10000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state6 = "100000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state7 = "1000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state8 = "10000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state9 = "100000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state10 = "1000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state11 = "10000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state12 = "100000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<33> aesEncrypt::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<32> aesEncrypt::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aesEncrypt::ap_const_lv32_2 = "10";
const sc_lv<1> aesEncrypt::ap_const_lv1_0 = "0";
const sc_lv<32> aesEncrypt::ap_const_lv32_3 = "11";
const sc_lv<32> aesEncrypt::ap_const_lv32_4 = "100";
const sc_lv<32> aesEncrypt::ap_const_lv32_5 = "101";
const sc_lv<32> aesEncrypt::ap_const_lv32_11 = "10001";
const sc_lv<32> aesEncrypt::ap_const_lv32_12 = "10010";
const sc_lv<1> aesEncrypt::ap_const_lv1_1 = "1";
const sc_lv<32> aesEncrypt::ap_const_lv32_13 = "10011";
const sc_lv<32> aesEncrypt::ap_const_lv32_1D = "11101";
const sc_lv<32> aesEncrypt::ap_const_lv32_1E = "11110";
const sc_lv<3> aesEncrypt::ap_const_lv3_0 = "000";
const sc_lv<32> aesEncrypt::ap_const_lv32_1 = "1";
const sc_lv<8> aesEncrypt::ap_const_lv8_0 = "00000000";
const sc_lv<32> aesEncrypt::ap_const_lv32_6 = "110";
const sc_lv<4> aesEncrypt::ap_const_lv4_1 = "1";
const sc_lv<32> aesEncrypt::ap_const_lv32_7 = "111";
const sc_lv<32> aesEncrypt::ap_const_lv32_15 = "10101";
const sc_lv<32> aesEncrypt::ap_const_lv32_14 = "10100";
const sc_lv<32> aesEncrypt::ap_const_lv32_1C = "11100";
const sc_lv<32> aesEncrypt::ap_const_lv32_1F = "11111";
const sc_lv<32> aesEncrypt::ap_const_lv32_10 = "10000";
const sc_lv<32> aesEncrypt::ap_const_lv32_20 = "100000";
const sc_lv<32> aesEncrypt::ap_const_lv32_8 = "1000";
const sc_lv<32> aesEncrypt::ap_const_lv32_9 = "1001";
const sc_lv<32> aesEncrypt::ap_const_lv32_16 = "10110";
const sc_lv<32> aesEncrypt::ap_const_lv32_A = "1010";
const sc_lv<32> aesEncrypt::ap_const_lv32_C = "1100";
const sc_lv<32> aesEncrypt::ap_const_lv32_17 = "10111";
const sc_lv<32> aesEncrypt::ap_const_lv32_19 = "11001";
const sc_lv<32> aesEncrypt::ap_const_lv32_B = "1011";
const sc_lv<32> aesEncrypt::ap_const_lv32_D = "1101";
const sc_lv<32> aesEncrypt::ap_const_lv32_18 = "11000";
const sc_lv<32> aesEncrypt::ap_const_lv32_1A = "11010";
const sc_lv<4> aesEncrypt::ap_const_lv4_2 = "10";
const sc_lv<32> aesEncrypt::ap_const_lv32_E = "1110";
const sc_lv<32> aesEncrypt::ap_const_lv32_1B = "11011";
const sc_lv<32> aesEncrypt::ap_const_lv32_F = "1111";
const sc_lv<3> aesEncrypt::ap_const_lv3_4 = "100";
const sc_lv<3> aesEncrypt::ap_const_lv3_1 = "1";
const sc_lv<2> aesEncrypt::ap_const_lv2_0 = "00";
const sc_lv<8> aesEncrypt::ap_const_lv8_2C = "101100";
const sc_lv<4> aesEncrypt::ap_const_lv4_A = "1010";
const sc_lv<3> aesEncrypt::ap_const_lv3_5 = "101";
const bool aesEncrypt::ap_const_boolean_1 = true;

aesEncrypt::aesEncrypt(sc_module_name name) : sc_module(name), mVcdFile(0) {
    expandedKey_U = new aesEncrypt_expandhbi("expandedKey_U");
    expandedKey_U->clk(ap_clk);
    expandedKey_U->reset(ap_rst);
    expandedKey_U->address0(expandedKey_address0);
    expandedKey_U->ce0(expandedKey_ce0);
    expandedKey_U->we0(expandedKey_we0);
    expandedKey_U->d0(grp_keyExpansion5_fu_273_expandedKey_V_d0);
    expandedKey_U->q0(expandedKey_q0);
    roundKey_data_V_U = new aesEncrypt_roundKibs("roundKey_data_V_U");
    roundKey_data_V_U->clk(ap_clk);
    roundKey_data_V_U->reset(ap_rst);
    roundKey_data_V_U->address0(roundKey_data_V_address0);
    roundKey_data_V_U->ce0(roundKey_data_V_ce0);
    roundKey_data_V_U->we0(roundKey_data_V_we0);
    roundKey_data_V_U->d0(roundKey_data_V_d0);
    roundKey_data_V_U->q0(roundKey_data_V_q0);
    roundKey_data_V_U->address1(grp_addRoundKey4_fu_285_roundKey_data_V_address1);
    roundKey_data_V_U->ce1(roundKey_data_V_ce1);
    roundKey_data_V_U->q1(roundKey_data_V_q1);
    grp_mixColumns_fu_263 = new mixColumns("grp_mixColumns_fu_263");
    grp_mixColumns_fu_263->ap_clk(ap_clk);
    grp_mixColumns_fu_263->ap_rst(ap_rst);
    grp_mixColumns_fu_263->ap_start(grp_mixColumns_fu_263_ap_start);
    grp_mixColumns_fu_263->ap_done(grp_mixColumns_fu_263_ap_done);
    grp_mixColumns_fu_263->ap_idle(grp_mixColumns_fu_263_ap_idle);
    grp_mixColumns_fu_263->ap_ready(grp_mixColumns_fu_263_ap_ready);
    grp_mixColumns_fu_263->state_data_V_address0(grp_mixColumns_fu_263_state_data_V_address0);
    grp_mixColumns_fu_263->state_data_V_ce0(grp_mixColumns_fu_263_state_data_V_ce0);
    grp_mixColumns_fu_263->state_data_V_we0(grp_mixColumns_fu_263_state_data_V_we0);
    grp_mixColumns_fu_263->state_data_V_d0(grp_mixColumns_fu_263_state_data_V_d0);
    grp_mixColumns_fu_263->state_data_V_q0(state_data_V_q0);
    grp_mixColumns_fu_263->state_data_V_address1(grp_mixColumns_fu_263_state_data_V_address1);
    grp_mixColumns_fu_263->state_data_V_ce1(grp_mixColumns_fu_263_state_data_V_ce1);
    grp_mixColumns_fu_263->state_data_V_we1(grp_mixColumns_fu_263_state_data_V_we1);
    grp_mixColumns_fu_263->state_data_V_d1(grp_mixColumns_fu_263_state_data_V_d1);
    grp_mixColumns_fu_263->state_data_V_q1(state_data_V_q1);
    grp_keyExpansion5_fu_273 = new keyExpansion5("grp_keyExpansion5_fu_273");
    grp_keyExpansion5_fu_273->ap_clk(ap_clk);
    grp_keyExpansion5_fu_273->ap_rst(ap_rst);
    grp_keyExpansion5_fu_273->ap_start(grp_keyExpansion5_fu_273_ap_start);
    grp_keyExpansion5_fu_273->ap_done(grp_keyExpansion5_fu_273_ap_done);
    grp_keyExpansion5_fu_273->ap_idle(grp_keyExpansion5_fu_273_ap_idle);
    grp_keyExpansion5_fu_273->ap_ready(grp_keyExpansion5_fu_273_ap_ready);
    grp_keyExpansion5_fu_273->masterKey_data_V_address0(grp_keyExpansion5_fu_273_masterKey_data_V_address0);
    grp_keyExpansion5_fu_273->masterKey_data_V_ce0(grp_keyExpansion5_fu_273_masterKey_data_V_ce0);
    grp_keyExpansion5_fu_273->masterKey_data_V_q0(masterKey_data_V_q0);
    grp_keyExpansion5_fu_273->expandedKey_V_address0(grp_keyExpansion5_fu_273_expandedKey_V_address0);
    grp_keyExpansion5_fu_273->expandedKey_V_ce0(grp_keyExpansion5_fu_273_expandedKey_V_ce0);
    grp_keyExpansion5_fu_273->expandedKey_V_we0(grp_keyExpansion5_fu_273_expandedKey_V_we0);
    grp_keyExpansion5_fu_273->expandedKey_V_d0(grp_keyExpansion5_fu_273_expandedKey_V_d0);
    grp_keyExpansion5_fu_273->expandedKey_V_q0(expandedKey_q0);
    grp_addRoundKey4_fu_285 = new addRoundKey4("grp_addRoundKey4_fu_285");
    grp_addRoundKey4_fu_285->ap_clk(ap_clk);
    grp_addRoundKey4_fu_285->ap_rst(ap_rst);
    grp_addRoundKey4_fu_285->ap_start(grp_addRoundKey4_fu_285_ap_start);
    grp_addRoundKey4_fu_285->ap_done(grp_addRoundKey4_fu_285_ap_done);
    grp_addRoundKey4_fu_285->ap_idle(grp_addRoundKey4_fu_285_ap_idle);
    grp_addRoundKey4_fu_285->ap_ready(grp_addRoundKey4_fu_285_ap_ready);
    grp_addRoundKey4_fu_285->state_data_V_address0(grp_addRoundKey4_fu_285_state_data_V_address0);
    grp_addRoundKey4_fu_285->state_data_V_ce0(grp_addRoundKey4_fu_285_state_data_V_ce0);
    grp_addRoundKey4_fu_285->state_data_V_we0(grp_addRoundKey4_fu_285_state_data_V_we0);
    grp_addRoundKey4_fu_285->state_data_V_d0(grp_addRoundKey4_fu_285_state_data_V_d0);
    grp_addRoundKey4_fu_285->state_data_V_q0(state_data_V_q0);
    grp_addRoundKey4_fu_285->state_data_V_address1(grp_addRoundKey4_fu_285_state_data_V_address1);
    grp_addRoundKey4_fu_285->state_data_V_ce1(grp_addRoundKey4_fu_285_state_data_V_ce1);
    grp_addRoundKey4_fu_285->state_data_V_we1(grp_addRoundKey4_fu_285_state_data_V_we1);
    grp_addRoundKey4_fu_285->state_data_V_d1(grp_addRoundKey4_fu_285_state_data_V_d1);
    grp_addRoundKey4_fu_285->state_data_V_q1(state_data_V_q1);
    grp_addRoundKey4_fu_285->roundKey_data_V_address0(grp_addRoundKey4_fu_285_roundKey_data_V_address0);
    grp_addRoundKey4_fu_285->roundKey_data_V_ce0(grp_addRoundKey4_fu_285_roundKey_data_V_ce0);
    grp_addRoundKey4_fu_285->roundKey_data_V_q0(roundKey_data_V_q0);
    grp_addRoundKey4_fu_285->roundKey_data_V_address1(grp_addRoundKey4_fu_285_roundKey_data_V_address1);
    grp_addRoundKey4_fu_285->roundKey_data_V_ce1(grp_addRoundKey4_fu_285_roundKey_data_V_ce1);
    grp_addRoundKey4_fu_285->roundKey_data_V_q1(roundKey_data_V_q1);
    grp_substituteBytes_fu_292 = new substituteBytes("grp_substituteBytes_fu_292");
    grp_substituteBytes_fu_292->ap_clk(ap_clk);
    grp_substituteBytes_fu_292->ap_rst(ap_rst);
    grp_substituteBytes_fu_292->ap_start(grp_substituteBytes_fu_292_ap_start);
    grp_substituteBytes_fu_292->ap_done(grp_substituteBytes_fu_292_ap_done);
    grp_substituteBytes_fu_292->ap_idle(grp_substituteBytes_fu_292_ap_idle);
    grp_substituteBytes_fu_292->ap_ready(grp_substituteBytes_fu_292_ap_ready);
    grp_substituteBytes_fu_292->state_data_V_address0(grp_substituteBytes_fu_292_state_data_V_address0);
    grp_substituteBytes_fu_292->state_data_V_ce0(grp_substituteBytes_fu_292_state_data_V_ce0);
    grp_substituteBytes_fu_292->state_data_V_we0(grp_substituteBytes_fu_292_state_data_V_we0);
    grp_substituteBytes_fu_292->state_data_V_d0(grp_substituteBytes_fu_292_state_data_V_d0);
    grp_substituteBytes_fu_292->state_data_V_q0(state_data_V_q0);
    grp_substituteBytes_fu_292->state_data_V_address1(grp_substituteBytes_fu_292_state_data_V_address1);
    grp_substituteBytes_fu_292->state_data_V_ce1(grp_substituteBytes_fu_292_state_data_V_ce1);
    grp_substituteBytes_fu_292->state_data_V_we1(grp_substituteBytes_fu_292_state_data_V_we1);
    grp_substituteBytes_fu_292->state_data_V_d1(grp_substituteBytes_fu_292_state_data_V_d1);
    grp_substituteBytes_fu_292->state_data_V_q1(state_data_V_q1);
    grp_shiftRowLeft_fu_300 = new shiftRowLeft("grp_shiftRowLeft_fu_300");
    grp_shiftRowLeft_fu_300->ap_clk(ap_clk);
    grp_shiftRowLeft_fu_300->ap_rst(ap_rst);
    grp_shiftRowLeft_fu_300->ap_start(grp_shiftRowLeft_fu_300_ap_start);
    grp_shiftRowLeft_fu_300->ap_done(grp_shiftRowLeft_fu_300_ap_done);
    grp_shiftRowLeft_fu_300->ap_idle(grp_shiftRowLeft_fu_300_ap_idle);
    grp_shiftRowLeft_fu_300->ap_ready(grp_shiftRowLeft_fu_300_ap_ready);
    grp_shiftRowLeft_fu_300->AESMatrix_data_V_address0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0);
    grp_shiftRowLeft_fu_300->AESMatrix_data_V_ce0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0);
    grp_shiftRowLeft_fu_300->AESMatrix_data_V_we0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0);
    grp_shiftRowLeft_fu_300->AESMatrix_data_V_d0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0);
    grp_shiftRowLeft_fu_300->AESMatrix_data_V_q0(state_data_V_q0);
    grp_shiftRowLeft_fu_300->row(grp_shiftRowLeft_fu_300_row);
    grp_shiftRowLeft_fu_300->shiftAmount(grp_shiftRowLeft_fu_300_shiftAmount);
    grp_shiftRowRight_fu_312 = new shiftRowRight("grp_shiftRowRight_fu_312");
    grp_shiftRowRight_fu_312->ap_clk(ap_clk);
    grp_shiftRowRight_fu_312->ap_rst(ap_rst);
    grp_shiftRowRight_fu_312->ap_start(grp_shiftRowRight_fu_312_ap_start);
    grp_shiftRowRight_fu_312->ap_done(grp_shiftRowRight_fu_312_ap_done);
    grp_shiftRowRight_fu_312->ap_idle(grp_shiftRowRight_fu_312_ap_idle);
    grp_shiftRowRight_fu_312->ap_ready(grp_shiftRowRight_fu_312_ap_ready);
    grp_shiftRowRight_fu_312->AESMatrix_data_V_address0(grp_shiftRowRight_fu_312_AESMatrix_data_V_address0);
    grp_shiftRowRight_fu_312->AESMatrix_data_V_ce0(grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0);
    grp_shiftRowRight_fu_312->AESMatrix_data_V_we0(grp_shiftRowRight_fu_312_AESMatrix_data_V_we0);
    grp_shiftRowRight_fu_312->AESMatrix_data_V_d0(grp_shiftRowRight_fu_312_AESMatrix_data_V_d0);
    grp_shiftRowRight_fu_312->AESMatrix_data_V_q0(state_data_V_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_addRoundKey4_fu_285_ap_done );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_addRoundKey4_fu_285_ap_done );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_col_2_fu_569_p2);
    sensitive << ( col_assign_1_reg_252 );

    SC_METHOD(thread_col_3_fu_498_p2);
    sensitive << ( col_assign_2_reg_218 );

    SC_METHOD(thread_col_assign_2_cast5_fu_488_p1);
    sensitive << ( col_assign_2_reg_218 );

    SC_METHOD(thread_col_fu_404_p2);
    sensitive << ( col_assign_reg_172 );

    SC_METHOD(thread_exitcond11_i_fu_318_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_i_reg_127 );

    SC_METHOD(thread_exitcond4_fu_539_p2);
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( row_assign_1_reg_229 );

    SC_METHOD(thread_exitcond5_fu_492_p2);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( col_assign_2_reg_218 );

    SC_METHOD(thread_exitcond6_fu_458_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( row_assign_2_reg_195 );

    SC_METHOD(thread_exitcond7_fu_438_p2);
    sensitive << ( round_reg_183 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_exitcond8_fu_398_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( col_assign_reg_172 );

    SC_METHOD(thread_exitcond9_fu_374_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( row_assign_reg_149 );

    SC_METHOD(thread_exitcond_fu_563_p2);
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( col_assign_1_reg_252 );

    SC_METHOD(thread_exitcond_i_fu_342_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_0_i_reg_138 );

    SC_METHOD(thread_expandedKey_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_keyExpansion5_fu_273_expandedKey_V_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_48_cast_fu_424_p1 );
    sensitive << ( tmp_58_cast_fu_519_p1 );
    sensitive << ( tmp_56_cast_fu_593_p1 );

    SC_METHOD(thread_expandedKey_ce0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( grp_keyExpansion5_fu_273_expandedKey_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_expandedKey_we0);
    sensitive << ( grp_keyExpansion5_fu_273_expandedKey_V_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_addRoundKey4_fu_285_ap_start);
    sensitive << ( grp_addRoundKey4_fu_285_ap_start_reg );

    SC_METHOD(thread_grp_keyExpansion5_fu_273_ap_start);
    sensitive << ( grp_keyExpansion5_fu_273_ap_start_reg );

    SC_METHOD(thread_grp_mixColumns_fu_263_ap_start);
    sensitive << ( grp_mixColumns_fu_263_ap_start_reg );

    SC_METHOD(thread_grp_shiftRowLeft_fu_300_ap_start);
    sensitive << ( grp_shiftRowLeft_fu_300_ap_start_reg );

    SC_METHOD(thread_grp_shiftRowLeft_fu_300_row);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_grp_shiftRowLeft_fu_300_shiftAmount);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );

    SC_METHOD(thread_grp_shiftRowRight_fu_312_ap_start);
    sensitive << ( grp_shiftRowRight_fu_312_ap_start_reg );

    SC_METHOD(thread_grp_substituteBytes_fu_292_ap_start);
    sensitive << ( grp_substituteBytes_fu_292_ap_start_reg );

    SC_METHOD(thread_i_fu_324_p2);
    sensitive << ( i_0_i_reg_127 );

    SC_METHOD(thread_j_fu_348_p2);
    sensitive << ( j_0_i_reg_138 );

    SC_METHOD(thread_masterKey_data_V_address0);
    sensitive << ( grp_keyExpansion5_fu_273_masterKey_data_V_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_masterKey_data_V_ce0);
    sensitive << ( grp_keyExpansion5_fu_273_masterKey_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_next_mul3_fu_533_p2);
    sensitive << ( phi_mul3_reg_240 );

    SC_METHOD(thread_next_mul4_fu_452_p2);
    sensitive << ( phi_mul4_reg_206 );

    SC_METHOD(thread_next_mul_fu_368_p2);
    sensitive << ( phi_mul_reg_160 );

    SC_METHOD(thread_roundKey_data_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_addRoundKey4_fu_285_roundKey_data_V_address0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_47_cast_fu_363_p1 );
    sensitive << ( tmp_49_cast_fu_434_p1 );
    sensitive << ( tmp_59_cast_fu_529_p1 );
    sensitive << ( tmp_57_cast_fu_607_p1 );

    SC_METHOD(thread_roundKey_data_V_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_addRoundKey4_fu_285_roundKey_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_roundKey_data_V_ce1);
    sensitive << ( grp_addRoundKey4_fu_285_roundKey_data_V_ce1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state33 );

    SC_METHOD(thread_roundKey_data_V_d0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( expandedKey_q0 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_roundKey_data_V_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_i_fu_342_p2 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state32 );

    SC_METHOD(thread_round_1_fu_482_p2);
    sensitive << ( round_reg_183 );

    SC_METHOD(thread_row_3_fu_380_p2);
    sensitive << ( row_assign_reg_149 );

    SC_METHOD(thread_row_4_fu_464_p2);
    sensitive << ( row_assign_2_reg_195 );

    SC_METHOD(thread_row_fu_545_p2);
    sensitive << ( row_assign_1_reg_229 );

    SC_METHOD(thread_state_data_V_address0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_address0 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_address0 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_address0 );
    sensitive << ( grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0 );
    sensitive << ( grp_shiftRowRight_fu_312_AESMatrix_data_V_address0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_data_V_address1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_address1 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_address1 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_address1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_state_data_V_ce0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_ce0 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_ce0 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_ce0 );
    sensitive << ( grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0 );
    sensitive << ( grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_data_V_ce1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_ce1 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_ce1 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_ce1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_state_data_V_d0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_d0 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_d0 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_d0 );
    sensitive << ( grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0 );
    sensitive << ( grp_shiftRowRight_fu_312_AESMatrix_data_V_d0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_data_V_d1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_d1 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_d1 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_d1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_state_data_V_we0);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_we0 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_we0 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_we0 );
    sensitive << ( grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0 );
    sensitive << ( grp_shiftRowRight_fu_312_AESMatrix_data_V_we0 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_state_data_V_we1);
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_state_data_V_we1 );
    sensitive << ( grp_addRoundKey4_fu_285_state_data_V_we1 );
    sensitive << ( grp_substituteBytes_fu_292_state_data_V_we1 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_tmp_11_cast_fu_354_p1);
    sensitive << ( j_0_i_reg_138 );

    SC_METHOD(thread_tmp_12_fu_444_p3);
    sensitive << ( round_reg_183 );

    SC_METHOD(thread_tmp_13_cast1_fu_410_p1);
    sensitive << ( col_assign_reg_172 );

    SC_METHOD(thread_tmp_13_cast_fu_414_p1);
    sensitive << ( col_assign_reg_172 );

    SC_METHOD(thread_tmp_13_fu_358_p2);
    sensitive << ( tmp_43_cast_reg_619 );
    sensitive << ( tmp_11_cast_fu_354_p1 );

    SC_METHOD(thread_tmp_14_fu_418_p2);
    sensitive << ( phi_mul_reg_160 );
    sensitive << ( tmp_13_cast_fu_414_p1 );

    SC_METHOD(thread_tmp_15_fu_429_p2);
    sensitive << ( tmp_46_cast_reg_645 );
    sensitive << ( tmp_13_cast1_fu_410_p1 );

    SC_METHOD(thread_tmp_16_fu_575_p3);
    sensitive << ( col_assign_1_reg_252 );

    SC_METHOD(thread_tmp_17_cast_fu_583_p1);
    sensitive << ( tmp_16_fu_575_p3 );

    SC_METHOD(thread_tmp_17_fu_551_p3);
    sensitive << ( row_assign_1_reg_229 );

    SC_METHOD(thread_tmp_18_fu_504_p2);
    sensitive << ( tmp_12_reg_671 );
    sensitive << ( col_assign_2_cast5_fu_488_p1 );

    SC_METHOD(thread_tmp_19_cast_fu_509_p1);
    sensitive << ( tmp_18_fu_504_p2 );

    SC_METHOD(thread_tmp_19_fu_470_p3);
    sensitive << ( row_assign_2_reg_195 );

    SC_METHOD(thread_tmp_20_fu_587_p2);
    sensitive << ( phi_mul3_reg_240 );
    sensitive << ( tmp_17_cast_fu_583_p1 );

    SC_METHOD(thread_tmp_21_fu_602_p2);
    sensitive << ( tmp_52_cast_reg_730 );
    sensitive << ( tmp_i6_cast_fu_598_p1 );

    SC_METHOD(thread_tmp_22_fu_513_p2);
    sensitive << ( phi_mul4_reg_206 );
    sensitive << ( tmp_19_cast_fu_509_p1 );

    SC_METHOD(thread_tmp_23_fu_524_p2);
    sensitive << ( tmp_55_cast_reg_689 );
    sensitive << ( col_assign_2_cast5_fu_488_p1 );

    SC_METHOD(thread_tmp_43_cast_fu_338_p1);
    sensitive << ( tmp_fu_330_p3 );

    SC_METHOD(thread_tmp_46_cast_fu_394_p1);
    sensitive << ( tmp_s_fu_386_p3 );

    SC_METHOD(thread_tmp_47_cast_fu_363_p1);
    sensitive << ( tmp_13_fu_358_p2 );

    SC_METHOD(thread_tmp_48_cast_fu_424_p1);
    sensitive << ( tmp_14_fu_418_p2 );

    SC_METHOD(thread_tmp_49_cast_fu_434_p1);
    sensitive << ( tmp_15_reg_663 );

    SC_METHOD(thread_tmp_52_cast_fu_559_p1);
    sensitive << ( tmp_17_fu_551_p3 );

    SC_METHOD(thread_tmp_55_cast_fu_478_p1);
    sensitive << ( tmp_19_fu_470_p3 );

    SC_METHOD(thread_tmp_56_cast_fu_593_p1);
    sensitive << ( tmp_20_fu_587_p2 );

    SC_METHOD(thread_tmp_57_cast_fu_607_p1);
    sensitive << ( tmp_21_reg_748 );

    SC_METHOD(thread_tmp_58_cast_fu_519_p1);
    sensitive << ( tmp_22_fu_513_p2 );

    SC_METHOD(thread_tmp_59_cast_fu_529_p1);
    sensitive << ( tmp_23_reg_712 );

    SC_METHOD(thread_tmp_fu_330_p3);
    sensitive << ( i_0_i_reg_127 );

    SC_METHOD(thread_tmp_i6_cast_fu_598_p1);
    sensitive << ( col_assign_1_reg_252 );

    SC_METHOD(thread_tmp_s_fu_386_p3);
    sensitive << ( row_assign_reg_149 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond11_i_fu_318_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond9_fu_374_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond8_fu_398_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( grp_mixColumns_fu_263_ap_done );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond6_fu_458_p2 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( exitcond5_fu_492_p2 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( exitcond4_fu_539_p2 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( exitcond_fu_563_p2 );
    sensitive << ( grp_keyExpansion5_fu_273_ap_done );
    sensitive << ( grp_addRoundKey4_fu_285_ap_done );
    sensitive << ( grp_substituteBytes_fu_292_ap_done );
    sensitive << ( grp_shiftRowLeft_fu_300_ap_done );
    sensitive << ( grp_shiftRowRight_fu_312_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_342_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond7_fu_438_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state16 );

    ap_CS_fsm = "000000000000000000000000000000001";
    grp_mixColumns_fu_263_ap_start_reg = SC_LOGIC_0;
    grp_keyExpansion5_fu_273_ap_start_reg = SC_LOGIC_0;
    grp_addRoundKey4_fu_285_ap_start_reg = SC_LOGIC_0;
    grp_substituteBytes_fu_292_ap_start_reg = SC_LOGIC_0;
    grp_shiftRowLeft_fu_300_ap_start_reg = SC_LOGIC_0;
    grp_shiftRowRight_fu_312_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aesEncrypt_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_data_V_address0, "(port)state_data_V_address0");
    sc_trace(mVcdFile, state_data_V_ce0, "(port)state_data_V_ce0");
    sc_trace(mVcdFile, state_data_V_we0, "(port)state_data_V_we0");
    sc_trace(mVcdFile, state_data_V_d0, "(port)state_data_V_d0");
    sc_trace(mVcdFile, state_data_V_q0, "(port)state_data_V_q0");
    sc_trace(mVcdFile, state_data_V_address1, "(port)state_data_V_address1");
    sc_trace(mVcdFile, state_data_V_ce1, "(port)state_data_V_ce1");
    sc_trace(mVcdFile, state_data_V_we1, "(port)state_data_V_we1");
    sc_trace(mVcdFile, state_data_V_d1, "(port)state_data_V_d1");
    sc_trace(mVcdFile, state_data_V_q1, "(port)state_data_V_q1");
    sc_trace(mVcdFile, masterKey_data_V_address0, "(port)masterKey_data_V_address0");
    sc_trace(mVcdFile, masterKey_data_V_ce0, "(port)masterKey_data_V_ce0");
    sc_trace(mVcdFile, masterKey_data_V_q0, "(port)masterKey_data_V_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_324_p2, "i_fu_324_p2");
    sc_trace(mVcdFile, i_reg_614, "i_reg_614");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_43_cast_fu_338_p1, "tmp_43_cast_fu_338_p1");
    sc_trace(mVcdFile, tmp_43_cast_reg_619, "tmp_43_cast_reg_619");
    sc_trace(mVcdFile, exitcond11_i_fu_318_p2, "exitcond11_i_fu_318_p2");
    sc_trace(mVcdFile, j_fu_348_p2, "j_fu_348_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, next_mul_fu_368_p2, "next_mul_fu_368_p2");
    sc_trace(mVcdFile, next_mul_reg_632, "next_mul_reg_632");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, row_3_fu_380_p2, "row_3_fu_380_p2");
    sc_trace(mVcdFile, row_3_reg_640, "row_3_reg_640");
    sc_trace(mVcdFile, tmp_46_cast_fu_394_p1, "tmp_46_cast_fu_394_p1");
    sc_trace(mVcdFile, tmp_46_cast_reg_645, "tmp_46_cast_reg_645");
    sc_trace(mVcdFile, exitcond9_fu_374_p2, "exitcond9_fu_374_p2");
    sc_trace(mVcdFile, col_fu_404_p2, "col_fu_404_p2");
    sc_trace(mVcdFile, col_reg_653, "col_reg_653");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond8_fu_398_p2, "exitcond8_fu_398_p2");
    sc_trace(mVcdFile, tmp_15_fu_429_p2, "tmp_15_fu_429_p2");
    sc_trace(mVcdFile, tmp_15_reg_663, "tmp_15_reg_663");
    sc_trace(mVcdFile, tmp_12_fu_444_p3, "tmp_12_fu_444_p3");
    sc_trace(mVcdFile, tmp_12_reg_671, "tmp_12_reg_671");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_ap_idle, "grp_mixColumns_fu_263_ap_idle");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_ap_ready, "grp_mixColumns_fu_263_ap_ready");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_ap_done, "grp_mixColumns_fu_263_ap_done");
    sc_trace(mVcdFile, next_mul4_fu_452_p2, "next_mul4_fu_452_p2");
    sc_trace(mVcdFile, next_mul4_reg_676, "next_mul4_reg_676");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, row_4_fu_464_p2, "row_4_fu_464_p2");
    sc_trace(mVcdFile, row_4_reg_684, "row_4_reg_684");
    sc_trace(mVcdFile, tmp_55_cast_fu_478_p1, "tmp_55_cast_fu_478_p1");
    sc_trace(mVcdFile, tmp_55_cast_reg_689, "tmp_55_cast_reg_689");
    sc_trace(mVcdFile, exitcond6_fu_458_p2, "exitcond6_fu_458_p2");
    sc_trace(mVcdFile, round_1_fu_482_p2, "round_1_fu_482_p2");
    sc_trace(mVcdFile, round_1_reg_694, "round_1_reg_694");
    sc_trace(mVcdFile, col_3_fu_498_p2, "col_3_fu_498_p2");
    sc_trace(mVcdFile, col_3_reg_702, "col_3_reg_702");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, exitcond5_fu_492_p2, "exitcond5_fu_492_p2");
    sc_trace(mVcdFile, tmp_23_fu_524_p2, "tmp_23_fu_524_p2");
    sc_trace(mVcdFile, tmp_23_reg_712, "tmp_23_reg_712");
    sc_trace(mVcdFile, next_mul3_fu_533_p2, "next_mul3_fu_533_p2");
    sc_trace(mVcdFile, next_mul3_reg_717, "next_mul3_reg_717");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, row_fu_545_p2, "row_fu_545_p2");
    sc_trace(mVcdFile, row_reg_725, "row_reg_725");
    sc_trace(mVcdFile, tmp_52_cast_fu_559_p1, "tmp_52_cast_fu_559_p1");
    sc_trace(mVcdFile, tmp_52_cast_reg_730, "tmp_52_cast_reg_730");
    sc_trace(mVcdFile, exitcond4_fu_539_p2, "exitcond4_fu_539_p2");
    sc_trace(mVcdFile, col_2_fu_569_p2, "col_2_fu_569_p2");
    sc_trace(mVcdFile, col_2_reg_738, "col_2_reg_738");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, exitcond_fu_563_p2, "exitcond_fu_563_p2");
    sc_trace(mVcdFile, tmp_21_fu_602_p2, "tmp_21_fu_602_p2");
    sc_trace(mVcdFile, tmp_21_reg_748, "tmp_21_reg_748");
    sc_trace(mVcdFile, expandedKey_address0, "expandedKey_address0");
    sc_trace(mVcdFile, expandedKey_ce0, "expandedKey_ce0");
    sc_trace(mVcdFile, expandedKey_we0, "expandedKey_we0");
    sc_trace(mVcdFile, expandedKey_q0, "expandedKey_q0");
    sc_trace(mVcdFile, roundKey_data_V_address0, "roundKey_data_V_address0");
    sc_trace(mVcdFile, roundKey_data_V_ce0, "roundKey_data_V_ce0");
    sc_trace(mVcdFile, roundKey_data_V_we0, "roundKey_data_V_we0");
    sc_trace(mVcdFile, roundKey_data_V_d0, "roundKey_data_V_d0");
    sc_trace(mVcdFile, roundKey_data_V_q0, "roundKey_data_V_q0");
    sc_trace(mVcdFile, roundKey_data_V_ce1, "roundKey_data_V_ce1");
    sc_trace(mVcdFile, roundKey_data_V_q1, "roundKey_data_V_q1");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_ap_start, "grp_mixColumns_fu_263_ap_start");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_address0, "grp_mixColumns_fu_263_state_data_V_address0");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_ce0, "grp_mixColumns_fu_263_state_data_V_ce0");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_we0, "grp_mixColumns_fu_263_state_data_V_we0");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_d0, "grp_mixColumns_fu_263_state_data_V_d0");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_address1, "grp_mixColumns_fu_263_state_data_V_address1");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_ce1, "grp_mixColumns_fu_263_state_data_V_ce1");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_we1, "grp_mixColumns_fu_263_state_data_V_we1");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_state_data_V_d1, "grp_mixColumns_fu_263_state_data_V_d1");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_ap_start, "grp_keyExpansion5_fu_273_ap_start");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_ap_done, "grp_keyExpansion5_fu_273_ap_done");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_ap_idle, "grp_keyExpansion5_fu_273_ap_idle");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_ap_ready, "grp_keyExpansion5_fu_273_ap_ready");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_masterKey_data_V_address0, "grp_keyExpansion5_fu_273_masterKey_data_V_address0");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_masterKey_data_V_ce0, "grp_keyExpansion5_fu_273_masterKey_data_V_ce0");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_expandedKey_V_address0, "grp_keyExpansion5_fu_273_expandedKey_V_address0");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_expandedKey_V_ce0, "grp_keyExpansion5_fu_273_expandedKey_V_ce0");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_expandedKey_V_we0, "grp_keyExpansion5_fu_273_expandedKey_V_we0");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_expandedKey_V_d0, "grp_keyExpansion5_fu_273_expandedKey_V_d0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_ap_start, "grp_addRoundKey4_fu_285_ap_start");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_ap_done, "grp_addRoundKey4_fu_285_ap_done");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_ap_idle, "grp_addRoundKey4_fu_285_ap_idle");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_ap_ready, "grp_addRoundKey4_fu_285_ap_ready");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_address0, "grp_addRoundKey4_fu_285_state_data_V_address0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_ce0, "grp_addRoundKey4_fu_285_state_data_V_ce0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_we0, "grp_addRoundKey4_fu_285_state_data_V_we0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_d0, "grp_addRoundKey4_fu_285_state_data_V_d0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_address1, "grp_addRoundKey4_fu_285_state_data_V_address1");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_ce1, "grp_addRoundKey4_fu_285_state_data_V_ce1");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_we1, "grp_addRoundKey4_fu_285_state_data_V_we1");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_state_data_V_d1, "grp_addRoundKey4_fu_285_state_data_V_d1");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_roundKey_data_V_address0, "grp_addRoundKey4_fu_285_roundKey_data_V_address0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_roundKey_data_V_ce0, "grp_addRoundKey4_fu_285_roundKey_data_V_ce0");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_roundKey_data_V_address1, "grp_addRoundKey4_fu_285_roundKey_data_V_address1");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_roundKey_data_V_ce1, "grp_addRoundKey4_fu_285_roundKey_data_V_ce1");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_ap_start, "grp_substituteBytes_fu_292_ap_start");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_ap_done, "grp_substituteBytes_fu_292_ap_done");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_ap_idle, "grp_substituteBytes_fu_292_ap_idle");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_ap_ready, "grp_substituteBytes_fu_292_ap_ready");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_address0, "grp_substituteBytes_fu_292_state_data_V_address0");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_ce0, "grp_substituteBytes_fu_292_state_data_V_ce0");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_we0, "grp_substituteBytes_fu_292_state_data_V_we0");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_d0, "grp_substituteBytes_fu_292_state_data_V_d0");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_address1, "grp_substituteBytes_fu_292_state_data_V_address1");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_ce1, "grp_substituteBytes_fu_292_state_data_V_ce1");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_we1, "grp_substituteBytes_fu_292_state_data_V_we1");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_state_data_V_d1, "grp_substituteBytes_fu_292_state_data_V_d1");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_ap_start, "grp_shiftRowLeft_fu_300_ap_start");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_ap_done, "grp_shiftRowLeft_fu_300_ap_done");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_ap_idle, "grp_shiftRowLeft_fu_300_ap_idle");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_ap_ready, "grp_shiftRowLeft_fu_300_ap_ready");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0, "grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0, "grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0, "grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0, "grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_row, "grp_shiftRowLeft_fu_300_row");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_shiftAmount, "grp_shiftRowLeft_fu_300_shiftAmount");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_ap_start, "grp_shiftRowRight_fu_312_ap_start");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_ap_done, "grp_shiftRowRight_fu_312_ap_done");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_ap_idle, "grp_shiftRowRight_fu_312_ap_idle");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_ap_ready, "grp_shiftRowRight_fu_312_ap_ready");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_AESMatrix_data_V_address0, "grp_shiftRowRight_fu_312_AESMatrix_data_V_address0");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0, "grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_AESMatrix_data_V_we0, "grp_shiftRowRight_fu_312_AESMatrix_data_V_we0");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_AESMatrix_data_V_d0, "grp_shiftRowRight_fu_312_AESMatrix_data_V_d0");
    sc_trace(mVcdFile, i_0_i_reg_127, "i_0_i_reg_127");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, exitcond_i_fu_342_p2, "exitcond_i_fu_342_p2");
    sc_trace(mVcdFile, j_0_i_reg_138, "j_0_i_reg_138");
    sc_trace(mVcdFile, row_assign_reg_149, "row_assign_reg_149");
    sc_trace(mVcdFile, phi_mul_reg_160, "phi_mul_reg_160");
    sc_trace(mVcdFile, col_assign_reg_172, "col_assign_reg_172");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, round_reg_183, "round_reg_183");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, row_assign_2_reg_195, "row_assign_2_reg_195");
    sc_trace(mVcdFile, phi_mul4_reg_206, "phi_mul4_reg_206");
    sc_trace(mVcdFile, col_assign_2_reg_218, "col_assign_2_reg_218");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, row_assign_1_reg_229, "row_assign_1_reg_229");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, phi_mul3_reg_240, "phi_mul3_reg_240");
    sc_trace(mVcdFile, col_assign_1_reg_252, "col_assign_1_reg_252");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, grp_mixColumns_fu_263_ap_start_reg, "grp_mixColumns_fu_263_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, grp_keyExpansion5_fu_273_ap_start_reg, "grp_keyExpansion5_fu_273_ap_start_reg");
    sc_trace(mVcdFile, grp_addRoundKey4_fu_285_ap_start_reg, "grp_addRoundKey4_fu_285_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, grp_substituteBytes_fu_292_ap_start_reg, "grp_substituteBytes_fu_292_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, exitcond7_fu_438_p2, "exitcond7_fu_438_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_shiftRowLeft_fu_300_ap_start_reg, "grp_shiftRowLeft_fu_300_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, grp_shiftRowRight_fu_312_ap_start_reg, "grp_shiftRowRight_fu_312_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_47_cast_fu_363_p1, "tmp_47_cast_fu_363_p1");
    sc_trace(mVcdFile, tmp_48_cast_fu_424_p1, "tmp_48_cast_fu_424_p1");
    sc_trace(mVcdFile, tmp_49_cast_fu_434_p1, "tmp_49_cast_fu_434_p1");
    sc_trace(mVcdFile, tmp_58_cast_fu_519_p1, "tmp_58_cast_fu_519_p1");
    sc_trace(mVcdFile, tmp_59_cast_fu_529_p1, "tmp_59_cast_fu_529_p1");
    sc_trace(mVcdFile, tmp_56_cast_fu_593_p1, "tmp_56_cast_fu_593_p1");
    sc_trace(mVcdFile, tmp_57_cast_fu_607_p1, "tmp_57_cast_fu_607_p1");
    sc_trace(mVcdFile, tmp_fu_330_p3, "tmp_fu_330_p3");
    sc_trace(mVcdFile, tmp_11_cast_fu_354_p1, "tmp_11_cast_fu_354_p1");
    sc_trace(mVcdFile, tmp_13_fu_358_p2, "tmp_13_fu_358_p2");
    sc_trace(mVcdFile, tmp_s_fu_386_p3, "tmp_s_fu_386_p3");
    sc_trace(mVcdFile, tmp_13_cast_fu_414_p1, "tmp_13_cast_fu_414_p1");
    sc_trace(mVcdFile, tmp_14_fu_418_p2, "tmp_14_fu_418_p2");
    sc_trace(mVcdFile, tmp_13_cast1_fu_410_p1, "tmp_13_cast1_fu_410_p1");
    sc_trace(mVcdFile, tmp_19_fu_470_p3, "tmp_19_fu_470_p3");
    sc_trace(mVcdFile, col_assign_2_cast5_fu_488_p1, "col_assign_2_cast5_fu_488_p1");
    sc_trace(mVcdFile, tmp_18_fu_504_p2, "tmp_18_fu_504_p2");
    sc_trace(mVcdFile, tmp_19_cast_fu_509_p1, "tmp_19_cast_fu_509_p1");
    sc_trace(mVcdFile, tmp_22_fu_513_p2, "tmp_22_fu_513_p2");
    sc_trace(mVcdFile, tmp_17_fu_551_p3, "tmp_17_fu_551_p3");
    sc_trace(mVcdFile, tmp_16_fu_575_p3, "tmp_16_fu_575_p3");
    sc_trace(mVcdFile, tmp_17_cast_fu_583_p1, "tmp_17_cast_fu_583_p1");
    sc_trace(mVcdFile, tmp_20_fu_587_p2, "tmp_20_fu_587_p2");
    sc_trace(mVcdFile, tmp_i6_cast_fu_598_p1, "tmp_i6_cast_fu_598_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

aesEncrypt::~aesEncrypt() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete expandedKey_U;
    delete roundKey_data_V_U;
    delete grp_mixColumns_fu_263;
    delete grp_keyExpansion5_fu_273;
    delete grp_addRoundKey4_fu_285;
    delete grp_substituteBytes_fu_292;
    delete grp_shiftRowLeft_fu_300;
    delete grp_shiftRowRight_fu_312;
}

void aesEncrypt::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_539_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        col_assign_1_reg_252 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        col_assign_1_reg_252 = col_2_reg_738.read();
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_458_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        col_assign_2_reg_218 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        col_assign_2_reg_218 = col_3_reg_702.read();
    }
    if ((esl_seteq<1,1,1>(exitcond9_fu_374_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        col_assign_reg_172 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        col_assign_reg_172 = col_reg_653.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_addRoundKey4_fu_285_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(exitcond6_fu_458_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(exitcond9_fu_374_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) && 
              esl_seteq<1,1,1>(exitcond4_fu_539_p2.read(), ap_const_lv1_1)))) {
            grp_addRoundKey4_fu_285_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_addRoundKey4_fu_285_ap_ready.read())) {
            grp_addRoundKey4_fu_285_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_keyExpansion5_fu_273_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            grp_keyExpansion5_fu_273_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_keyExpansion5_fu_273_ap_ready.read())) {
            grp_keyExpansion5_fu_273_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_mixColumns_fu_263_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
            grp_mixColumns_fu_263_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_mixColumns_fu_263_ap_ready.read())) {
            grp_mixColumns_fu_263_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_shiftRowLeft_fu_300_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
            grp_shiftRowLeft_fu_300_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_shiftRowLeft_fu_300_ap_ready.read())) {
            grp_shiftRowLeft_fu_300_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_shiftRowRight_fu_312_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
            grp_shiftRowRight_fu_312_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_shiftRowRight_fu_312_ap_ready.read())) {
            grp_shiftRowRight_fu_312_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_substituteBytes_fu_292_ap_start_reg = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(exitcond7_fu_438_p2.read(), ap_const_lv1_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
              esl_seteq<1,1,1>(exitcond7_fu_438_p2.read(), ap_const_lv1_1)))) {
            grp_substituteBytes_fu_292_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_substituteBytes_fu_292_ap_ready.read())) {
            grp_substituteBytes_fu_292_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_i_fu_342_p2.read(), ap_const_lv1_1))) {
        i_0_i_reg_127 = i_reg_614.read();
    } else if ((esl_seteq<1,1,1>(grp_keyExpansion5_fu_273_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        i_0_i_reg_127 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond11_i_fu_318_p2.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        j_0_i_reg_138 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(exitcond_i_fu_342_p2.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        j_0_i_reg_138 = j_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_563_p2.read(), ap_const_lv1_1))) {
        phi_mul3_reg_240 = next_mul3_reg_717.read();
    } else if ((esl_seteq<1,1,1>(grp_shiftRowRight_fu_312_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        phi_mul3_reg_240 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_492_p2.read(), ap_const_lv1_1))) {
        phi_mul4_reg_206 = next_mul4_reg_676.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                esl_seteq<1,1,1>(grp_mixColumns_fu_263_ap_done.read(), ap_const_logic_1))) {
        phi_mul4_reg_206 = ap_const_lv8_0;
    }
    if ((esl_seteq<1,1,1>(exitcond11_i_fu_318_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        phi_mul_reg_160 = ap_const_lv8_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(exitcond8_fu_398_p2.read(), ap_const_lv1_1))) {
        phi_mul_reg_160 = next_mul_reg_632.read();
    }
    if (esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
            round_reg_183 = round_1_reg_694.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            round_reg_183 = ap_const_lv4_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_563_p2.read(), ap_const_lv1_1))) {
        row_assign_1_reg_229 = row_reg_725.read();
    } else if ((esl_seteq<1,1,1>(grp_shiftRowRight_fu_312_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        row_assign_1_reg_229 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         esl_seteq<1,1,1>(exitcond5_fu_492_p2.read(), ap_const_lv1_1))) {
        row_assign_2_reg_195 = row_4_reg_684.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                esl_seteq<1,1,1>(grp_mixColumns_fu_263_ap_done.read(), ap_const_logic_1))) {
        row_assign_2_reg_195 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(exitcond11_i_fu_318_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        row_assign_reg_149 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(exitcond8_fu_398_p2.read(), ap_const_lv1_1))) {
        row_assign_reg_149 = row_3_reg_640.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        col_2_reg_738 = col_2_fu_569_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        col_3_reg_702 = col_3_fu_498_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        col_reg_653 = col_fu_404_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_614 = i_fu_324_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        next_mul3_reg_717 = next_mul3_fu_533_p2.read();
        row_reg_725 = row_fu_545_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        next_mul4_reg_676 = next_mul4_fu_452_p2.read();
        row_4_reg_684 = row_4_fu_464_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        next_mul_reg_632 = next_mul_fu_368_p2.read();
        row_3_reg_640 = row_3_fu_380_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(exitcond6_fu_458_p2.read(), ap_const_lv1_1))) {
        round_1_reg_694 = round_1_fu_482_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(grp_mixColumns_fu_263_ap_done.read(), ap_const_logic_1))) {
        tmp_12_reg_671 = tmp_12_fu_444_p3.read();
    }
    if ((esl_seteq<1,1,1>(exitcond8_fu_398_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        tmp_15_reg_663 = tmp_15_fu_429_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond_fu_563_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        tmp_21_reg_748 = tmp_21_fu_602_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond5_fu_492_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()))) {
        tmp_23_reg_712 = tmp_23_fu_524_p2.read();
    }
    if ((esl_seteq<1,1,1>(exitcond11_i_fu_318_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        tmp_43_cast_reg_619 = tmp_43_cast_fu_338_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond9_fu_374_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        tmp_46_cast_reg_645 = tmp_46_cast_fu_394_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond4_fu_539_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        tmp_52_cast_reg_730 = tmp_52_cast_fu_559_p1.read();
    }
    if ((esl_seteq<1,1,1>(exitcond6_fu_458_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
        tmp_55_cast_reg_689 = tmp_55_cast_fu_478_p1.read();
    }
}

void aesEncrypt::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aesEncrypt::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aesEncrypt::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aesEncrypt::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aesEncrypt::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aesEncrypt::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void aesEncrypt::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void aesEncrypt::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void aesEncrypt::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void aesEncrypt::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void aesEncrypt::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void aesEncrypt::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aesEncrypt::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void aesEncrypt::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void aesEncrypt::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void aesEncrypt::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void aesEncrypt::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void aesEncrypt::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void aesEncrypt::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void aesEncrypt::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void aesEncrypt::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void aesEncrypt::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void aesEncrypt::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aesEncrypt::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void aesEncrypt::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void aesEncrypt::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void aesEncrypt::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void aesEncrypt::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aesEncrypt::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aesEncrypt::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aesEncrypt::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aesEncrypt::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aesEncrypt::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aesEncrypt::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aesEncrypt::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aesEncrypt::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aesEncrypt::thread_col_2_fu_569_p2() {
    col_2_fu_569_p2 = (!col_assign_1_reg_252.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col_assign_1_reg_252.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_col_3_fu_498_p2() {
    col_3_fu_498_p2 = (!col_assign_2_reg_218.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col_assign_2_reg_218.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_col_assign_2_cast5_fu_488_p1() {
    col_assign_2_cast5_fu_488_p1 = esl_zext<6,3>(col_assign_2_reg_218.read());
}

void aesEncrypt::thread_col_fu_404_p2() {
    col_fu_404_p2 = (!col_assign_reg_172.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(col_assign_reg_172.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_exitcond11_i_fu_318_p2() {
    exitcond11_i_fu_318_p2 = (!i_0_i_reg_127.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_reg_127.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond4_fu_539_p2() {
    exitcond4_fu_539_p2 = (!row_assign_1_reg_229.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_1_reg_229.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond5_fu_492_p2() {
    exitcond5_fu_492_p2 = (!col_assign_2_reg_218.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_2_reg_218.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond6_fu_458_p2() {
    exitcond6_fu_458_p2 = (!row_assign_2_reg_195.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_2_reg_195.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond7_fu_438_p2() {
    exitcond7_fu_438_p2 = (!round_reg_183.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_reg_183.read() == ap_const_lv4_A);
}

void aesEncrypt::thread_exitcond8_fu_398_p2() {
    exitcond8_fu_398_p2 = (!col_assign_reg_172.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_reg_172.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond9_fu_374_p2() {
    exitcond9_fu_374_p2 = (!row_assign_reg_149.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(row_assign_reg_149.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond_fu_563_p2() {
    exitcond_fu_563_p2 = (!col_assign_1_reg_252.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(col_assign_1_reg_252.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_exitcond_i_fu_342_p2() {
    exitcond_i_fu_342_p2 = (!j_0_i_reg_138.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_0_i_reg_138.read() == ap_const_lv3_4);
}

void aesEncrypt::thread_expandedKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read())) {
        expandedKey_address0 =  (sc_lv<8>) (tmp_56_cast_fu_593_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        expandedKey_address0 =  (sc_lv<8>) (tmp_58_cast_fu_519_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        expandedKey_address0 =  (sc_lv<8>) (tmp_48_cast_fu_424_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expandedKey_address0 = grp_keyExpansion5_fu_273_expandedKey_V_address0.read();
    } else {
        expandedKey_address0 = "XXXXXXXX";
    }
}

void aesEncrypt::thread_expandedKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        expandedKey_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expandedKey_ce0 = grp_keyExpansion5_fu_273_expandedKey_V_ce0.read();
    } else {
        expandedKey_ce0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_expandedKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        expandedKey_we0 = grp_keyExpansion5_fu_273_expandedKey_V_we0.read();
    } else {
        expandedKey_we0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_grp_addRoundKey4_fu_285_ap_start() {
    grp_addRoundKey4_fu_285_ap_start = grp_addRoundKey4_fu_285_ap_start_reg.read();
}

void aesEncrypt::thread_grp_keyExpansion5_fu_273_ap_start() {
    grp_keyExpansion5_fu_273_ap_start = grp_keyExpansion5_fu_273_ap_start_reg.read();
}

void aesEncrypt::thread_grp_mixColumns_fu_263_ap_start() {
    grp_mixColumns_fu_263_ap_start = grp_mixColumns_fu_263_ap_start_reg.read();
}

void aesEncrypt::thread_grp_shiftRowLeft_fu_300_ap_start() {
    grp_shiftRowLeft_fu_300_ap_start = grp_shiftRowLeft_fu_300_ap_start_reg.read();
}

void aesEncrypt::thread_grp_shiftRowLeft_fu_300_row() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        grp_shiftRowLeft_fu_300_row = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        grp_shiftRowLeft_fu_300_row = ap_const_lv4_1;
    } else {
        grp_shiftRowLeft_fu_300_row =  (sc_lv<4>) ("XXXX");
    }
}

void aesEncrypt::thread_grp_shiftRowLeft_fu_300_shiftAmount() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        grp_shiftRowLeft_fu_300_shiftAmount = ap_const_lv4_2;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        grp_shiftRowLeft_fu_300_shiftAmount = ap_const_lv4_1;
    } else {
        grp_shiftRowLeft_fu_300_shiftAmount =  (sc_lv<4>) ("XXXX");
    }
}

void aesEncrypt::thread_grp_shiftRowRight_fu_312_ap_start() {
    grp_shiftRowRight_fu_312_ap_start = grp_shiftRowRight_fu_312_ap_start_reg.read();
}

void aesEncrypt::thread_grp_substituteBytes_fu_292_ap_start() {
    grp_substituteBytes_fu_292_ap_start = grp_substituteBytes_fu_292_ap_start_reg.read();
}

void aesEncrypt::thread_i_fu_324_p2() {
    i_fu_324_p2 = (!i_0_i_reg_127.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_0_i_reg_127.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_j_fu_348_p2() {
    j_fu_348_p2 = (!j_0_i_reg_138.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_i_reg_138.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_masterKey_data_V_address0() {
    masterKey_data_V_address0 = grp_keyExpansion5_fu_273_masterKey_data_V_address0.read();
}

void aesEncrypt::thread_masterKey_data_V_ce0() {
    masterKey_data_V_ce0 = grp_keyExpansion5_fu_273_masterKey_data_V_ce0.read();
}

void aesEncrypt::thread_next_mul3_fu_533_p2() {
    next_mul3_fu_533_p2 = (!phi_mul3_reg_240.read().is_01() || !ap_const_lv8_2C.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul3_reg_240.read()) + sc_biguint<8>(ap_const_lv8_2C));
}

void aesEncrypt::thread_next_mul4_fu_452_p2() {
    next_mul4_fu_452_p2 = (!phi_mul4_reg_206.read().is_01() || !ap_const_lv8_2C.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul4_reg_206.read()) + sc_biguint<8>(ap_const_lv8_2C));
}

void aesEncrypt::thread_next_mul_fu_368_p2() {
    next_mul_fu_368_p2 = (!phi_mul_reg_160.read().is_01() || !ap_const_lv8_2C.is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_160.read()) + sc_biguint<8>(ap_const_lv8_2C));
}

void aesEncrypt::thread_roundKey_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        roundKey_data_V_address0 =  (sc_lv<4>) (tmp_57_cast_fu_607_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        roundKey_data_V_address0 =  (sc_lv<4>) (tmp_59_cast_fu_529_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        roundKey_data_V_address0 =  (sc_lv<4>) (tmp_49_cast_fu_434_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        roundKey_data_V_address0 =  (sc_lv<4>) (tmp_47_cast_fu_363_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        roundKey_data_V_address0 = grp_addRoundKey4_fu_285_roundKey_data_V_address0.read();
    } else {
        roundKey_data_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aesEncrypt::thread_roundKey_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        roundKey_data_V_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        roundKey_data_V_ce0 = grp_addRoundKey4_fu_285_roundKey_data_V_ce0.read();
    } else {
        roundKey_data_V_ce0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_roundKey_data_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        roundKey_data_V_ce1 = grp_addRoundKey4_fu_285_roundKey_data_V_ce1.read();
    } else {
        roundKey_data_V_ce1 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_roundKey_data_V_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        roundKey_data_V_d0 = expandedKey_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        roundKey_data_V_d0 = ap_const_lv8_0;
    } else {
        roundKey_data_V_d0 = "XXXXXXXX";
    }
}

void aesEncrypt::thread_roundKey_data_V_we0() {
    if (((esl_seteq<1,1,1>(exitcond_i_fu_342_p2.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        roundKey_data_V_we0 = ap_const_logic_1;
    } else {
        roundKey_data_V_we0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_round_1_fu_482_p2() {
    round_1_fu_482_p2 = (!round_reg_183.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_reg_183.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void aesEncrypt::thread_row_3_fu_380_p2() {
    row_3_fu_380_p2 = (!row_assign_reg_149.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(row_assign_reg_149.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_row_4_fu_464_p2() {
    row_4_fu_464_p2 = (!row_assign_2_reg_195.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(row_assign_2_reg_195.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_row_fu_545_p2() {
    row_fu_545_p2 = (!row_assign_1_reg_229.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(row_assign_1_reg_229.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void aesEncrypt::thread_state_data_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_data_V_address0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_data_V_address0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_address0 = grp_substituteBytes_fu_292_state_data_V_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_address0 = grp_addRoundKey4_fu_285_state_data_V_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_address0 = grp_mixColumns_fu_263_state_data_V_address0.read();
    } else {
        state_data_V_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void aesEncrypt::thread_state_data_V_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_address1 = grp_substituteBytes_fu_292_state_data_V_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_address1 = grp_addRoundKey4_fu_285_state_data_V_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_address1 = grp_mixColumns_fu_263_state_data_V_address1.read();
    } else {
        state_data_V_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void aesEncrypt::thread_state_data_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_data_V_ce0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_data_V_ce0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_ce0 = grp_substituteBytes_fu_292_state_data_V_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_ce0 = grp_addRoundKey4_fu_285_state_data_V_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_ce0 = grp_mixColumns_fu_263_state_data_V_ce0.read();
    } else {
        state_data_V_ce0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_state_data_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_ce1 = grp_substituteBytes_fu_292_state_data_V_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_ce1 = grp_addRoundKey4_fu_285_state_data_V_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_ce1 = grp_mixColumns_fu_263_state_data_V_ce1.read();
    } else {
        state_data_V_ce1 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_state_data_V_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_data_V_d0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_data_V_d0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_d0 = grp_substituteBytes_fu_292_state_data_V_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_d0 = grp_addRoundKey4_fu_285_state_data_V_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_d0 = grp_mixColumns_fu_263_state_data_V_d0.read();
    } else {
        state_data_V_d0 = "XXXXXXXX";
    }
}

void aesEncrypt::thread_state_data_V_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_d1 = grp_substituteBytes_fu_292_state_data_V_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_d1 = grp_addRoundKey4_fu_285_state_data_V_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_d1 = grp_mixColumns_fu_263_state_data_V_d1.read();
    } else {
        state_data_V_d1 = "XXXXXXXX";
    }
}

void aesEncrypt::thread_state_data_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        state_data_V_we0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        state_data_V_we0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_we0 = grp_substituteBytes_fu_292_state_data_V_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_we0 = grp_addRoundKey4_fu_285_state_data_V_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_we0 = grp_mixColumns_fu_263_state_data_V_we0.read();
    } else {
        state_data_V_we0 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_state_data_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
        state_data_V_we1 = grp_substituteBytes_fu_292_state_data_V_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_data_V_we1 = grp_addRoundKey4_fu_285_state_data_V_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_data_V_we1 = grp_mixColumns_fu_263_state_data_V_we1.read();
    } else {
        state_data_V_we1 = ap_const_logic_0;
    }
}

void aesEncrypt::thread_tmp_11_cast_fu_354_p1() {
    tmp_11_cast_fu_354_p1 = esl_zext<6,3>(j_0_i_reg_138.read());
}

void aesEncrypt::thread_tmp_12_fu_444_p3() {
    tmp_12_fu_444_p3 = esl_concat<4,2>(round_reg_183.read(), ap_const_lv2_0);
}

void aesEncrypt::thread_tmp_13_cast1_fu_410_p1() {
    tmp_13_cast1_fu_410_p1 = esl_zext<6,3>(col_assign_reg_172.read());
}

void aesEncrypt::thread_tmp_13_cast_fu_414_p1() {
    tmp_13_cast_fu_414_p1 = esl_zext<8,3>(col_assign_reg_172.read());
}

void aesEncrypt::thread_tmp_13_fu_358_p2() {
    tmp_13_fu_358_p2 = (!tmp_43_cast_reg_619.read().is_01() || !tmp_11_cast_fu_354_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_43_cast_reg_619.read()) + sc_biguint<6>(tmp_11_cast_fu_354_p1.read()));
}

void aesEncrypt::thread_tmp_14_fu_418_p2() {
    tmp_14_fu_418_p2 = (!phi_mul_reg_160.read().is_01() || !tmp_13_cast_fu_414_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul_reg_160.read()) + sc_biguint<8>(tmp_13_cast_fu_414_p1.read()));
}

void aesEncrypt::thread_tmp_15_fu_429_p2() {
    tmp_15_fu_429_p2 = (!tmp_46_cast_reg_645.read().is_01() || !tmp_13_cast1_fu_410_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_46_cast_reg_645.read()) + sc_biguint<6>(tmp_13_cast1_fu_410_p1.read()));
}

void aesEncrypt::thread_tmp_16_fu_575_p3() {
    tmp_16_fu_575_p3 = esl_concat<3,3>(ap_const_lv3_5, col_assign_1_reg_252.read());
}

void aesEncrypt::thread_tmp_17_cast_fu_583_p1() {
    tmp_17_cast_fu_583_p1 = esl_zext<8,6>(tmp_16_fu_575_p3.read());
}

void aesEncrypt::thread_tmp_17_fu_551_p3() {
    tmp_17_fu_551_p3 = esl_concat<3,2>(row_assign_1_reg_229.read(), ap_const_lv2_0);
}

void aesEncrypt::thread_tmp_18_fu_504_p2() {
    tmp_18_fu_504_p2 = (!tmp_12_reg_671.read().is_01() || !col_assign_2_cast5_fu_488_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_12_reg_671.read()) + sc_biguint<6>(col_assign_2_cast5_fu_488_p1.read()));
}

void aesEncrypt::thread_tmp_19_cast_fu_509_p1() {
    tmp_19_cast_fu_509_p1 = esl_zext<8,6>(tmp_18_fu_504_p2.read());
}

void aesEncrypt::thread_tmp_19_fu_470_p3() {
    tmp_19_fu_470_p3 = esl_concat<3,2>(row_assign_2_reg_195.read(), ap_const_lv2_0);
}

void aesEncrypt::thread_tmp_20_fu_587_p2() {
    tmp_20_fu_587_p2 = (!phi_mul3_reg_240.read().is_01() || !tmp_17_cast_fu_583_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul3_reg_240.read()) + sc_biguint<8>(tmp_17_cast_fu_583_p1.read()));
}

void aesEncrypt::thread_tmp_21_fu_602_p2() {
    tmp_21_fu_602_p2 = (!tmp_52_cast_reg_730.read().is_01() || !tmp_i6_cast_fu_598_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_52_cast_reg_730.read()) + sc_biguint<6>(tmp_i6_cast_fu_598_p1.read()));
}

void aesEncrypt::thread_tmp_22_fu_513_p2() {
    tmp_22_fu_513_p2 = (!phi_mul4_reg_206.read().is_01() || !tmp_19_cast_fu_509_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(phi_mul4_reg_206.read()) + sc_biguint<8>(tmp_19_cast_fu_509_p1.read()));
}

void aesEncrypt::thread_tmp_23_fu_524_p2() {
    tmp_23_fu_524_p2 = (!tmp_55_cast_reg_689.read().is_01() || !col_assign_2_cast5_fu_488_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_55_cast_reg_689.read()) + sc_biguint<6>(col_assign_2_cast5_fu_488_p1.read()));
}

void aesEncrypt::thread_tmp_43_cast_fu_338_p1() {
    tmp_43_cast_fu_338_p1 = esl_zext<6,5>(tmp_fu_330_p3.read());
}

void aesEncrypt::thread_tmp_46_cast_fu_394_p1() {
    tmp_46_cast_fu_394_p1 = esl_zext<6,5>(tmp_s_fu_386_p3.read());
}

void aesEncrypt::thread_tmp_47_cast_fu_363_p1() {
    tmp_47_cast_fu_363_p1 = esl_zext<64,6>(tmp_13_fu_358_p2.read());
}

void aesEncrypt::thread_tmp_48_cast_fu_424_p1() {
    tmp_48_cast_fu_424_p1 = esl_zext<64,8>(tmp_14_fu_418_p2.read());
}

void aesEncrypt::thread_tmp_49_cast_fu_434_p1() {
    tmp_49_cast_fu_434_p1 = esl_zext<64,6>(tmp_15_reg_663.read());
}

void aesEncrypt::thread_tmp_52_cast_fu_559_p1() {
    tmp_52_cast_fu_559_p1 = esl_zext<6,5>(tmp_17_fu_551_p3.read());
}

void aesEncrypt::thread_tmp_55_cast_fu_478_p1() {
    tmp_55_cast_fu_478_p1 = esl_zext<6,5>(tmp_19_fu_470_p3.read());
}

void aesEncrypt::thread_tmp_56_cast_fu_593_p1() {
    tmp_56_cast_fu_593_p1 = esl_zext<64,8>(tmp_20_fu_587_p2.read());
}

void aesEncrypt::thread_tmp_57_cast_fu_607_p1() {
    tmp_57_cast_fu_607_p1 = esl_zext<64,6>(tmp_21_reg_748.read());
}

void aesEncrypt::thread_tmp_58_cast_fu_519_p1() {
    tmp_58_cast_fu_519_p1 = esl_zext<64,8>(tmp_22_fu_513_p2.read());
}

void aesEncrypt::thread_tmp_59_cast_fu_529_p1() {
    tmp_59_cast_fu_529_p1 = esl_zext<64,6>(tmp_23_reg_712.read());
}

void aesEncrypt::thread_tmp_fu_330_p3() {
    tmp_fu_330_p3 = esl_concat<3,2>(i_0_i_reg_127.read(), ap_const_lv2_0);
}

void aesEncrypt::thread_tmp_i6_cast_fu_598_p1() {
    tmp_i6_cast_fu_598_p1 = esl_zext<6,3>(col_assign_1_reg_252.read());
}

void aesEncrypt::thread_tmp_s_fu_386_p3() {
    tmp_s_fu_386_p3 = esl_concat<3,2>(row_assign_reg_149.read(), ap_const_lv2_0);
}

void aesEncrypt::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(grp_keyExpansion5_fu_273_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(exitcond11_i_fu_318_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_i_fu_342_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(exitcond9_fu_374_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond8_fu_398_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(exitcond7_fu_438_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(grp_substituteBytes_fu_292_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowLeft_fu_300_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_state12;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowLeft_fu_300_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowRight_fu_312_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(grp_mixColumns_fu_263_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state18;
            }
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(exitcond6_fu_458_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()))) {
                ap_NS_fsm = ap_ST_fsm_state20;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && esl_seteq<1,1,1>(exitcond5_fu_492_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state19;
            } else {
                ap_NS_fsm = ap_ST_fsm_state21;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 2097152 : 
            if ((esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(grp_substituteBytes_fu_292_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowLeft_fu_300_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
                ap_NS_fsm = ap_ST_fsm_state26;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowLeft_fu_300_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
                ap_NS_fsm = ap_ST_fsm_state28;
            } else {
                ap_NS_fsm = ap_ST_fsm_state27;
            }
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            if ((esl_seteq<1,1,1>(grp_shiftRowRight_fu_312_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state29;
            }
            break;
        case 536870912 : 
            if ((esl_seteq<1,1,1>(exitcond4_fu_539_p2.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
                ap_NS_fsm = ap_ST_fsm_state31;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        case 1073741824 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) && esl_seteq<1,1,1>(exitcond_fu_563_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state30;
            } else {
                ap_NS_fsm = ap_ST_fsm_state32;
            }
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 4294967296 : 
            if ((esl_seteq<1,1,1>(grp_addRoundKey4_fu_285_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state33;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<33>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

