// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axi2matrix.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axi2matrix::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axi2matrix::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> axi2matrix::ap_ST_fsm_state1 = "1";
const sc_lv<8> axi2matrix::ap_ST_fsm_state2 = "10";
const sc_lv<8> axi2matrix::ap_ST_fsm_state3 = "100";
const sc_lv<8> axi2matrix::ap_ST_fsm_state4 = "1000";
const sc_lv<8> axi2matrix::ap_ST_fsm_state5 = "10000";
const sc_lv<8> axi2matrix::ap_ST_fsm_state6 = "100000";
const sc_lv<8> axi2matrix::ap_ST_fsm_state7 = "1000000";
const sc_lv<8> axi2matrix::ap_ST_fsm_state8 = "10000000";
const sc_lv<32> axi2matrix::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> axi2matrix::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> axi2matrix::ap_const_lv64_4 = "100";
const sc_lv<64> axi2matrix::ap_const_lv64_8 = "1000";
const sc_lv<32> axi2matrix::ap_const_lv32_1 = "1";
const sc_lv<64> axi2matrix::ap_const_lv64_C = "1100";
const sc_lv<64> axi2matrix::ap_const_lv64_1 = "1";
const sc_lv<32> axi2matrix::ap_const_lv32_2 = "10";
const sc_lv<64> axi2matrix::ap_const_lv64_5 = "101";
const sc_lv<64> axi2matrix::ap_const_lv64_9 = "1001";
const sc_lv<32> axi2matrix::ap_const_lv32_3 = "11";
const sc_lv<64> axi2matrix::ap_const_lv64_D = "1101";
const sc_lv<64> axi2matrix::ap_const_lv64_2 = "10";
const sc_lv<32> axi2matrix::ap_const_lv32_4 = "100";
const sc_lv<64> axi2matrix::ap_const_lv64_6 = "110";
const sc_lv<64> axi2matrix::ap_const_lv64_A = "1010";
const sc_lv<32> axi2matrix::ap_const_lv32_5 = "101";
const sc_lv<64> axi2matrix::ap_const_lv64_E = "1110";
const sc_lv<64> axi2matrix::ap_const_lv64_3 = "11";
const sc_lv<32> axi2matrix::ap_const_lv32_6 = "110";
const sc_lv<64> axi2matrix::ap_const_lv64_7 = "111";
const sc_lv<64> axi2matrix::ap_const_lv64_B = "1011";
const sc_lv<32> axi2matrix::ap_const_lv32_7 = "111";
const sc_lv<64> axi2matrix::ap_const_lv64_F = "1111";
const sc_lv<32> axi2matrix::ap_const_lv32_78 = "1111000";
const sc_lv<32> axi2matrix::ap_const_lv32_7F = "1111111";
const sc_lv<32> axi2matrix::ap_const_lv32_70 = "1110000";
const sc_lv<32> axi2matrix::ap_const_lv32_77 = "1110111";
const sc_lv<32> axi2matrix::ap_const_lv32_68 = "1101000";
const sc_lv<32> axi2matrix::ap_const_lv32_6F = "1101111";
const sc_lv<32> axi2matrix::ap_const_lv32_60 = "1100000";
const sc_lv<32> axi2matrix::ap_const_lv32_67 = "1100111";
const sc_lv<32> axi2matrix::ap_const_lv32_58 = "1011000";
const sc_lv<32> axi2matrix::ap_const_lv32_5F = "1011111";
const sc_lv<32> axi2matrix::ap_const_lv32_50 = "1010000";
const sc_lv<32> axi2matrix::ap_const_lv32_57 = "1010111";
const sc_lv<32> axi2matrix::ap_const_lv32_48 = "1001000";
const sc_lv<32> axi2matrix::ap_const_lv32_4F = "1001111";
const sc_lv<32> axi2matrix::ap_const_lv32_40 = "1000000";
const sc_lv<32> axi2matrix::ap_const_lv32_47 = "1000111";
const sc_lv<32> axi2matrix::ap_const_lv32_38 = "111000";
const sc_lv<32> axi2matrix::ap_const_lv32_3F = "111111";
const sc_lv<32> axi2matrix::ap_const_lv32_30 = "110000";
const sc_lv<32> axi2matrix::ap_const_lv32_37 = "110111";
const sc_lv<32> axi2matrix::ap_const_lv32_28 = "101000";
const sc_lv<32> axi2matrix::ap_const_lv32_2F = "101111";
const sc_lv<32> axi2matrix::ap_const_lv32_20 = "100000";
const sc_lv<32> axi2matrix::ap_const_lv32_27 = "100111";
const sc_lv<32> axi2matrix::ap_const_lv32_18 = "11000";
const sc_lv<32> axi2matrix::ap_const_lv32_1F = "11111";
const sc_lv<32> axi2matrix::ap_const_lv32_10 = "10000";
const sc_lv<32> axi2matrix::ap_const_lv32_17 = "10111";
const sc_lv<32> axi2matrix::ap_const_lv32_8 = "1000";
const sc_lv<32> axi2matrix::ap_const_lv32_F = "1111";
const bool axi2matrix::ap_const_boolean_1 = true;

axi2matrix::axi2matrix(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( stream_in_key_TVALID );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TDATA );
    sensitive << ( op2_V_read_assign_15_reg_451 );
    sensitive << ( op2_V_read_assign_17_reg_461 );
    sensitive << ( op2_V_read_assign_19_reg_471 );
    sensitive << ( op2_V_read_assign_21_reg_481 );
    sensitive << ( op2_V_read_assign_23_reg_491 );
    sensitive << ( op2_V_read_assign_25_reg_501 );
    sensitive << ( op2_V_read_assign_27_reg_511 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_d1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TDATA );
    sensitive << ( op2_V_read_assign_16_reg_456 );
    sensitive << ( op2_V_read_assign_18_reg_466 );
    sensitive << ( op2_V_read_assign_20_reg_476 );
    sensitive << ( op2_V_read_assign_22_reg_486 );
    sensitive << ( op2_V_read_assign_24_reg_496 );
    sensitive << ( op2_V_read_assign_26_reg_506 );
    sensitive << ( tmp_reg_516 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_state_data_V_we1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_stream_in_key_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );

    SC_METHOD(thread_stream_in_key_TREADY);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );

    SC_METHOD(thread_tmp_fu_447_p1);
    sensitive << ( stream_in_key_TDATA );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( stream_in_key_TVALID );

    ap_CS_fsm = "00000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axi2matrix_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, stream_in_key_TDATA, "(port)stream_in_key_TDATA");
    sc_trace(mVcdFile, stream_in_key_TVALID, "(port)stream_in_key_TVALID");
    sc_trace(mVcdFile, stream_in_key_TREADY, "(port)stream_in_key_TREADY");
    sc_trace(mVcdFile, stream_in_key_TKEEP, "(port)stream_in_key_TKEEP");
    sc_trace(mVcdFile, stream_in_key_TSTRB, "(port)stream_in_key_TSTRB");
    sc_trace(mVcdFile, stream_in_key_TUSER, "(port)stream_in_key_TUSER");
    sc_trace(mVcdFile, stream_in_key_TLAST, "(port)stream_in_key_TLAST");
    sc_trace(mVcdFile, stream_in_key_TID, "(port)stream_in_key_TID");
    sc_trace(mVcdFile, stream_in_key_TDEST, "(port)stream_in_key_TDEST");
    sc_trace(mVcdFile, state_data_V_address0, "(port)state_data_V_address0");
    sc_trace(mVcdFile, state_data_V_ce0, "(port)state_data_V_ce0");
    sc_trace(mVcdFile, state_data_V_we0, "(port)state_data_V_we0");
    sc_trace(mVcdFile, state_data_V_d0, "(port)state_data_V_d0");
    sc_trace(mVcdFile, state_data_V_address1, "(port)state_data_V_address1");
    sc_trace(mVcdFile, state_data_V_ce1, "(port)state_data_V_ce1");
    sc_trace(mVcdFile, state_data_V_we1, "(port)state_data_V_we1");
    sc_trace(mVcdFile, state_data_V_d1, "(port)state_data_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, stream_in_key_TDATA_blk_n, "stream_in_key_TDATA_blk_n");
    sc_trace(mVcdFile, op2_V_read_assign_15_reg_451, "op2_V_read_assign_15_reg_451");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, op2_V_read_assign_16_reg_456, "op2_V_read_assign_16_reg_456");
    sc_trace(mVcdFile, op2_V_read_assign_17_reg_461, "op2_V_read_assign_17_reg_461");
    sc_trace(mVcdFile, op2_V_read_assign_18_reg_466, "op2_V_read_assign_18_reg_466");
    sc_trace(mVcdFile, op2_V_read_assign_19_reg_471, "op2_V_read_assign_19_reg_471");
    sc_trace(mVcdFile, op2_V_read_assign_20_reg_476, "op2_V_read_assign_20_reg_476");
    sc_trace(mVcdFile, op2_V_read_assign_21_reg_481, "op2_V_read_assign_21_reg_481");
    sc_trace(mVcdFile, op2_V_read_assign_22_reg_486, "op2_V_read_assign_22_reg_486");
    sc_trace(mVcdFile, op2_V_read_assign_23_reg_491, "op2_V_read_assign_23_reg_491");
    sc_trace(mVcdFile, op2_V_read_assign_24_reg_496, "op2_V_read_assign_24_reg_496");
    sc_trace(mVcdFile, op2_V_read_assign_25_reg_501, "op2_V_read_assign_25_reg_501");
    sc_trace(mVcdFile, op2_V_read_assign_26_reg_506, "op2_V_read_assign_26_reg_506");
    sc_trace(mVcdFile, op2_V_read_assign_27_reg_511, "op2_V_read_assign_27_reg_511");
    sc_trace(mVcdFile, tmp_fu_447_p1, "tmp_fu_447_p1");
    sc_trace(mVcdFile, tmp_reg_516, "tmp_reg_516");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

axi2matrix::~axi2matrix() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void axi2matrix::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        op2_V_read_assign_15_reg_451 = stream_in_key_TDATA.read().range(111, 104);
        op2_V_read_assign_16_reg_456 = stream_in_key_TDATA.read().range(103, 96);
        op2_V_read_assign_17_reg_461 = stream_in_key_TDATA.read().range(95, 88);
        op2_V_read_assign_18_reg_466 = stream_in_key_TDATA.read().range(87, 80);
        op2_V_read_assign_19_reg_471 = stream_in_key_TDATA.read().range(79, 72);
        op2_V_read_assign_20_reg_476 = stream_in_key_TDATA.read().range(71, 64);
        op2_V_read_assign_21_reg_481 = stream_in_key_TDATA.read().range(63, 56);
        op2_V_read_assign_22_reg_486 = stream_in_key_TDATA.read().range(55, 48);
        op2_V_read_assign_23_reg_491 = stream_in_key_TDATA.read().range(47, 40);
        op2_V_read_assign_24_reg_496 = stream_in_key_TDATA.read().range(39, 32);
        op2_V_read_assign_25_reg_501 = stream_in_key_TDATA.read().range(31, 24);
        op2_V_read_assign_26_reg_506 = stream_in_key_TDATA.read().range(23, 16);
        op2_V_read_assign_27_reg_511 = stream_in_key_TDATA.read().range(15, 8);
        tmp_reg_516 = tmp_fu_447_p1.read();
    }
}

void axi2matrix::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void axi2matrix::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void axi2matrix::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void axi2matrix::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void axi2matrix::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void axi2matrix::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void axi2matrix::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void axi2matrix::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void axi2matrix::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0));
}

void axi2matrix::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axi2matrix::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axi2matrix::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axi2matrix::thread_state_data_V_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_data_V_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else {
        state_data_V_address0 = "XXXX";
    }
}

void axi2matrix::thread_state_data_V_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_data_V_address1 =  (sc_lv<4>) (ap_const_lv64_4);
    } else {
        state_data_V_address1 = "XXXX";
    }
}

void axi2matrix::thread_state_data_V_ce0() {
    if (((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_data_V_ce0 = ap_const_logic_1;
    } else {
        state_data_V_ce0 = ap_const_logic_0;
    }
}

void axi2matrix::thread_state_data_V_ce1() {
    if (((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_data_V_ce1 = ap_const_logic_1;
    } else {
        state_data_V_ce1 = ap_const_logic_0;
    }
}

void axi2matrix::thread_state_data_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_data_V_d0 = op2_V_read_assign_27_reg_511.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_data_V_d0 = op2_V_read_assign_25_reg_501.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_data_V_d0 = op2_V_read_assign_23_reg_491.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_data_V_d0 = op2_V_read_assign_21_reg_481.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_data_V_d0 = op2_V_read_assign_19_reg_471.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_data_V_d0 = op2_V_read_assign_17_reg_461.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_data_V_d0 = op2_V_read_assign_15_reg_451.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_data_V_d0 = stream_in_key_TDATA.read().range(127, 120);
    } else {
        state_data_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void axi2matrix::thread_state_data_V_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        state_data_V_d1 = tmp_reg_516.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        state_data_V_d1 = op2_V_read_assign_26_reg_506.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        state_data_V_d1 = op2_V_read_assign_24_reg_496.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_data_V_d1 = op2_V_read_assign_22_reg_486.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        state_data_V_d1 = op2_V_read_assign_20_reg_476.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        state_data_V_d1 = op2_V_read_assign_18_reg_466.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        state_data_V_d1 = op2_V_read_assign_16_reg_456.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        state_data_V_d1 = stream_in_key_TDATA.read().range(119, 112);
    } else {
        state_data_V_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void axi2matrix::thread_state_data_V_we0() {
    if (((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_data_V_we0 = ap_const_logic_1;
    } else {
        state_data_V_we0 = ap_const_logic_0;
    }
}

void axi2matrix::thread_state_data_V_we1() {
    if (((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        state_data_V_we1 = ap_const_logic_1;
    } else {
        state_data_V_we1 = ap_const_logic_0;
    }
}

void axi2matrix::thread_stream_in_key_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        stream_in_key_TDATA_blk_n = stream_in_key_TVALID.read();
    } else {
        stream_in_key_TDATA_blk_n = ap_const_logic_1;
    }
}

void axi2matrix::thread_stream_in_key_TREADY() {
    if ((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        stream_in_key_TREADY = ap_const_logic_1;
    } else {
        stream_in_key_TREADY = ap_const_logic_0;
    }
}

void axi2matrix::thread_tmp_fu_447_p1() {
    tmp_fu_447_p1 = stream_in_key_TDATA.read().range(8-1, 0);
}

void axi2matrix::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(stream_in_key_TVALID.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<8>) ("XXXXXXXX");
            break;
    }
}

}

