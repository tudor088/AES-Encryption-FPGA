// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix2axi_HH_
#define _matrix2axi_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct matrix2axi : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > state_data_V_address0;
    sc_out< sc_logic > state_data_V_ce0;
    sc_in< sc_lv<8> > state_data_V_q0;
    sc_out< sc_lv<4> > state_data_V_address1;
    sc_out< sc_logic > state_data_V_ce1;
    sc_in< sc_lv<8> > state_data_V_q1;
    sc_out< sc_lv<128> > stream_out_TDATA;
    sc_out< sc_logic > stream_out_TVALID;
    sc_in< sc_logic > stream_out_TREADY;
    sc_out< sc_lv<16> > stream_out_TKEEP;
    sc_out< sc_lv<16> > stream_out_TSTRB;
    sc_out< sc_lv<1> > stream_out_TUSER;
    sc_out< sc_lv<1> > stream_out_TLAST;
    sc_out< sc_lv<1> > stream_out_TID;
    sc_out< sc_lv<1> > stream_out_TDEST;


    // Module declarations
    matrix2axi(sc_module_name name);
    SC_HAS_PROCESS(matrix2axi);

    ~matrix2axi();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > stream_out_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > state_data_V_load_reg_295;
    sc_signal< sc_lv<8> > state_data_V_load_31_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<8> > state_data_V_load_32_reg_315;
    sc_signal< sc_lv<8> > state_data_V_load_33_reg_320;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > state_data_V_load_34_reg_335;
    sc_signal< sc_lv<8> > state_data_V_load_35_reg_340;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<8> > state_data_V_load_36_reg_355;
    sc_signal< sc_lv<8> > state_data_V_load_37_reg_360;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > state_data_V_load_38_reg_375;
    sc_signal< sc_lv<8> > state_data_V_load_39_reg_380;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<8> > state_data_V_load_40_reg_395;
    sc_signal< sc_lv<8> > state_data_V_load_41_reg_400;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > state_data_V_load_42_reg_415;
    sc_signal< sc_lv<8> > state_data_V_load_43_reg_420;
    sc_signal< sc_logic > ap_reg_ioackin_stream_out_TREADY;
    sc_signal< sc_logic > ap_sig_ioackin_stream_out_TREADY;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_state8;
    static const sc_lv<9> ap_ST_fsm_state9;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_C;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_9;
    static const sc_lv<64> ap_const_lv64_D;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_A;
    static const sc_lv<64> ap_const_lv64_E;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_B;
    static const sc_lv<64> ap_const_lv64_F;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_stream_out_TREADY();
    void thread_state_data_V_address0();
    void thread_state_data_V_address1();
    void thread_state_data_V_ce0();
    void thread_state_data_V_ce1();
    void thread_stream_out_TDATA();
    void thread_stream_out_TDATA_blk_n();
    void thread_stream_out_TDEST();
    void thread_stream_out_TID();
    void thread_stream_out_TKEEP();
    void thread_stream_out_TLAST();
    void thread_stream_out_TSTRB();
    void thread_stream_out_TUSER();
    void thread_stream_out_TVALID();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
