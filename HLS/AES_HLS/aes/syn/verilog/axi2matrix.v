// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module axi2matrix (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_in_key_TDATA,
        stream_in_key_TVALID,
        stream_in_key_TREADY,
        stream_in_key_TKEEP,
        stream_in_key_TSTRB,
        stream_in_key_TUSER,
        stream_in_key_TLAST,
        stream_in_key_TID,
        stream_in_key_TDEST,
        state_data_V_address0,
        state_data_V_ce0,
        state_data_V_we0,
        state_data_V_d0,
        state_data_V_address1,
        state_data_V_ce1,
        state_data_V_we1,
        state_data_V_d1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] stream_in_key_TDATA;
input   stream_in_key_TVALID;
output   stream_in_key_TREADY;
input  [15:0] stream_in_key_TKEEP;
input  [15:0] stream_in_key_TSTRB;
input  [0:0] stream_in_key_TUSER;
input  [0:0] stream_in_key_TLAST;
input  [0:0] stream_in_key_TID;
input  [0:0] stream_in_key_TDEST;
output  [3:0] state_data_V_address0;
output   state_data_V_ce0;
output   state_data_V_we0;
output  [7:0] state_data_V_d0;
output  [3:0] state_data_V_address1;
output   state_data_V_ce1;
output   state_data_V_we1;
output  [7:0] state_data_V_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg stream_in_key_TREADY;
reg[3:0] state_data_V_address0;
reg state_data_V_ce0;
reg state_data_V_we0;
reg[7:0] state_data_V_d0;
reg[3:0] state_data_V_address1;
reg state_data_V_ce1;
reg state_data_V_we1;
reg[7:0] state_data_V_d1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_in_key_TDATA_blk_n;
reg   [7:0] op2_V_read_assign_15_reg_451;
reg    ap_block_state1;
reg   [7:0] op2_V_read_assign_16_reg_456;
reg   [7:0] op2_V_read_assign_17_reg_461;
reg   [7:0] op2_V_read_assign_18_reg_466;
reg   [7:0] op2_V_read_assign_19_reg_471;
reg   [7:0] op2_V_read_assign_20_reg_476;
reg   [7:0] op2_V_read_assign_21_reg_481;
reg   [7:0] op2_V_read_assign_22_reg_486;
reg   [7:0] op2_V_read_assign_23_reg_491;
reg   [7:0] op2_V_read_assign_24_reg_496;
reg   [7:0] op2_V_read_assign_25_reg_501;
reg   [7:0] op2_V_read_assign_26_reg_506;
reg   [7:0] op2_V_read_assign_27_reg_511;
wire   [7:0] tmp_fu_447_p1;
reg   [7:0] tmp_reg_516;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        op2_V_read_assign_15_reg_451 <= {{stream_in_key_TDATA[111:104]}};
        op2_V_read_assign_16_reg_456 <= {{stream_in_key_TDATA[103:96]}};
        op2_V_read_assign_17_reg_461 <= {{stream_in_key_TDATA[95:88]}};
        op2_V_read_assign_18_reg_466 <= {{stream_in_key_TDATA[87:80]}};
        op2_V_read_assign_19_reg_471 <= {{stream_in_key_TDATA[79:72]}};
        op2_V_read_assign_20_reg_476 <= {{stream_in_key_TDATA[71:64]}};
        op2_V_read_assign_21_reg_481 <= {{stream_in_key_TDATA[63:56]}};
        op2_V_read_assign_22_reg_486 <= {{stream_in_key_TDATA[55:48]}};
        op2_V_read_assign_23_reg_491 <= {{stream_in_key_TDATA[47:40]}};
        op2_V_read_assign_24_reg_496 <= {{stream_in_key_TDATA[39:32]}};
        op2_V_read_assign_25_reg_501 <= {{stream_in_key_TDATA[31:24]}};
        op2_V_read_assign_26_reg_506 <= {{stream_in_key_TDATA[23:16]}};
        op2_V_read_assign_27_reg_511 <= {{stream_in_key_TDATA[15:8]}};
        tmp_reg_516 <= tmp_fu_447_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address0 = 64'd0;
    end else begin
        state_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address1 = 64'd4;
    end else begin
        state_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce0 = 1'b1;
    end else begin
        state_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce1 = 1'b1;
    end else begin
        state_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_d0 = op2_V_read_assign_27_reg_511;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_d0 = op2_V_read_assign_25_reg_501;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_d0 = op2_V_read_assign_23_reg_491;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_d0 = op2_V_read_assign_21_reg_481;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_d0 = op2_V_read_assign_19_reg_471;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_d0 = op2_V_read_assign_17_reg_461;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_d0 = op2_V_read_assign_15_reg_451;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_d0 = {{stream_in_key_TDATA[127:120]}};
    end else begin
        state_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_d1 = tmp_reg_516;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_d1 = op2_V_read_assign_26_reg_506;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_d1 = op2_V_read_assign_24_reg_496;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_d1 = op2_V_read_assign_22_reg_486;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_d1 = op2_V_read_assign_20_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_d1 = op2_V_read_assign_18_reg_466;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_d1 = op2_V_read_assign_16_reg_456;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_d1 = {{stream_in_key_TDATA[119:112]}};
    end else begin
        state_data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_we0 = 1'b1;
    end else begin
        state_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_we1 = 1'b1;
    end else begin
        state_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        stream_in_key_TDATA_blk_n = stream_in_key_TVALID;
    end else begin
        stream_in_key_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        stream_in_key_TREADY = 1'b1;
    end else begin
        stream_in_key_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((stream_in_key_TVALID == 1'b0) | (ap_start == 1'b0));
end

assign tmp_fu_447_p1 = stream_in_key_TDATA[7:0];

endmodule //axi2matrix
