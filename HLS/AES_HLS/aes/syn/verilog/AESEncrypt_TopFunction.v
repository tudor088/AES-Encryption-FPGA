// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="AESEncrypt_TopFunction,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=2809,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=2578,HLS_SYN_LUT=5824}" *)

module AESEncrypt_TopFunction (
        ap_clk,
        ap_rst_n,
        stream_in_text_TDATA,
        stream_in_text_TVALID,
        stream_in_text_TREADY,
        stream_in_text_TKEEP,
        stream_in_text_TSTRB,
        stream_in_text_TUSER,
        stream_in_text_TLAST,
        stream_in_text_TID,
        stream_in_text_TDEST,
        stream_in_key_TDATA,
        stream_in_key_TVALID,
        stream_in_key_TREADY,
        stream_in_key_TKEEP,
        stream_in_key_TSTRB,
        stream_in_key_TUSER,
        stream_in_key_TLAST,
        stream_in_key_TID,
        stream_in_key_TDEST,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] stream_in_text_TDATA;
input   stream_in_text_TVALID;
output   stream_in_text_TREADY;
input  [15:0] stream_in_text_TKEEP;
input  [15:0] stream_in_text_TSTRB;
input  [0:0] stream_in_text_TUSER;
input  [0:0] stream_in_text_TLAST;
input  [0:0] stream_in_text_TID;
input  [0:0] stream_in_text_TDEST;
input  [127:0] stream_in_key_TDATA;
input   stream_in_key_TVALID;
output   stream_in_key_TREADY;
input  [15:0] stream_in_key_TKEEP;
input  [15:0] stream_in_key_TSTRB;
input  [0:0] stream_in_key_TUSER;
input  [0:0] stream_in_key_TLAST;
input  [0:0] stream_in_key_TID;
input  [0:0] stream_in_key_TDEST;
output  [127:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [15:0] stream_out_TKEEP;
output  [15:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [0:0] stream_out_TID;
output  [0:0] stream_out_TDEST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [127:0] stream_in_text_V_data_V_0_data_out;
wire    stream_in_text_V_data_V_0_vld_in;
wire    stream_in_text_V_data_V_0_vld_out;
wire    stream_in_text_V_data_V_0_ack_in;
reg    stream_in_text_V_data_V_0_ack_out;
reg   [127:0] stream_in_text_V_data_V_0_payload_A;
reg   [127:0] stream_in_text_V_data_V_0_payload_B;
reg    stream_in_text_V_data_V_0_sel_rd;
reg    stream_in_text_V_data_V_0_sel_wr;
wire    stream_in_text_V_data_V_0_sel;
wire    stream_in_text_V_data_V_0_load_A;
wire    stream_in_text_V_data_V_0_load_B;
reg   [1:0] stream_in_text_V_data_V_0_state;
wire    stream_in_text_V_data_V_0_state_cmp_full;
reg   [15:0] stream_in_text_V_keep_V_0_data_out;
wire    stream_in_text_V_keep_V_0_vld_in;
wire    stream_in_text_V_keep_V_0_vld_out;
wire    stream_in_text_V_keep_V_0_ack_in;
reg    stream_in_text_V_keep_V_0_ack_out;
reg   [15:0] stream_in_text_V_keep_V_0_payload_A;
reg   [15:0] stream_in_text_V_keep_V_0_payload_B;
reg    stream_in_text_V_keep_V_0_sel_rd;
reg    stream_in_text_V_keep_V_0_sel_wr;
wire    stream_in_text_V_keep_V_0_sel;
wire    stream_in_text_V_keep_V_0_load_A;
wire    stream_in_text_V_keep_V_0_load_B;
reg   [1:0] stream_in_text_V_keep_V_0_state;
wire    stream_in_text_V_keep_V_0_state_cmp_full;
reg   [15:0] stream_in_text_V_strb_V_0_data_out;
wire    stream_in_text_V_strb_V_0_vld_in;
wire    stream_in_text_V_strb_V_0_vld_out;
wire    stream_in_text_V_strb_V_0_ack_in;
reg    stream_in_text_V_strb_V_0_ack_out;
reg   [15:0] stream_in_text_V_strb_V_0_payload_A;
reg   [15:0] stream_in_text_V_strb_V_0_payload_B;
reg    stream_in_text_V_strb_V_0_sel_rd;
reg    stream_in_text_V_strb_V_0_sel_wr;
wire    stream_in_text_V_strb_V_0_sel;
wire    stream_in_text_V_strb_V_0_load_A;
wire    stream_in_text_V_strb_V_0_load_B;
reg   [1:0] stream_in_text_V_strb_V_0_state;
wire    stream_in_text_V_strb_V_0_state_cmp_full;
reg   [0:0] stream_in_text_V_user_V_0_data_out;
wire    stream_in_text_V_user_V_0_vld_in;
wire    stream_in_text_V_user_V_0_vld_out;
wire    stream_in_text_V_user_V_0_ack_in;
reg    stream_in_text_V_user_V_0_ack_out;
reg   [0:0] stream_in_text_V_user_V_0_payload_A;
reg   [0:0] stream_in_text_V_user_V_0_payload_B;
reg    stream_in_text_V_user_V_0_sel_rd;
reg    stream_in_text_V_user_V_0_sel_wr;
wire    stream_in_text_V_user_V_0_sel;
wire    stream_in_text_V_user_V_0_load_A;
wire    stream_in_text_V_user_V_0_load_B;
reg   [1:0] stream_in_text_V_user_V_0_state;
wire    stream_in_text_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_text_V_last_V_0_data_out;
wire    stream_in_text_V_last_V_0_vld_in;
wire    stream_in_text_V_last_V_0_vld_out;
wire    stream_in_text_V_last_V_0_ack_in;
reg    stream_in_text_V_last_V_0_ack_out;
reg   [0:0] stream_in_text_V_last_V_0_payload_A;
reg   [0:0] stream_in_text_V_last_V_0_payload_B;
reg    stream_in_text_V_last_V_0_sel_rd;
reg    stream_in_text_V_last_V_0_sel_wr;
wire    stream_in_text_V_last_V_0_sel;
wire    stream_in_text_V_last_V_0_load_A;
wire    stream_in_text_V_last_V_0_load_B;
reg   [1:0] stream_in_text_V_last_V_0_state;
wire    stream_in_text_V_last_V_0_state_cmp_full;
reg   [0:0] stream_in_text_V_id_V_0_data_out;
wire    stream_in_text_V_id_V_0_vld_in;
wire    stream_in_text_V_id_V_0_vld_out;
wire    stream_in_text_V_id_V_0_ack_in;
reg    stream_in_text_V_id_V_0_ack_out;
reg   [0:0] stream_in_text_V_id_V_0_payload_A;
reg   [0:0] stream_in_text_V_id_V_0_payload_B;
reg    stream_in_text_V_id_V_0_sel_rd;
reg    stream_in_text_V_id_V_0_sel_wr;
wire    stream_in_text_V_id_V_0_sel;
wire    stream_in_text_V_id_V_0_load_A;
wire    stream_in_text_V_id_V_0_load_B;
reg   [1:0] stream_in_text_V_id_V_0_state;
wire    stream_in_text_V_id_V_0_state_cmp_full;
reg   [0:0] stream_in_text_V_dest_V_0_data_out;
wire    stream_in_text_V_dest_V_0_vld_in;
wire    stream_in_text_V_dest_V_0_vld_out;
wire    stream_in_text_V_dest_V_0_ack_in;
reg    stream_in_text_V_dest_V_0_ack_out;
reg   [0:0] stream_in_text_V_dest_V_0_payload_A;
reg   [0:0] stream_in_text_V_dest_V_0_payload_B;
reg    stream_in_text_V_dest_V_0_sel_rd;
reg    stream_in_text_V_dest_V_0_sel_wr;
wire    stream_in_text_V_dest_V_0_sel;
wire    stream_in_text_V_dest_V_0_load_A;
wire    stream_in_text_V_dest_V_0_load_B;
reg   [1:0] stream_in_text_V_dest_V_0_state;
wire    stream_in_text_V_dest_V_0_state_cmp_full;
reg   [127:0] stream_in_key_V_data_V_0_data_out;
wire    stream_in_key_V_data_V_0_vld_in;
wire    stream_in_key_V_data_V_0_vld_out;
wire    stream_in_key_V_data_V_0_ack_in;
reg    stream_in_key_V_data_V_0_ack_out;
reg   [127:0] stream_in_key_V_data_V_0_payload_A;
reg   [127:0] stream_in_key_V_data_V_0_payload_B;
reg    stream_in_key_V_data_V_0_sel_rd;
reg    stream_in_key_V_data_V_0_sel_wr;
wire    stream_in_key_V_data_V_0_sel;
wire    stream_in_key_V_data_V_0_load_A;
wire    stream_in_key_V_data_V_0_load_B;
reg   [1:0] stream_in_key_V_data_V_0_state;
wire    stream_in_key_V_data_V_0_state_cmp_full;
reg   [15:0] stream_in_key_V_keep_V_0_data_out;
wire    stream_in_key_V_keep_V_0_vld_in;
wire    stream_in_key_V_keep_V_0_vld_out;
wire    stream_in_key_V_keep_V_0_ack_in;
reg    stream_in_key_V_keep_V_0_ack_out;
reg   [15:0] stream_in_key_V_keep_V_0_payload_A;
reg   [15:0] stream_in_key_V_keep_V_0_payload_B;
reg    stream_in_key_V_keep_V_0_sel_rd;
reg    stream_in_key_V_keep_V_0_sel_wr;
wire    stream_in_key_V_keep_V_0_sel;
wire    stream_in_key_V_keep_V_0_load_A;
wire    stream_in_key_V_keep_V_0_load_B;
reg   [1:0] stream_in_key_V_keep_V_0_state;
wire    stream_in_key_V_keep_V_0_state_cmp_full;
reg   [15:0] stream_in_key_V_strb_V_0_data_out;
wire    stream_in_key_V_strb_V_0_vld_in;
wire    stream_in_key_V_strb_V_0_vld_out;
wire    stream_in_key_V_strb_V_0_ack_in;
reg    stream_in_key_V_strb_V_0_ack_out;
reg   [15:0] stream_in_key_V_strb_V_0_payload_A;
reg   [15:0] stream_in_key_V_strb_V_0_payload_B;
reg    stream_in_key_V_strb_V_0_sel_rd;
reg    stream_in_key_V_strb_V_0_sel_wr;
wire    stream_in_key_V_strb_V_0_sel;
wire    stream_in_key_V_strb_V_0_load_A;
wire    stream_in_key_V_strb_V_0_load_B;
reg   [1:0] stream_in_key_V_strb_V_0_state;
wire    stream_in_key_V_strb_V_0_state_cmp_full;
reg   [0:0] stream_in_key_V_user_V_0_data_out;
wire    stream_in_key_V_user_V_0_vld_in;
wire    stream_in_key_V_user_V_0_vld_out;
wire    stream_in_key_V_user_V_0_ack_in;
reg    stream_in_key_V_user_V_0_ack_out;
reg   [0:0] stream_in_key_V_user_V_0_payload_A;
reg   [0:0] stream_in_key_V_user_V_0_payload_B;
reg    stream_in_key_V_user_V_0_sel_rd;
reg    stream_in_key_V_user_V_0_sel_wr;
wire    stream_in_key_V_user_V_0_sel;
wire    stream_in_key_V_user_V_0_load_A;
wire    stream_in_key_V_user_V_0_load_B;
reg   [1:0] stream_in_key_V_user_V_0_state;
wire    stream_in_key_V_user_V_0_state_cmp_full;
reg   [0:0] stream_in_key_V_last_V_0_data_out;
wire    stream_in_key_V_last_V_0_vld_in;
wire    stream_in_key_V_last_V_0_vld_out;
wire    stream_in_key_V_last_V_0_ack_in;
reg    stream_in_key_V_last_V_0_ack_out;
reg   [0:0] stream_in_key_V_last_V_0_payload_A;
reg   [0:0] stream_in_key_V_last_V_0_payload_B;
reg    stream_in_key_V_last_V_0_sel_rd;
reg    stream_in_key_V_last_V_0_sel_wr;
wire    stream_in_key_V_last_V_0_sel;
wire    stream_in_key_V_last_V_0_load_A;
wire    stream_in_key_V_last_V_0_load_B;
reg   [1:0] stream_in_key_V_last_V_0_state;
wire    stream_in_key_V_last_V_0_state_cmp_full;
reg   [0:0] stream_in_key_V_id_V_0_data_out;
wire    stream_in_key_V_id_V_0_vld_in;
wire    stream_in_key_V_id_V_0_vld_out;
wire    stream_in_key_V_id_V_0_ack_in;
reg    stream_in_key_V_id_V_0_ack_out;
reg   [0:0] stream_in_key_V_id_V_0_payload_A;
reg   [0:0] stream_in_key_V_id_V_0_payload_B;
reg    stream_in_key_V_id_V_0_sel_rd;
reg    stream_in_key_V_id_V_0_sel_wr;
wire    stream_in_key_V_id_V_0_sel;
wire    stream_in_key_V_id_V_0_load_A;
wire    stream_in_key_V_id_V_0_load_B;
reg   [1:0] stream_in_key_V_id_V_0_state;
wire    stream_in_key_V_id_V_0_state_cmp_full;
reg   [0:0] stream_in_key_V_dest_V_0_data_out;
wire    stream_in_key_V_dest_V_0_vld_in;
wire    stream_in_key_V_dest_V_0_vld_out;
wire    stream_in_key_V_dest_V_0_ack_in;
reg    stream_in_key_V_dest_V_0_ack_out;
reg   [0:0] stream_in_key_V_dest_V_0_payload_A;
reg   [0:0] stream_in_key_V_dest_V_0_payload_B;
reg    stream_in_key_V_dest_V_0_sel_rd;
reg    stream_in_key_V_dest_V_0_sel_wr;
wire    stream_in_key_V_dest_V_0_sel;
wire    stream_in_key_V_dest_V_0_load_A;
wire    stream_in_key_V_dest_V_0_load_B;
reg   [1:0] stream_in_key_V_dest_V_0_state;
wire    stream_in_key_V_dest_V_0_state_cmp_full;
reg   [127:0] stream_out_V_data_V_1_data_out;
wire    stream_out_V_data_V_1_vld_in;
wire    stream_out_V_data_V_1_vld_out;
wire    stream_out_V_data_V_1_ack_in;
wire    stream_out_V_data_V_1_ack_out;
reg   [127:0] stream_out_V_data_V_1_payload_A;
reg   [127:0] stream_out_V_data_V_1_payload_B;
reg    stream_out_V_data_V_1_sel_rd;
reg    stream_out_V_data_V_1_sel_wr;
wire    stream_out_V_data_V_1_sel;
wire    stream_out_V_data_V_1_load_A;
wire    stream_out_V_data_V_1_load_B;
reg   [1:0] stream_out_V_data_V_1_state;
wire    stream_out_V_data_V_1_state_cmp_full;
reg   [15:0] stream_out_V_keep_V_1_data_out;
wire    stream_out_V_keep_V_1_vld_in;
wire    stream_out_V_keep_V_1_vld_out;
wire    stream_out_V_keep_V_1_ack_in;
wire    stream_out_V_keep_V_1_ack_out;
reg   [15:0] stream_out_V_keep_V_1_payload_A;
reg   [15:0] stream_out_V_keep_V_1_payload_B;
reg    stream_out_V_keep_V_1_sel_rd;
reg    stream_out_V_keep_V_1_sel_wr;
wire    stream_out_V_keep_V_1_sel;
wire    stream_out_V_keep_V_1_load_A;
wire    stream_out_V_keep_V_1_load_B;
reg   [1:0] stream_out_V_keep_V_1_state;
wire    stream_out_V_keep_V_1_state_cmp_full;
reg   [15:0] stream_out_V_strb_V_1_data_out;
wire    stream_out_V_strb_V_1_vld_in;
wire    stream_out_V_strb_V_1_vld_out;
wire    stream_out_V_strb_V_1_ack_in;
wire    stream_out_V_strb_V_1_ack_out;
reg   [15:0] stream_out_V_strb_V_1_payload_A;
reg   [15:0] stream_out_V_strb_V_1_payload_B;
reg    stream_out_V_strb_V_1_sel_rd;
reg    stream_out_V_strb_V_1_sel_wr;
wire    stream_out_V_strb_V_1_sel;
wire    stream_out_V_strb_V_1_load_A;
wire    stream_out_V_strb_V_1_load_B;
reg   [1:0] stream_out_V_strb_V_1_state;
wire    stream_out_V_strb_V_1_state_cmp_full;
reg   [0:0] stream_out_V_user_V_1_data_out;
wire    stream_out_V_user_V_1_vld_in;
wire    stream_out_V_user_V_1_vld_out;
wire    stream_out_V_user_V_1_ack_in;
wire    stream_out_V_user_V_1_ack_out;
reg   [0:0] stream_out_V_user_V_1_payload_A;
reg   [0:0] stream_out_V_user_V_1_payload_B;
reg    stream_out_V_user_V_1_sel_rd;
reg    stream_out_V_user_V_1_sel_wr;
wire    stream_out_V_user_V_1_sel;
wire    stream_out_V_user_V_1_load_A;
wire    stream_out_V_user_V_1_load_B;
reg   [1:0] stream_out_V_user_V_1_state;
wire    stream_out_V_user_V_1_state_cmp_full;
reg   [0:0] stream_out_V_last_V_1_data_out;
wire    stream_out_V_last_V_1_vld_in;
wire    stream_out_V_last_V_1_vld_out;
wire    stream_out_V_last_V_1_ack_in;
wire    stream_out_V_last_V_1_ack_out;
reg   [0:0] stream_out_V_last_V_1_payload_A;
reg   [0:0] stream_out_V_last_V_1_payload_B;
reg    stream_out_V_last_V_1_sel_rd;
reg    stream_out_V_last_V_1_sel_wr;
wire    stream_out_V_last_V_1_sel;
wire    stream_out_V_last_V_1_load_A;
wire    stream_out_V_last_V_1_load_B;
reg   [1:0] stream_out_V_last_V_1_state;
wire    stream_out_V_last_V_1_state_cmp_full;
reg   [0:0] stream_out_V_id_V_1_data_out;
wire    stream_out_V_id_V_1_vld_in;
wire    stream_out_V_id_V_1_vld_out;
wire    stream_out_V_id_V_1_ack_in;
wire    stream_out_V_id_V_1_ack_out;
reg   [0:0] stream_out_V_id_V_1_payload_A;
reg   [0:0] stream_out_V_id_V_1_payload_B;
reg    stream_out_V_id_V_1_sel_rd;
reg    stream_out_V_id_V_1_sel_wr;
wire    stream_out_V_id_V_1_sel;
wire    stream_out_V_id_V_1_load_A;
wire    stream_out_V_id_V_1_load_B;
reg   [1:0] stream_out_V_id_V_1_state;
wire    stream_out_V_id_V_1_state_cmp_full;
reg   [0:0] stream_out_V_dest_V_1_data_out;
wire    stream_out_V_dest_V_1_vld_in;
wire    stream_out_V_dest_V_1_vld_out;
wire    stream_out_V_dest_V_1_ack_in;
wire    stream_out_V_dest_V_1_ack_out;
reg   [0:0] stream_out_V_dest_V_1_payload_A;
reg   [0:0] stream_out_V_dest_V_1_payload_B;
reg    stream_out_V_dest_V_1_sel_rd;
reg    stream_out_V_dest_V_1_sel_wr;
wire    stream_out_V_dest_V_1_sel;
wire    stream_out_V_dest_V_1_load_A;
wire    stream_out_V_dest_V_1_load_B;
reg   [1:0] stream_out_V_dest_V_1_state;
wire    stream_out_V_dest_V_1_state_cmp_full;
wire   [2:0] i_fu_251_p2;
reg   [2:0] i_reg_348;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_60_cast_fu_265_p1;
reg   [5:0] tmp_60_cast_reg_353;
wire   [0:0] exitcond11_i2_fu_245_p2;
wire   [2:0] j_fu_275_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_1_fu_301_p2;
reg   [2:0] i_1_reg_369;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_62_cast_fu_315_p1;
reg   [5:0] tmp_62_cast_reg_374;
wire   [0:0] exitcond11_i_fu_295_p2;
wire   [2:0] j_1_fu_325_p2;
wire    ap_CS_fsm_state5;
reg   [3:0] matrixText_data_V_address0;
reg    matrixText_data_V_ce0;
reg    matrixText_data_V_we0;
reg   [7:0] matrixText_data_V_d0;
wire   [7:0] matrixText_data_V_q0;
reg   [3:0] matrixText_data_V_address1;
reg    matrixText_data_V_ce1;
reg    matrixText_data_V_we1;
reg   [7:0] matrixText_data_V_d1;
wire   [7:0] matrixText_data_V_q1;
reg   [3:0] matrixKey_data_V_address0;
reg    matrixKey_data_V_ce0;
reg    matrixKey_data_V_we0;
reg   [7:0] matrixKey_data_V_d0;
wire   [7:0] matrixKey_data_V_q0;
reg    matrixKey_data_V_ce1;
reg    matrixKey_data_V_we1;
wire    grp_aesEncrypt_fu_174_ap_start;
wire    grp_aesEncrypt_fu_174_ap_done;
wire    grp_aesEncrypt_fu_174_ap_idle;
wire    grp_aesEncrypt_fu_174_ap_ready;
wire   [3:0] grp_aesEncrypt_fu_174_state_data_V_address0;
wire    grp_aesEncrypt_fu_174_state_data_V_ce0;
wire    grp_aesEncrypt_fu_174_state_data_V_we0;
wire   [7:0] grp_aesEncrypt_fu_174_state_data_V_d0;
wire   [3:0] grp_aesEncrypt_fu_174_state_data_V_address1;
wire    grp_aesEncrypt_fu_174_state_data_V_ce1;
wire    grp_aesEncrypt_fu_174_state_data_V_we1;
wire   [7:0] grp_aesEncrypt_fu_174_state_data_V_d1;
wire   [3:0] grp_aesEncrypt_fu_174_masterKey_data_V_address0;
wire    grp_aesEncrypt_fu_174_masterKey_data_V_ce0;
wire    grp_matrix2axi_fu_188_ap_start;
wire    grp_matrix2axi_fu_188_ap_done;
wire    grp_matrix2axi_fu_188_ap_idle;
wire    grp_matrix2axi_fu_188_ap_ready;
wire   [3:0] grp_matrix2axi_fu_188_state_data_V_address0;
wire    grp_matrix2axi_fu_188_state_data_V_ce0;
wire   [3:0] grp_matrix2axi_fu_188_state_data_V_address1;
wire    grp_matrix2axi_fu_188_state_data_V_ce1;
wire   [127:0] grp_matrix2axi_fu_188_stream_out_TDATA;
wire    grp_matrix2axi_fu_188_stream_out_TVALID;
wire    grp_matrix2axi_fu_188_stream_out_TREADY;
wire   [15:0] grp_matrix2axi_fu_188_stream_out_TKEEP;
wire   [15:0] grp_matrix2axi_fu_188_stream_out_TSTRB;
wire   [0:0] grp_matrix2axi_fu_188_stream_out_TUSER;
wire   [0:0] grp_matrix2axi_fu_188_stream_out_TLAST;
wire   [0:0] grp_matrix2axi_fu_188_stream_out_TID;
wire   [0:0] grp_matrix2axi_fu_188_stream_out_TDEST;
wire    grp_axi2matrix_fu_207_ap_start;
wire    grp_axi2matrix_fu_207_ap_done;
wire    grp_axi2matrix_fu_207_ap_idle;
wire    grp_axi2matrix_fu_207_ap_ready;
wire    grp_axi2matrix_fu_207_stream_in_key_TVALID;
wire    grp_axi2matrix_fu_207_stream_in_key_TREADY;
wire   [3:0] grp_axi2matrix_fu_207_state_data_V_address0;
wire    grp_axi2matrix_fu_207_state_data_V_ce0;
wire    grp_axi2matrix_fu_207_state_data_V_we0;
wire   [7:0] grp_axi2matrix_fu_207_state_data_V_d0;
wire   [3:0] grp_axi2matrix_fu_207_state_data_V_address1;
wire    grp_axi2matrix_fu_207_state_data_V_ce1;
wire    grp_axi2matrix_fu_207_state_data_V_we1;
wire   [7:0] grp_axi2matrix_fu_207_state_data_V_d1;
wire    grp_axi2matrix_fu_226_ap_start;
wire    grp_axi2matrix_fu_226_ap_done;
wire    grp_axi2matrix_fu_226_ap_idle;
wire    grp_axi2matrix_fu_226_ap_ready;
wire    grp_axi2matrix_fu_226_stream_in_key_TVALID;
wire    grp_axi2matrix_fu_226_stream_in_key_TREADY;
wire   [3:0] grp_axi2matrix_fu_226_state_data_V_address0;
wire    grp_axi2matrix_fu_226_state_data_V_ce0;
wire    grp_axi2matrix_fu_226_state_data_V_we0;
wire   [7:0] grp_axi2matrix_fu_226_state_data_V_d0;
wire   [3:0] grp_axi2matrix_fu_226_state_data_V_address1;
wire    grp_axi2matrix_fu_226_state_data_V_ce1;
wire    grp_axi2matrix_fu_226_state_data_V_we1;
wire   [7:0] grp_axi2matrix_fu_226_state_data_V_d1;
reg   [2:0] i_0_i1_reg_130;
wire   [0:0] exitcond_i6_fu_269_p2;
reg   [2:0] j_0_i5_reg_141;
reg   [2:0] i_0_i_reg_152;
wire   [0:0] exitcond_i_fu_319_p2;
reg   [2:0] j_0_i_reg_163;
reg    grp_aesEncrypt_fu_174_ap_start_reg;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg    grp_matrix2axi_fu_188_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_axi2matrix_fu_207_ap_start_reg;
wire    ap_CS_fsm_state6;
reg    grp_axi2matrix_fu_226_ap_start_reg;
wire   [63:0] tmp_63_cast_fu_290_p1;
wire   [63:0] tmp_64_cast_fu_340_p1;
wire   [4:0] tmp_fu_257_p3;
wire   [5:0] tmp_cast_fu_281_p1;
wire   [5:0] tmp_24_fu_285_p2;
wire   [4:0] tmp_s_fu_307_p3;
wire   [5:0] tmp_20_cast_fu_331_p1;
wire   [5:0] tmp_25_fu_335_p2;
wire    ap_CS_fsm_state11;
reg    ap_block_state11;
reg   [10:0] ap_NS_fsm;
reg    ap_block_state6_on_subcall_done;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 stream_in_text_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_data_V_0_state = 2'd0;
#0 stream_in_text_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_keep_V_0_state = 2'd0;
#0 stream_in_text_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_strb_V_0_state = 2'd0;
#0 stream_in_text_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_user_V_0_state = 2'd0;
#0 stream_in_text_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_last_V_0_state = 2'd0;
#0 stream_in_text_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_id_V_0_state = 2'd0;
#0 stream_in_text_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_text_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_text_V_dest_V_0_state = 2'd0;
#0 stream_in_key_V_data_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_data_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_data_V_0_state = 2'd0;
#0 stream_in_key_V_keep_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_keep_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_keep_V_0_state = 2'd0;
#0 stream_in_key_V_strb_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_strb_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_strb_V_0_state = 2'd0;
#0 stream_in_key_V_user_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_user_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_user_V_0_state = 2'd0;
#0 stream_in_key_V_last_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_last_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_last_V_0_state = 2'd0;
#0 stream_in_key_V_id_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_id_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_id_V_0_state = 2'd0;
#0 stream_in_key_V_dest_V_0_sel_rd = 1'b0;
#0 stream_in_key_V_dest_V_0_sel_wr = 1'b0;
#0 stream_in_key_V_dest_V_0_state = 2'd0;
#0 stream_out_V_data_V_1_sel_rd = 1'b0;
#0 stream_out_V_data_V_1_sel_wr = 1'b0;
#0 stream_out_V_data_V_1_state = 2'd0;
#0 stream_out_V_keep_V_1_sel_rd = 1'b0;
#0 stream_out_V_keep_V_1_sel_wr = 1'b0;
#0 stream_out_V_keep_V_1_state = 2'd0;
#0 stream_out_V_strb_V_1_sel_rd = 1'b0;
#0 stream_out_V_strb_V_1_sel_wr = 1'b0;
#0 stream_out_V_strb_V_1_state = 2'd0;
#0 stream_out_V_user_V_1_sel_rd = 1'b0;
#0 stream_out_V_user_V_1_sel_wr = 1'b0;
#0 stream_out_V_user_V_1_state = 2'd0;
#0 stream_out_V_last_V_1_sel_rd = 1'b0;
#0 stream_out_V_last_V_1_sel_wr = 1'b0;
#0 stream_out_V_last_V_1_state = 2'd0;
#0 stream_out_V_id_V_1_sel_rd = 1'b0;
#0 stream_out_V_id_V_1_sel_wr = 1'b0;
#0 stream_out_V_id_V_1_state = 2'd0;
#0 stream_out_V_dest_V_1_sel_rd = 1'b0;
#0 stream_out_V_dest_V_1_sel_wr = 1'b0;
#0 stream_out_V_dest_V_1_state = 2'd0;
#0 grp_aesEncrypt_fu_174_ap_start_reg = 1'b0;
#0 grp_matrix2axi_fu_188_ap_start_reg = 1'b0;
#0 grp_axi2matrix_fu_207_ap_start_reg = 1'b0;
#0 grp_axi2matrix_fu_226_ap_start_reg = 1'b0;
end

AESEncrypt_TopFunction_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
AESEncrypt_TopFunction_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

AESEncrypt_TopFunjbC #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
matrixText_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(matrixText_data_V_address0),
    .ce0(matrixText_data_V_ce0),
    .we0(matrixText_data_V_we0),
    .d0(matrixText_data_V_d0),
    .q0(matrixText_data_V_q0),
    .address1(matrixText_data_V_address1),
    .ce1(matrixText_data_V_ce1),
    .we1(matrixText_data_V_we1),
    .d1(matrixText_data_V_d1),
    .q1(matrixText_data_V_q1)
);

AESEncrypt_TopFunkbM #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
matrixKey_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(matrixKey_data_V_address0),
    .ce0(matrixKey_data_V_ce0),
    .we0(matrixKey_data_V_we0),
    .d0(matrixKey_data_V_d0),
    .q0(matrixKey_data_V_q0),
    .address1(grp_axi2matrix_fu_226_state_data_V_address1),
    .ce1(matrixKey_data_V_ce1),
    .we1(matrixKey_data_V_we1),
    .d1(grp_axi2matrix_fu_226_state_data_V_d1)
);

aesEncrypt grp_aesEncrypt_fu_174(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_aesEncrypt_fu_174_ap_start),
    .ap_done(grp_aesEncrypt_fu_174_ap_done),
    .ap_idle(grp_aesEncrypt_fu_174_ap_idle),
    .ap_ready(grp_aesEncrypt_fu_174_ap_ready),
    .state_data_V_address0(grp_aesEncrypt_fu_174_state_data_V_address0),
    .state_data_V_ce0(grp_aesEncrypt_fu_174_state_data_V_ce0),
    .state_data_V_we0(grp_aesEncrypt_fu_174_state_data_V_we0),
    .state_data_V_d0(grp_aesEncrypt_fu_174_state_data_V_d0),
    .state_data_V_q0(matrixText_data_V_q0),
    .state_data_V_address1(grp_aesEncrypt_fu_174_state_data_V_address1),
    .state_data_V_ce1(grp_aesEncrypt_fu_174_state_data_V_ce1),
    .state_data_V_we1(grp_aesEncrypt_fu_174_state_data_V_we1),
    .state_data_V_d1(grp_aesEncrypt_fu_174_state_data_V_d1),
    .state_data_V_q1(matrixText_data_V_q1),
    .masterKey_data_V_address0(grp_aesEncrypt_fu_174_masterKey_data_V_address0),
    .masterKey_data_V_ce0(grp_aesEncrypt_fu_174_masterKey_data_V_ce0),
    .masterKey_data_V_q0(matrixKey_data_V_q0)
);

matrix2axi grp_matrix2axi_fu_188(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_matrix2axi_fu_188_ap_start),
    .ap_done(grp_matrix2axi_fu_188_ap_done),
    .ap_idle(grp_matrix2axi_fu_188_ap_idle),
    .ap_ready(grp_matrix2axi_fu_188_ap_ready),
    .state_data_V_address0(grp_matrix2axi_fu_188_state_data_V_address0),
    .state_data_V_ce0(grp_matrix2axi_fu_188_state_data_V_ce0),
    .state_data_V_q0(matrixText_data_V_q0),
    .state_data_V_address1(grp_matrix2axi_fu_188_state_data_V_address1),
    .state_data_V_ce1(grp_matrix2axi_fu_188_state_data_V_ce1),
    .state_data_V_q1(matrixText_data_V_q1),
    .stream_out_TDATA(grp_matrix2axi_fu_188_stream_out_TDATA),
    .stream_out_TVALID(grp_matrix2axi_fu_188_stream_out_TVALID),
    .stream_out_TREADY(grp_matrix2axi_fu_188_stream_out_TREADY),
    .stream_out_TKEEP(grp_matrix2axi_fu_188_stream_out_TKEEP),
    .stream_out_TSTRB(grp_matrix2axi_fu_188_stream_out_TSTRB),
    .stream_out_TUSER(grp_matrix2axi_fu_188_stream_out_TUSER),
    .stream_out_TLAST(grp_matrix2axi_fu_188_stream_out_TLAST),
    .stream_out_TID(grp_matrix2axi_fu_188_stream_out_TID),
    .stream_out_TDEST(grp_matrix2axi_fu_188_stream_out_TDEST)
);

axi2matrix grp_axi2matrix_fu_207(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_axi2matrix_fu_207_ap_start),
    .ap_done(grp_axi2matrix_fu_207_ap_done),
    .ap_idle(grp_axi2matrix_fu_207_ap_idle),
    .ap_ready(grp_axi2matrix_fu_207_ap_ready),
    .stream_in_key_TDATA(stream_in_text_V_data_V_0_data_out),
    .stream_in_key_TVALID(grp_axi2matrix_fu_207_stream_in_key_TVALID),
    .stream_in_key_TREADY(grp_axi2matrix_fu_207_stream_in_key_TREADY),
    .stream_in_key_TKEEP(stream_in_text_V_keep_V_0_data_out),
    .stream_in_key_TSTRB(stream_in_text_V_strb_V_0_data_out),
    .stream_in_key_TUSER(stream_in_text_V_user_V_0_data_out),
    .stream_in_key_TLAST(stream_in_text_V_last_V_0_data_out),
    .stream_in_key_TID(stream_in_text_V_id_V_0_data_out),
    .stream_in_key_TDEST(stream_in_text_V_dest_V_0_data_out),
    .state_data_V_address0(grp_axi2matrix_fu_207_state_data_V_address0),
    .state_data_V_ce0(grp_axi2matrix_fu_207_state_data_V_ce0),
    .state_data_V_we0(grp_axi2matrix_fu_207_state_data_V_we0),
    .state_data_V_d0(grp_axi2matrix_fu_207_state_data_V_d0),
    .state_data_V_address1(grp_axi2matrix_fu_207_state_data_V_address1),
    .state_data_V_ce1(grp_axi2matrix_fu_207_state_data_V_ce1),
    .state_data_V_we1(grp_axi2matrix_fu_207_state_data_V_we1),
    .state_data_V_d1(grp_axi2matrix_fu_207_state_data_V_d1)
);

axi2matrix grp_axi2matrix_fu_226(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_axi2matrix_fu_226_ap_start),
    .ap_done(grp_axi2matrix_fu_226_ap_done),
    .ap_idle(grp_axi2matrix_fu_226_ap_idle),
    .ap_ready(grp_axi2matrix_fu_226_ap_ready),
    .stream_in_key_TDATA(stream_in_key_V_data_V_0_data_out),
    .stream_in_key_TVALID(grp_axi2matrix_fu_226_stream_in_key_TVALID),
    .stream_in_key_TREADY(grp_axi2matrix_fu_226_stream_in_key_TREADY),
    .stream_in_key_TKEEP(stream_in_key_V_keep_V_0_data_out),
    .stream_in_key_TSTRB(stream_in_key_V_strb_V_0_data_out),
    .stream_in_key_TUSER(stream_in_key_V_user_V_0_data_out),
    .stream_in_key_TLAST(stream_in_key_V_last_V_0_data_out),
    .stream_in_key_TID(stream_in_key_V_id_V_0_data_out),
    .stream_in_key_TDEST(stream_in_key_V_dest_V_0_data_out),
    .state_data_V_address0(grp_axi2matrix_fu_226_state_data_V_address0),
    .state_data_V_ce0(grp_axi2matrix_fu_226_state_data_V_ce0),
    .state_data_V_we0(grp_axi2matrix_fu_226_state_data_V_we0),
    .state_data_V_d0(grp_axi2matrix_fu_226_state_data_V_d0),
    .state_data_V_address1(grp_axi2matrix_fu_226_state_data_V_address1),
    .state_data_V_ce1(grp_axi2matrix_fu_226_state_data_V_ce1),
    .state_data_V_we1(grp_axi2matrix_fu_226_state_data_V_we1),
    .state_data_V_d1(grp_axi2matrix_fu_226_state_data_V_d1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_aesEncrypt_fu_174_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            grp_aesEncrypt_fu_174_ap_start_reg <= 1'b1;
        end else if ((grp_aesEncrypt_fu_174_ap_ready == 1'b1)) begin
            grp_aesEncrypt_fu_174_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_axi2matrix_fu_207_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond11_i_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_axi2matrix_fu_207_ap_start_reg <= 1'b1;
        end else if ((grp_axi2matrix_fu_207_ap_ready == 1'b1)) begin
            grp_axi2matrix_fu_207_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_axi2matrix_fu_226_ap_start_reg <= 1'b0;
    end else begin
        if (((exitcond11_i_fu_295_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            grp_axi2matrix_fu_226_ap_start_reg <= 1'b1;
        end else if ((grp_axi2matrix_fu_226_ap_ready == 1'b1)) begin
            grp_axi2matrix_fu_226_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_matrix2axi_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_matrix2axi_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_matrix2axi_fu_188_ap_ready == 1'b1)) begin
            grp_matrix2axi_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_data_V_0_ack_out == 1'b1) & (stream_in_key_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_data_V_0_sel_rd <= ~stream_in_key_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_data_V_0_ack_in == 1'b1) & (stream_in_key_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_data_V_0_sel_wr <= ~stream_in_key_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_data_V_0_state == 2'd2) & (stream_in_key_V_data_V_0_vld_in == 1'b0)) | ((stream_in_key_V_data_V_0_state == 2'd3) & (stream_in_key_V_data_V_0_vld_in == 1'b0) & (stream_in_key_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_data_V_0_state == 2'd1) & (stream_in_key_V_data_V_0_ack_out == 1'b0)) | ((stream_in_key_V_data_V_0_state == 2'd3) & (stream_in_key_V_data_V_0_ack_out == 1'b0) & (stream_in_key_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_data_V_0_vld_in == 1'b0) & (stream_in_key_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_data_V_0_ack_out == 1'b0) & (stream_in_key_V_data_V_0_vld_in == 1'b1)) & (stream_in_key_V_data_V_0_state == 2'd3)) | ((stream_in_key_V_data_V_0_state == 2'd1) & (stream_in_key_V_data_V_0_ack_out == 1'b1)) | ((stream_in_key_V_data_V_0_state == 2'd2) & (stream_in_key_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_dest_V_0_ack_out == 1'b1) & (stream_in_key_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_dest_V_0_sel_rd <= ~stream_in_key_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_dest_V_0_ack_in == 1'b1) & (stream_in_key_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_dest_V_0_sel_wr <= ~stream_in_key_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_dest_V_0_state == 2'd2) & (stream_in_key_V_dest_V_0_vld_in == 1'b0)) | ((stream_in_key_V_dest_V_0_state == 2'd3) & (stream_in_key_V_dest_V_0_vld_in == 1'b0) & (stream_in_key_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_dest_V_0_state == 2'd1) & (stream_in_key_V_dest_V_0_ack_out == 1'b0)) | ((stream_in_key_V_dest_V_0_state == 2'd3) & (stream_in_key_V_dest_V_0_ack_out == 1'b0) & (stream_in_key_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_dest_V_0_vld_in == 1'b0) & (stream_in_key_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_dest_V_0_ack_out == 1'b0) & (stream_in_key_V_dest_V_0_vld_in == 1'b1)) & (stream_in_key_V_dest_V_0_state == 2'd3)) | ((stream_in_key_V_dest_V_0_state == 2'd1) & (stream_in_key_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_key_V_dest_V_0_state == 2'd2) & (stream_in_key_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_id_V_0_ack_out == 1'b1) & (stream_in_key_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_id_V_0_sel_rd <= ~stream_in_key_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_id_V_0_ack_in == 1'b1) & (stream_in_key_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_id_V_0_sel_wr <= ~stream_in_key_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_id_V_0_state == 2'd2) & (stream_in_key_V_id_V_0_vld_in == 1'b0)) | ((stream_in_key_V_id_V_0_state == 2'd3) & (stream_in_key_V_id_V_0_vld_in == 1'b0) & (stream_in_key_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_id_V_0_state == 2'd1) & (stream_in_key_V_id_V_0_ack_out == 1'b0)) | ((stream_in_key_V_id_V_0_state == 2'd3) & (stream_in_key_V_id_V_0_ack_out == 1'b0) & (stream_in_key_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_id_V_0_vld_in == 1'b0) & (stream_in_key_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_id_V_0_ack_out == 1'b0) & (stream_in_key_V_id_V_0_vld_in == 1'b1)) & (stream_in_key_V_id_V_0_state == 2'd3)) | ((stream_in_key_V_id_V_0_state == 2'd1) & (stream_in_key_V_id_V_0_ack_out == 1'b1)) | ((stream_in_key_V_id_V_0_state == 2'd2) & (stream_in_key_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_keep_V_0_ack_out == 1'b1) & (stream_in_key_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_keep_V_0_sel_rd <= ~stream_in_key_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_keep_V_0_ack_in == 1'b1) & (stream_in_key_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_keep_V_0_sel_wr <= ~stream_in_key_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_keep_V_0_state == 2'd2) & (stream_in_key_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_key_V_keep_V_0_state == 2'd3) & (stream_in_key_V_keep_V_0_vld_in == 1'b0) & (stream_in_key_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_keep_V_0_state == 2'd1) & (stream_in_key_V_keep_V_0_ack_out == 1'b0)) | ((stream_in_key_V_keep_V_0_state == 2'd3) & (stream_in_key_V_keep_V_0_ack_out == 1'b0) & (stream_in_key_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_keep_V_0_vld_in == 1'b0) & (stream_in_key_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_keep_V_0_ack_out == 1'b0) & (stream_in_key_V_keep_V_0_vld_in == 1'b1)) & (stream_in_key_V_keep_V_0_state == 2'd3)) | ((stream_in_key_V_keep_V_0_state == 2'd1) & (stream_in_key_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_key_V_keep_V_0_state == 2'd2) & (stream_in_key_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_last_V_0_ack_out == 1'b1) & (stream_in_key_V_last_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_last_V_0_sel_rd <= ~stream_in_key_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_last_V_0_ack_in == 1'b1) & (stream_in_key_V_last_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_last_V_0_sel_wr <= ~stream_in_key_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_last_V_0_state == 2'd2) & (stream_in_key_V_last_V_0_vld_in == 1'b0)) | ((stream_in_key_V_last_V_0_state == 2'd3) & (stream_in_key_V_last_V_0_vld_in == 1'b0) & (stream_in_key_V_last_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_last_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_last_V_0_state == 2'd1) & (stream_in_key_V_last_V_0_ack_out == 1'b0)) | ((stream_in_key_V_last_V_0_state == 2'd3) & (stream_in_key_V_last_V_0_ack_out == 1'b0) & (stream_in_key_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_last_V_0_vld_in == 1'b0) & (stream_in_key_V_last_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_last_V_0_ack_out == 1'b0) & (stream_in_key_V_last_V_0_vld_in == 1'b1)) & (stream_in_key_V_last_V_0_state == 2'd3)) | ((stream_in_key_V_last_V_0_state == 2'd1) & (stream_in_key_V_last_V_0_ack_out == 1'b1)) | ((stream_in_key_V_last_V_0_state == 2'd2) & (stream_in_key_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_strb_V_0_ack_out == 1'b1) & (stream_in_key_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_strb_V_0_sel_rd <= ~stream_in_key_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_strb_V_0_ack_in == 1'b1) & (stream_in_key_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_strb_V_0_sel_wr <= ~stream_in_key_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_strb_V_0_state == 2'd2) & (stream_in_key_V_strb_V_0_vld_in == 1'b0)) | ((stream_in_key_V_strb_V_0_state == 2'd3) & (stream_in_key_V_strb_V_0_vld_in == 1'b0) & (stream_in_key_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_strb_V_0_state == 2'd1) & (stream_in_key_V_strb_V_0_ack_out == 1'b0)) | ((stream_in_key_V_strb_V_0_state == 2'd3) & (stream_in_key_V_strb_V_0_ack_out == 1'b0) & (stream_in_key_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_strb_V_0_vld_in == 1'b0) & (stream_in_key_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_strb_V_0_ack_out == 1'b0) & (stream_in_key_V_strb_V_0_vld_in == 1'b1)) & (stream_in_key_V_strb_V_0_state == 2'd3)) | ((stream_in_key_V_strb_V_0_state == 2'd1) & (stream_in_key_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_key_V_strb_V_0_state == 2'd2) & (stream_in_key_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_key_V_user_V_0_ack_out == 1'b1) & (stream_in_key_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_key_V_user_V_0_sel_rd <= ~stream_in_key_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_key_V_user_V_0_ack_in == 1'b1) & (stream_in_key_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_key_V_user_V_0_sel_wr <= ~stream_in_key_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_key_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_key_V_user_V_0_state == 2'd2) & (stream_in_key_V_user_V_0_vld_in == 1'b0)) | ((stream_in_key_V_user_V_0_state == 2'd3) & (stream_in_key_V_user_V_0_vld_in == 1'b0) & (stream_in_key_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_key_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_key_V_user_V_0_state == 2'd1) & (stream_in_key_V_user_V_0_ack_out == 1'b0)) | ((stream_in_key_V_user_V_0_state == 2'd3) & (stream_in_key_V_user_V_0_ack_out == 1'b0) & (stream_in_key_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_key_V_user_V_0_vld_in == 1'b0) & (stream_in_key_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_key_V_user_V_0_ack_out == 1'b0) & (stream_in_key_V_user_V_0_vld_in == 1'b1)) & (stream_in_key_V_user_V_0_state == 2'd3)) | ((stream_in_key_V_user_V_0_state == 2'd1) & (stream_in_key_V_user_V_0_ack_out == 1'b1)) | ((stream_in_key_V_user_V_0_state == 2'd2) & (stream_in_key_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_key_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_key_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_data_V_0_ack_out == 1'b1) & (stream_in_text_V_data_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_data_V_0_sel_rd <= ~stream_in_text_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_data_V_0_ack_in == 1'b1) & (stream_in_text_V_data_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_data_V_0_sel_wr <= ~stream_in_text_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_data_V_0_state == 2'd2) & (stream_in_text_V_data_V_0_vld_in == 1'b0)) | ((stream_in_text_V_data_V_0_state == 2'd3) & (stream_in_text_V_data_V_0_vld_in == 1'b0) & (stream_in_text_V_data_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_data_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_data_V_0_state == 2'd1) & (stream_in_text_V_data_V_0_ack_out == 1'b0)) | ((stream_in_text_V_data_V_0_state == 2'd3) & (stream_in_text_V_data_V_0_ack_out == 1'b0) & (stream_in_text_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_data_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_data_V_0_vld_in == 1'b0) & (stream_in_text_V_data_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_data_V_0_ack_out == 1'b0) & (stream_in_text_V_data_V_0_vld_in == 1'b1)) & (stream_in_text_V_data_V_0_state == 2'd3)) | ((stream_in_text_V_data_V_0_state == 2'd1) & (stream_in_text_V_data_V_0_ack_out == 1'b1)) | ((stream_in_text_V_data_V_0_state == 2'd2) & (stream_in_text_V_data_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_data_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_dest_V_0_ack_out == 1'b1) & (stream_in_text_V_dest_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_dest_V_0_sel_rd <= ~stream_in_text_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_dest_V_0_ack_in == 1'b1) & (stream_in_text_V_dest_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_dest_V_0_sel_wr <= ~stream_in_text_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_dest_V_0_state == 2'd2) & (stream_in_text_V_dest_V_0_vld_in == 1'b0)) | ((stream_in_text_V_dest_V_0_state == 2'd3) & (stream_in_text_V_dest_V_0_vld_in == 1'b0) & (stream_in_text_V_dest_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_dest_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_dest_V_0_state == 2'd1) & (stream_in_text_V_dest_V_0_ack_out == 1'b0)) | ((stream_in_text_V_dest_V_0_state == 2'd3) & (stream_in_text_V_dest_V_0_ack_out == 1'b0) & (stream_in_text_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_dest_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_dest_V_0_vld_in == 1'b0) & (stream_in_text_V_dest_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_dest_V_0_ack_out == 1'b0) & (stream_in_text_V_dest_V_0_vld_in == 1'b1)) & (stream_in_text_V_dest_V_0_state == 2'd3)) | ((stream_in_text_V_dest_V_0_state == 2'd1) & (stream_in_text_V_dest_V_0_ack_out == 1'b1)) | ((stream_in_text_V_dest_V_0_state == 2'd2) & (stream_in_text_V_dest_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_dest_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_id_V_0_ack_out == 1'b1) & (stream_in_text_V_id_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_id_V_0_sel_rd <= ~stream_in_text_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_id_V_0_ack_in == 1'b1) & (stream_in_text_V_id_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_id_V_0_sel_wr <= ~stream_in_text_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_id_V_0_state == 2'd2) & (stream_in_text_V_id_V_0_vld_in == 1'b0)) | ((stream_in_text_V_id_V_0_state == 2'd3) & (stream_in_text_V_id_V_0_vld_in == 1'b0) & (stream_in_text_V_id_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_id_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_id_V_0_state == 2'd1) & (stream_in_text_V_id_V_0_ack_out == 1'b0)) | ((stream_in_text_V_id_V_0_state == 2'd3) & (stream_in_text_V_id_V_0_ack_out == 1'b0) & (stream_in_text_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_id_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_id_V_0_vld_in == 1'b0) & (stream_in_text_V_id_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_id_V_0_ack_out == 1'b0) & (stream_in_text_V_id_V_0_vld_in == 1'b1)) & (stream_in_text_V_id_V_0_state == 2'd3)) | ((stream_in_text_V_id_V_0_state == 2'd1) & (stream_in_text_V_id_V_0_ack_out == 1'b1)) | ((stream_in_text_V_id_V_0_state == 2'd2) & (stream_in_text_V_id_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_id_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_keep_V_0_ack_out == 1'b1) & (stream_in_text_V_keep_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_keep_V_0_sel_rd <= ~stream_in_text_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_keep_V_0_ack_in == 1'b1) & (stream_in_text_V_keep_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_keep_V_0_sel_wr <= ~stream_in_text_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_keep_V_0_state == 2'd2) & (stream_in_text_V_keep_V_0_vld_in == 1'b0)) | ((stream_in_text_V_keep_V_0_state == 2'd3) & (stream_in_text_V_keep_V_0_vld_in == 1'b0) & (stream_in_text_V_keep_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_keep_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_keep_V_0_state == 2'd1) & (stream_in_text_V_keep_V_0_ack_out == 1'b0)) | ((stream_in_text_V_keep_V_0_state == 2'd3) & (stream_in_text_V_keep_V_0_ack_out == 1'b0) & (stream_in_text_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_keep_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_keep_V_0_vld_in == 1'b0) & (stream_in_text_V_keep_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_keep_V_0_ack_out == 1'b0) & (stream_in_text_V_keep_V_0_vld_in == 1'b1)) & (stream_in_text_V_keep_V_0_state == 2'd3)) | ((stream_in_text_V_keep_V_0_state == 2'd1) & (stream_in_text_V_keep_V_0_ack_out == 1'b1)) | ((stream_in_text_V_keep_V_0_state == 2'd2) & (stream_in_text_V_keep_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_keep_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_last_V_0_ack_out == 1'b1) & (stream_in_text_V_last_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_last_V_0_sel_rd <= ~stream_in_text_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_last_V_0_ack_in == 1'b1) & (stream_in_text_V_last_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_last_V_0_sel_wr <= ~stream_in_text_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_last_V_0_state == 2'd2) & (stream_in_text_V_last_V_0_vld_in == 1'b0)) | ((stream_in_text_V_last_V_0_state == 2'd3) & (stream_in_text_V_last_V_0_vld_in == 1'b0) & (stream_in_text_V_last_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_last_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_last_V_0_state == 2'd1) & (stream_in_text_V_last_V_0_ack_out == 1'b0)) | ((stream_in_text_V_last_V_0_state == 2'd3) & (stream_in_text_V_last_V_0_ack_out == 1'b0) & (stream_in_text_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_last_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_last_V_0_vld_in == 1'b0) & (stream_in_text_V_last_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_last_V_0_ack_out == 1'b0) & (stream_in_text_V_last_V_0_vld_in == 1'b1)) & (stream_in_text_V_last_V_0_state == 2'd3)) | ((stream_in_text_V_last_V_0_state == 2'd1) & (stream_in_text_V_last_V_0_ack_out == 1'b1)) | ((stream_in_text_V_last_V_0_state == 2'd2) & (stream_in_text_V_last_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_last_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_strb_V_0_ack_out == 1'b1) & (stream_in_text_V_strb_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_strb_V_0_sel_rd <= ~stream_in_text_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_strb_V_0_ack_in == 1'b1) & (stream_in_text_V_strb_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_strb_V_0_sel_wr <= ~stream_in_text_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_strb_V_0_state == 2'd2) & (stream_in_text_V_strb_V_0_vld_in == 1'b0)) | ((stream_in_text_V_strb_V_0_state == 2'd3) & (stream_in_text_V_strb_V_0_vld_in == 1'b0) & (stream_in_text_V_strb_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_strb_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_strb_V_0_state == 2'd1) & (stream_in_text_V_strb_V_0_ack_out == 1'b0)) | ((stream_in_text_V_strb_V_0_state == 2'd3) & (stream_in_text_V_strb_V_0_ack_out == 1'b0) & (stream_in_text_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_strb_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_strb_V_0_vld_in == 1'b0) & (stream_in_text_V_strb_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_strb_V_0_ack_out == 1'b0) & (stream_in_text_V_strb_V_0_vld_in == 1'b1)) & (stream_in_text_V_strb_V_0_state == 2'd3)) | ((stream_in_text_V_strb_V_0_state == 2'd1) & (stream_in_text_V_strb_V_0_ack_out == 1'b1)) | ((stream_in_text_V_strb_V_0_state == 2'd2) & (stream_in_text_V_strb_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_strb_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((stream_in_text_V_user_V_0_ack_out == 1'b1) & (stream_in_text_V_user_V_0_vld_out == 1'b1))) begin
            stream_in_text_V_user_V_0_sel_rd <= ~stream_in_text_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((stream_in_text_V_user_V_0_ack_in == 1'b1) & (stream_in_text_V_user_V_0_vld_in == 1'b1))) begin
            stream_in_text_V_user_V_0_sel_wr <= ~stream_in_text_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_in_text_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((stream_in_text_V_user_V_0_state == 2'd2) & (stream_in_text_V_user_V_0_vld_in == 1'b0)) | ((stream_in_text_V_user_V_0_state == 2'd3) & (stream_in_text_V_user_V_0_vld_in == 1'b0) & (stream_in_text_V_user_V_0_ack_out == 1'b1)))) begin
            stream_in_text_V_user_V_0_state <= 2'd2;
        end else if ((((stream_in_text_V_user_V_0_state == 2'd1) & (stream_in_text_V_user_V_0_ack_out == 1'b0)) | ((stream_in_text_V_user_V_0_state == 2'd3) & (stream_in_text_V_user_V_0_ack_out == 1'b0) & (stream_in_text_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_user_V_0_state <= 2'd1;
        end else if (((~((stream_in_text_V_user_V_0_vld_in == 1'b0) & (stream_in_text_V_user_V_0_ack_out == 1'b1)) & ~((stream_in_text_V_user_V_0_ack_out == 1'b0) & (stream_in_text_V_user_V_0_vld_in == 1'b1)) & (stream_in_text_V_user_V_0_state == 2'd3)) | ((stream_in_text_V_user_V_0_state == 2'd1) & (stream_in_text_V_user_V_0_ack_out == 1'b1)) | ((stream_in_text_V_user_V_0_state == 2'd2) & (stream_in_text_V_user_V_0_vld_in == 1'b1)))) begin
            stream_in_text_V_user_V_0_state <= 2'd3;
        end else begin
            stream_in_text_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_out == 1'b1) & (stream_out_V_data_V_1_vld_out == 1'b1))) begin
            stream_out_V_data_V_1_sel_rd <= ~stream_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_data_V_1_ack_in == 1'b1) & (stream_out_V_data_V_1_vld_in == 1'b1))) begin
            stream_out_V_data_V_1_sel_wr <= ~stream_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd2;
        end else if ((((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b0)) | ((stream_out_V_data_V_1_state == 2'd3) & (stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_data_V_1_vld_in == 1'b0) & (stream_out_V_data_V_1_ack_out == 1'b1)) & ~((stream_out_V_data_V_1_ack_out == 1'b0) & (stream_out_V_data_V_1_vld_in == 1'b1)) & (stream_out_V_data_V_1_state == 2'd3)) | ((stream_out_V_data_V_1_state == 2'd1) & (stream_out_V_data_V_1_ack_out == 1'b1)) | ((stream_out_V_data_V_1_state == 2'd2) & (stream_out_V_data_V_1_vld_in == 1'b1)))) begin
            stream_out_V_data_V_1_state <= 2'd3;
        end else begin
            stream_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_out == 1'b1) & (stream_out_V_dest_V_1_vld_out == 1'b1))) begin
            stream_out_V_dest_V_1_sel_rd <= ~stream_out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_dest_V_1_ack_in == 1'b1) & (stream_out_V_dest_V_1_vld_in == 1'b1))) begin
            stream_out_V_dest_V_1_sel_wr <= ~stream_out_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end else if ((((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b0)) | ((stream_out_V_dest_V_1_state == 2'd3) & (stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_dest_V_1_vld_in == 1'b0) & (stream_out_V_dest_V_1_ack_out == 1'b1)) & ~((stream_out_V_dest_V_1_ack_out == 1'b0) & (stream_out_V_dest_V_1_vld_in == 1'b1)) & (stream_out_V_dest_V_1_state == 2'd3)) | ((stream_out_V_dest_V_1_state == 2'd1) & (stream_out_V_dest_V_1_ack_out == 1'b1)) | ((stream_out_V_dest_V_1_state == 2'd2) & (stream_out_V_dest_V_1_vld_in == 1'b1)))) begin
            stream_out_V_dest_V_1_state <= 2'd3;
        end else begin
            stream_out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_out == 1'b1) & (stream_out_V_id_V_1_vld_out == 1'b1))) begin
            stream_out_V_id_V_1_sel_rd <= ~stream_out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_id_V_1_ack_in == 1'b1) & (stream_out_V_id_V_1_vld_in == 1'b1))) begin
            stream_out_V_id_V_1_sel_wr <= ~stream_out_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd2;
        end else if ((((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b0)) | ((stream_out_V_id_V_1_state == 2'd3) & (stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_id_V_1_vld_in == 1'b0) & (stream_out_V_id_V_1_ack_out == 1'b1)) & ~((stream_out_V_id_V_1_ack_out == 1'b0) & (stream_out_V_id_V_1_vld_in == 1'b1)) & (stream_out_V_id_V_1_state == 2'd3)) | ((stream_out_V_id_V_1_state == 2'd1) & (stream_out_V_id_V_1_ack_out == 1'b1)) | ((stream_out_V_id_V_1_state == 2'd2) & (stream_out_V_id_V_1_vld_in == 1'b1)))) begin
            stream_out_V_id_V_1_state <= 2'd3;
        end else begin
            stream_out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_out == 1'b1) & (stream_out_V_keep_V_1_vld_out == 1'b1))) begin
            stream_out_V_keep_V_1_sel_rd <= ~stream_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_keep_V_1_ack_in == 1'b1) & (stream_out_V_keep_V_1_vld_in == 1'b1))) begin
            stream_out_V_keep_V_1_sel_wr <= ~stream_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end else if ((((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b0)) | ((stream_out_V_keep_V_1_state == 2'd3) & (stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_keep_V_1_vld_in == 1'b0) & (stream_out_V_keep_V_1_ack_out == 1'b1)) & ~((stream_out_V_keep_V_1_ack_out == 1'b0) & (stream_out_V_keep_V_1_vld_in == 1'b1)) & (stream_out_V_keep_V_1_state == 2'd3)) | ((stream_out_V_keep_V_1_state == 2'd1) & (stream_out_V_keep_V_1_ack_out == 1'b1)) | ((stream_out_V_keep_V_1_state == 2'd2) & (stream_out_V_keep_V_1_vld_in == 1'b1)))) begin
            stream_out_V_keep_V_1_state <= 2'd3;
        end else begin
            stream_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_out == 1'b1) & (stream_out_V_last_V_1_vld_out == 1'b1))) begin
            stream_out_V_last_V_1_sel_rd <= ~stream_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_last_V_1_ack_in == 1'b1) & (stream_out_V_last_V_1_vld_in == 1'b1))) begin
            stream_out_V_last_V_1_sel_wr <= ~stream_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd2;
        end else if ((((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b0)) | ((stream_out_V_last_V_1_state == 2'd3) & (stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_last_V_1_vld_in == 1'b0) & (stream_out_V_last_V_1_ack_out == 1'b1)) & ~((stream_out_V_last_V_1_ack_out == 1'b0) & (stream_out_V_last_V_1_vld_in == 1'b1)) & (stream_out_V_last_V_1_state == 2'd3)) | ((stream_out_V_last_V_1_state == 2'd1) & (stream_out_V_last_V_1_ack_out == 1'b1)) | ((stream_out_V_last_V_1_state == 2'd2) & (stream_out_V_last_V_1_vld_in == 1'b1)))) begin
            stream_out_V_last_V_1_state <= 2'd3;
        end else begin
            stream_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_out == 1'b1) & (stream_out_V_strb_V_1_vld_out == 1'b1))) begin
            stream_out_V_strb_V_1_sel_rd <= ~stream_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_strb_V_1_ack_in == 1'b1) & (stream_out_V_strb_V_1_vld_in == 1'b1))) begin
            stream_out_V_strb_V_1_sel_wr <= ~stream_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end else if ((((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b0)) | ((stream_out_V_strb_V_1_state == 2'd3) & (stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_strb_V_1_vld_in == 1'b0) & (stream_out_V_strb_V_1_ack_out == 1'b1)) & ~((stream_out_V_strb_V_1_ack_out == 1'b0) & (stream_out_V_strb_V_1_vld_in == 1'b1)) & (stream_out_V_strb_V_1_state == 2'd3)) | ((stream_out_V_strb_V_1_state == 2'd1) & (stream_out_V_strb_V_1_ack_out == 1'b1)) | ((stream_out_V_strb_V_1_state == 2'd2) & (stream_out_V_strb_V_1_vld_in == 1'b1)))) begin
            stream_out_V_strb_V_1_state <= 2'd3;
        end else begin
            stream_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_out == 1'b1) & (stream_out_V_user_V_1_vld_out == 1'b1))) begin
            stream_out_V_user_V_1_sel_rd <= ~stream_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((stream_out_V_user_V_1_ack_in == 1'b1) & (stream_out_V_user_V_1_vld_in == 1'b1))) begin
            stream_out_V_user_V_1_sel_wr <= ~stream_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stream_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd2;
        end else if ((((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b0)) | ((stream_out_V_user_V_1_state == 2'd3) & (stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd1;
        end else if (((~((stream_out_V_user_V_1_vld_in == 1'b0) & (stream_out_V_user_V_1_ack_out == 1'b1)) & ~((stream_out_V_user_V_1_ack_out == 1'b0) & (stream_out_V_user_V_1_vld_in == 1'b1)) & (stream_out_V_user_V_1_state == 2'd3)) | ((stream_out_V_user_V_1_state == 2'd1) & (stream_out_V_user_V_1_ack_out == 1'b1)) | ((stream_out_V_user_V_1_state == 2'd2) & (stream_out_V_user_V_1_vld_in == 1'b1)))) begin
            stream_out_V_user_V_1_state <= 2'd3;
        end else begin
            stream_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i6_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_i1_reg_130 <= i_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_i1_reg_130 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i2_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_152 <= 3'd0;
    end else if (((exitcond_i_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_i_reg_152 <= i_1_reg_369;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i2_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_i5_reg_141 <= 3'd0;
    end else if (((exitcond_i6_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i5_reg_141 <= j_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_i_reg_163 <= 3'd0;
    end else if (((exitcond_i_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_i_reg_163 <= j_1_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_369 <= i_1_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_348 <= i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_data_V_0_load_A == 1'b1)) begin
        stream_in_key_V_data_V_0_payload_A <= stream_in_key_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_data_V_0_load_B == 1'b1)) begin
        stream_in_key_V_data_V_0_payload_B <= stream_in_key_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_key_V_dest_V_0_payload_A <= stream_in_key_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_key_V_dest_V_0_payload_B <= stream_in_key_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_id_V_0_load_A == 1'b1)) begin
        stream_in_key_V_id_V_0_payload_A <= stream_in_key_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_id_V_0_load_B == 1'b1)) begin
        stream_in_key_V_id_V_0_payload_B <= stream_in_key_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_key_V_keep_V_0_payload_A <= stream_in_key_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_key_V_keep_V_0_payload_B <= stream_in_key_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_last_V_0_load_A == 1'b1)) begin
        stream_in_key_V_last_V_0_payload_A <= stream_in_key_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_last_V_0_load_B == 1'b1)) begin
        stream_in_key_V_last_V_0_payload_B <= stream_in_key_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_key_V_strb_V_0_payload_A <= stream_in_key_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_key_V_strb_V_0_payload_B <= stream_in_key_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_user_V_0_load_A == 1'b1)) begin
        stream_in_key_V_user_V_0_payload_A <= stream_in_key_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_key_V_user_V_0_load_B == 1'b1)) begin
        stream_in_key_V_user_V_0_payload_B <= stream_in_key_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_data_V_0_load_A == 1'b1)) begin
        stream_in_text_V_data_V_0_payload_A <= stream_in_text_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_data_V_0_load_B == 1'b1)) begin
        stream_in_text_V_data_V_0_payload_B <= stream_in_text_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_dest_V_0_load_A == 1'b1)) begin
        stream_in_text_V_dest_V_0_payload_A <= stream_in_text_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_dest_V_0_load_B == 1'b1)) begin
        stream_in_text_V_dest_V_0_payload_B <= stream_in_text_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_id_V_0_load_A == 1'b1)) begin
        stream_in_text_V_id_V_0_payload_A <= stream_in_text_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_id_V_0_load_B == 1'b1)) begin
        stream_in_text_V_id_V_0_payload_B <= stream_in_text_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_keep_V_0_load_A == 1'b1)) begin
        stream_in_text_V_keep_V_0_payload_A <= stream_in_text_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_keep_V_0_load_B == 1'b1)) begin
        stream_in_text_V_keep_V_0_payload_B <= stream_in_text_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_last_V_0_load_A == 1'b1)) begin
        stream_in_text_V_last_V_0_payload_A <= stream_in_text_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_last_V_0_load_B == 1'b1)) begin
        stream_in_text_V_last_V_0_payload_B <= stream_in_text_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_strb_V_0_load_A == 1'b1)) begin
        stream_in_text_V_strb_V_0_payload_A <= stream_in_text_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_strb_V_0_load_B == 1'b1)) begin
        stream_in_text_V_strb_V_0_payload_B <= stream_in_text_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_user_V_0_load_A == 1'b1)) begin
        stream_in_text_V_user_V_0_payload_A <= stream_in_text_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_in_text_V_user_V_0_load_B == 1'b1)) begin
        stream_in_text_V_user_V_0_payload_B <= stream_in_text_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_A == 1'b1)) begin
        stream_out_V_data_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_data_V_1_load_B == 1'b1)) begin
        stream_out_V_data_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_A == 1'b1)) begin
        stream_out_V_dest_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_dest_V_1_load_B == 1'b1)) begin
        stream_out_V_dest_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_A == 1'b1)) begin
        stream_out_V_id_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_id_V_1_load_B == 1'b1)) begin
        stream_out_V_id_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_A == 1'b1)) begin
        stream_out_V_keep_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_keep_V_1_load_B == 1'b1)) begin
        stream_out_V_keep_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_A == 1'b1)) begin
        stream_out_V_last_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_last_V_1_load_B == 1'b1)) begin
        stream_out_V_last_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_A == 1'b1)) begin
        stream_out_V_strb_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_strb_V_1_load_B == 1'b1)) begin
        stream_out_V_strb_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_A == 1'b1)) begin
        stream_out_V_user_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((stream_out_V_user_V_1_load_B == 1'b1)) begin
        stream_out_V_user_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i2_fu_245_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_60_cast_reg_353[4 : 2] <= tmp_60_cast_fu_265_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_62_cast_reg_374[4 : 2] <= tmp_62_cast_fu_315_p1[4 : 2];
    end
end

always @ (*) begin
    if ((~((stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrixKey_data_V_address0 = tmp_64_cast_fu_340_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_address0 = grp_axi2matrix_fu_226_state_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixKey_data_V_address0 = grp_aesEncrypt_fu_174_masterKey_data_V_address0;
    end else begin
        matrixKey_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrixKey_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_ce0 = grp_axi2matrix_fu_226_state_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixKey_data_V_ce0 = grp_aesEncrypt_fu_174_masterKey_data_V_ce0;
    end else begin
        matrixKey_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_ce1 = grp_axi2matrix_fu_226_state_data_V_ce1;
    end else begin
        matrixKey_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        matrixKey_data_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_d0 = grp_axi2matrix_fu_226_state_data_V_d0;
    end else begin
        matrixKey_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        matrixKey_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_we0 = grp_axi2matrix_fu_226_state_data_V_we0;
    end else begin
        matrixKey_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixKey_data_V_we1 = grp_axi2matrix_fu_226_state_data_V_we1;
    end else begin
        matrixKey_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        matrixText_data_V_address0 = tmp_63_cast_fu_290_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_address0 = grp_axi2matrix_fu_207_state_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        matrixText_data_V_address0 = grp_matrix2axi_fu_188_state_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_address0 = grp_aesEncrypt_fu_174_state_data_V_address0;
    end else begin
        matrixText_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_address1 = grp_axi2matrix_fu_207_state_data_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        matrixText_data_V_address1 = grp_matrix2axi_fu_188_state_data_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_address1 = grp_aesEncrypt_fu_174_state_data_V_address1;
    end else begin
        matrixText_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        matrixText_data_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_ce0 = grp_axi2matrix_fu_207_state_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        matrixText_data_V_ce0 = grp_matrix2axi_fu_188_state_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_ce0 = grp_aesEncrypt_fu_174_state_data_V_ce0;
    end else begin
        matrixText_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_ce1 = grp_axi2matrix_fu_207_state_data_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        matrixText_data_V_ce1 = grp_matrix2axi_fu_188_state_data_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_ce1 = grp_aesEncrypt_fu_174_state_data_V_ce1;
    end else begin
        matrixText_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        matrixText_data_V_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_d0 = grp_axi2matrix_fu_207_state_data_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_d0 = grp_aesEncrypt_fu_174_state_data_V_d0;
    end else begin
        matrixText_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_d1 = grp_axi2matrix_fu_207_state_data_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_d1 = grp_aesEncrypt_fu_174_state_data_V_d1;
    end else begin
        matrixText_data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond_i6_fu_269_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        matrixText_data_V_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_we0 = grp_axi2matrix_fu_207_state_data_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_we0 = grp_aesEncrypt_fu_174_state_data_V_we0;
    end else begin
        matrixText_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        matrixText_data_V_we1 = grp_axi2matrix_fu_207_state_data_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        matrixText_data_V_we1 = grp_aesEncrypt_fu_174_state_data_V_we1;
    end else begin
        matrixText_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_data_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_data_V_0_sel == 1'b1)) begin
        stream_in_key_V_data_V_0_data_out = stream_in_key_V_data_V_0_payload_B;
    end else begin
        stream_in_key_V_data_V_0_data_out = stream_in_key_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_dest_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_dest_V_0_sel == 1'b1)) begin
        stream_in_key_V_dest_V_0_data_out = stream_in_key_V_dest_V_0_payload_B;
    end else begin
        stream_in_key_V_dest_V_0_data_out = stream_in_key_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_id_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_id_V_0_sel == 1'b1)) begin
        stream_in_key_V_id_V_0_data_out = stream_in_key_V_id_V_0_payload_B;
    end else begin
        stream_in_key_V_id_V_0_data_out = stream_in_key_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_keep_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_keep_V_0_sel == 1'b1)) begin
        stream_in_key_V_keep_V_0_data_out = stream_in_key_V_keep_V_0_payload_B;
    end else begin
        stream_in_key_V_keep_V_0_data_out = stream_in_key_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_last_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_last_V_0_sel == 1'b1)) begin
        stream_in_key_V_last_V_0_data_out = stream_in_key_V_last_V_0_payload_B;
    end else begin
        stream_in_key_V_last_V_0_data_out = stream_in_key_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_strb_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_strb_V_0_sel == 1'b1)) begin
        stream_in_key_V_strb_V_0_data_out = stream_in_key_V_strb_V_0_payload_B;
    end else begin
        stream_in_key_V_strb_V_0_data_out = stream_in_key_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_key_V_user_V_0_ack_out = grp_axi2matrix_fu_226_stream_in_key_TREADY;
    end else begin
        stream_in_key_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_key_V_user_V_0_sel == 1'b1)) begin
        stream_in_key_V_user_V_0_data_out = stream_in_key_V_user_V_0_payload_B;
    end else begin
        stream_in_key_V_user_V_0_data_out = stream_in_key_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_data_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_data_V_0_sel == 1'b1)) begin
        stream_in_text_V_data_V_0_data_out = stream_in_text_V_data_V_0_payload_B;
    end else begin
        stream_in_text_V_data_V_0_data_out = stream_in_text_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_dest_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_dest_V_0_sel == 1'b1)) begin
        stream_in_text_V_dest_V_0_data_out = stream_in_text_V_dest_V_0_payload_B;
    end else begin
        stream_in_text_V_dest_V_0_data_out = stream_in_text_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_id_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_id_V_0_sel == 1'b1)) begin
        stream_in_text_V_id_V_0_data_out = stream_in_text_V_id_V_0_payload_B;
    end else begin
        stream_in_text_V_id_V_0_data_out = stream_in_text_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_keep_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_keep_V_0_sel == 1'b1)) begin
        stream_in_text_V_keep_V_0_data_out = stream_in_text_V_keep_V_0_payload_B;
    end else begin
        stream_in_text_V_keep_V_0_data_out = stream_in_text_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_last_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_last_V_0_sel == 1'b1)) begin
        stream_in_text_V_last_V_0_data_out = stream_in_text_V_last_V_0_payload_B;
    end else begin
        stream_in_text_V_last_V_0_data_out = stream_in_text_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_strb_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_strb_V_0_sel == 1'b1)) begin
        stream_in_text_V_strb_V_0_data_out = stream_in_text_V_strb_V_0_payload_B;
    end else begin
        stream_in_text_V_strb_V_0_data_out = stream_in_text_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        stream_in_text_V_user_V_0_ack_out = grp_axi2matrix_fu_207_stream_in_key_TREADY;
    end else begin
        stream_in_text_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((stream_in_text_V_user_V_0_sel == 1'b1)) begin
        stream_in_text_V_user_V_0_data_out = stream_in_text_V_user_V_0_payload_B;
    end else begin
        stream_in_text_V_user_V_0_data_out = stream_in_text_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_data_V_1_sel == 1'b1)) begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_B;
    end else begin
        stream_out_V_data_V_1_data_out = stream_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_dest_V_1_sel == 1'b1)) begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_B;
    end else begin
        stream_out_V_dest_V_1_data_out = stream_out_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_id_V_1_sel == 1'b1)) begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_B;
    end else begin
        stream_out_V_id_V_1_data_out = stream_out_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_keep_V_1_sel == 1'b1)) begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_B;
    end else begin
        stream_out_V_keep_V_1_data_out = stream_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_last_V_1_sel == 1'b1)) begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_B;
    end else begin
        stream_out_V_last_V_1_data_out = stream_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_strb_V_1_sel == 1'b1)) begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_B;
    end else begin
        stream_out_V_strb_V_1_data_out = stream_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((stream_out_V_user_V_1_sel == 1'b1)) begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_B;
    end else begin
        stream_out_V_user_V_1_data_out = stream_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond11_i2_fu_245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_i6_fu_269_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond11_i_fu_295_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond_i_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_block_state6_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_aesEncrypt_fu_174_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_matrix2axi_fu_188_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((stream_out_V_strb_V_1_ack_in == 1'b0) | (stream_out_V_keep_V_1_ack_in == 1'b0) | (stream_out_V_data_V_1_ack_in == 1'b0) | (stream_out_V_dest_V_1_ack_in == 1'b0) | (stream_out_V_id_V_1_ack_in == 1'b0) | (stream_out_V_last_V_1_ack_in == 1'b0) | (stream_out_V_user_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state6_on_subcall_done = ((grp_axi2matrix_fu_226_ap_done == 1'b0) | (grp_axi2matrix_fu_207_ap_done == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond11_i2_fu_245_p2 = ((i_0_i1_reg_130 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond11_i_fu_295_p2 = ((i_0_i_reg_152 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i6_fu_269_p2 = ((j_0_i5_reg_141 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_319_p2 = ((j_0_i_reg_163 == 3'd4) ? 1'b1 : 1'b0);

assign grp_aesEncrypt_fu_174_ap_start = grp_aesEncrypt_fu_174_ap_start_reg;

assign grp_axi2matrix_fu_207_ap_start = grp_axi2matrix_fu_207_ap_start_reg;

assign grp_axi2matrix_fu_207_stream_in_key_TVALID = stream_in_text_V_dest_V_0_state[1'd0];

assign grp_axi2matrix_fu_226_ap_start = grp_axi2matrix_fu_226_ap_start_reg;

assign grp_axi2matrix_fu_226_stream_in_key_TVALID = stream_in_key_V_dest_V_0_state[1'd0];

assign grp_matrix2axi_fu_188_ap_start = grp_matrix2axi_fu_188_ap_start_reg;

assign grp_matrix2axi_fu_188_stream_out_TREADY = stream_out_V_dest_V_1_state[1'd1];

assign i_1_fu_301_p2 = (i_0_i_reg_152 + 3'd1);

assign i_fu_251_p2 = (i_0_i1_reg_130 + 3'd1);

assign j_1_fu_325_p2 = (j_0_i_reg_163 + 3'd1);

assign j_fu_275_p2 = (j_0_i5_reg_141 + 3'd1);

assign stream_in_key_TREADY = stream_in_key_V_dest_V_0_state[1'd1];

assign stream_in_key_V_data_V_0_ack_in = stream_in_key_V_data_V_0_state[1'd1];

assign stream_in_key_V_data_V_0_load_A = (stream_in_key_V_data_V_0_state_cmp_full & ~stream_in_key_V_data_V_0_sel_wr);

assign stream_in_key_V_data_V_0_load_B = (stream_in_key_V_data_V_0_state_cmp_full & stream_in_key_V_data_V_0_sel_wr);

assign stream_in_key_V_data_V_0_sel = stream_in_key_V_data_V_0_sel_rd;

assign stream_in_key_V_data_V_0_state_cmp_full = ((stream_in_key_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_data_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_data_V_0_vld_out = stream_in_key_V_data_V_0_state[1'd0];

assign stream_in_key_V_dest_V_0_ack_in = stream_in_key_V_dest_V_0_state[1'd1];

assign stream_in_key_V_dest_V_0_load_A = (stream_in_key_V_dest_V_0_state_cmp_full & ~stream_in_key_V_dest_V_0_sel_wr);

assign stream_in_key_V_dest_V_0_load_B = (stream_in_key_V_dest_V_0_state_cmp_full & stream_in_key_V_dest_V_0_sel_wr);

assign stream_in_key_V_dest_V_0_sel = stream_in_key_V_dest_V_0_sel_rd;

assign stream_in_key_V_dest_V_0_state_cmp_full = ((stream_in_key_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_dest_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_dest_V_0_vld_out = stream_in_key_V_dest_V_0_state[1'd0];

assign stream_in_key_V_id_V_0_ack_in = stream_in_key_V_id_V_0_state[1'd1];

assign stream_in_key_V_id_V_0_load_A = (stream_in_key_V_id_V_0_state_cmp_full & ~stream_in_key_V_id_V_0_sel_wr);

assign stream_in_key_V_id_V_0_load_B = (stream_in_key_V_id_V_0_state_cmp_full & stream_in_key_V_id_V_0_sel_wr);

assign stream_in_key_V_id_V_0_sel = stream_in_key_V_id_V_0_sel_rd;

assign stream_in_key_V_id_V_0_state_cmp_full = ((stream_in_key_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_id_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_id_V_0_vld_out = stream_in_key_V_id_V_0_state[1'd0];

assign stream_in_key_V_keep_V_0_ack_in = stream_in_key_V_keep_V_0_state[1'd1];

assign stream_in_key_V_keep_V_0_load_A = (stream_in_key_V_keep_V_0_state_cmp_full & ~stream_in_key_V_keep_V_0_sel_wr);

assign stream_in_key_V_keep_V_0_load_B = (stream_in_key_V_keep_V_0_state_cmp_full & stream_in_key_V_keep_V_0_sel_wr);

assign stream_in_key_V_keep_V_0_sel = stream_in_key_V_keep_V_0_sel_rd;

assign stream_in_key_V_keep_V_0_state_cmp_full = ((stream_in_key_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_keep_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_keep_V_0_vld_out = stream_in_key_V_keep_V_0_state[1'd0];

assign stream_in_key_V_last_V_0_ack_in = stream_in_key_V_last_V_0_state[1'd1];

assign stream_in_key_V_last_V_0_load_A = (stream_in_key_V_last_V_0_state_cmp_full & ~stream_in_key_V_last_V_0_sel_wr);

assign stream_in_key_V_last_V_0_load_B = (stream_in_key_V_last_V_0_state_cmp_full & stream_in_key_V_last_V_0_sel_wr);

assign stream_in_key_V_last_V_0_sel = stream_in_key_V_last_V_0_sel_rd;

assign stream_in_key_V_last_V_0_state_cmp_full = ((stream_in_key_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_last_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_last_V_0_vld_out = stream_in_key_V_last_V_0_state[1'd0];

assign stream_in_key_V_strb_V_0_ack_in = stream_in_key_V_strb_V_0_state[1'd1];

assign stream_in_key_V_strb_V_0_load_A = (stream_in_key_V_strb_V_0_state_cmp_full & ~stream_in_key_V_strb_V_0_sel_wr);

assign stream_in_key_V_strb_V_0_load_B = (stream_in_key_V_strb_V_0_state_cmp_full & stream_in_key_V_strb_V_0_sel_wr);

assign stream_in_key_V_strb_V_0_sel = stream_in_key_V_strb_V_0_sel_rd;

assign stream_in_key_V_strb_V_0_state_cmp_full = ((stream_in_key_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_strb_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_strb_V_0_vld_out = stream_in_key_V_strb_V_0_state[1'd0];

assign stream_in_key_V_user_V_0_ack_in = stream_in_key_V_user_V_0_state[1'd1];

assign stream_in_key_V_user_V_0_load_A = (stream_in_key_V_user_V_0_state_cmp_full & ~stream_in_key_V_user_V_0_sel_wr);

assign stream_in_key_V_user_V_0_load_B = (stream_in_key_V_user_V_0_state_cmp_full & stream_in_key_V_user_V_0_sel_wr);

assign stream_in_key_V_user_V_0_sel = stream_in_key_V_user_V_0_sel_rd;

assign stream_in_key_V_user_V_0_state_cmp_full = ((stream_in_key_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_key_V_user_V_0_vld_in = stream_in_key_TVALID;

assign stream_in_key_V_user_V_0_vld_out = stream_in_key_V_user_V_0_state[1'd0];

assign stream_in_text_TREADY = stream_in_text_V_dest_V_0_state[1'd1];

assign stream_in_text_V_data_V_0_ack_in = stream_in_text_V_data_V_0_state[1'd1];

assign stream_in_text_V_data_V_0_load_A = (stream_in_text_V_data_V_0_state_cmp_full & ~stream_in_text_V_data_V_0_sel_wr);

assign stream_in_text_V_data_V_0_load_B = (stream_in_text_V_data_V_0_state_cmp_full & stream_in_text_V_data_V_0_sel_wr);

assign stream_in_text_V_data_V_0_sel = stream_in_text_V_data_V_0_sel_rd;

assign stream_in_text_V_data_V_0_state_cmp_full = ((stream_in_text_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_data_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_data_V_0_vld_out = stream_in_text_V_data_V_0_state[1'd0];

assign stream_in_text_V_dest_V_0_ack_in = stream_in_text_V_dest_V_0_state[1'd1];

assign stream_in_text_V_dest_V_0_load_A = (stream_in_text_V_dest_V_0_state_cmp_full & ~stream_in_text_V_dest_V_0_sel_wr);

assign stream_in_text_V_dest_V_0_load_B = (stream_in_text_V_dest_V_0_state_cmp_full & stream_in_text_V_dest_V_0_sel_wr);

assign stream_in_text_V_dest_V_0_sel = stream_in_text_V_dest_V_0_sel_rd;

assign stream_in_text_V_dest_V_0_state_cmp_full = ((stream_in_text_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_dest_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_dest_V_0_vld_out = stream_in_text_V_dest_V_0_state[1'd0];

assign stream_in_text_V_id_V_0_ack_in = stream_in_text_V_id_V_0_state[1'd1];

assign stream_in_text_V_id_V_0_load_A = (stream_in_text_V_id_V_0_state_cmp_full & ~stream_in_text_V_id_V_0_sel_wr);

assign stream_in_text_V_id_V_0_load_B = (stream_in_text_V_id_V_0_state_cmp_full & stream_in_text_V_id_V_0_sel_wr);

assign stream_in_text_V_id_V_0_sel = stream_in_text_V_id_V_0_sel_rd;

assign stream_in_text_V_id_V_0_state_cmp_full = ((stream_in_text_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_id_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_id_V_0_vld_out = stream_in_text_V_id_V_0_state[1'd0];

assign stream_in_text_V_keep_V_0_ack_in = stream_in_text_V_keep_V_0_state[1'd1];

assign stream_in_text_V_keep_V_0_load_A = (stream_in_text_V_keep_V_0_state_cmp_full & ~stream_in_text_V_keep_V_0_sel_wr);

assign stream_in_text_V_keep_V_0_load_B = (stream_in_text_V_keep_V_0_state_cmp_full & stream_in_text_V_keep_V_0_sel_wr);

assign stream_in_text_V_keep_V_0_sel = stream_in_text_V_keep_V_0_sel_rd;

assign stream_in_text_V_keep_V_0_state_cmp_full = ((stream_in_text_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_keep_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_keep_V_0_vld_out = stream_in_text_V_keep_V_0_state[1'd0];

assign stream_in_text_V_last_V_0_ack_in = stream_in_text_V_last_V_0_state[1'd1];

assign stream_in_text_V_last_V_0_load_A = (stream_in_text_V_last_V_0_state_cmp_full & ~stream_in_text_V_last_V_0_sel_wr);

assign stream_in_text_V_last_V_0_load_B = (stream_in_text_V_last_V_0_state_cmp_full & stream_in_text_V_last_V_0_sel_wr);

assign stream_in_text_V_last_V_0_sel = stream_in_text_V_last_V_0_sel_rd;

assign stream_in_text_V_last_V_0_state_cmp_full = ((stream_in_text_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_last_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_last_V_0_vld_out = stream_in_text_V_last_V_0_state[1'd0];

assign stream_in_text_V_strb_V_0_ack_in = stream_in_text_V_strb_V_0_state[1'd1];

assign stream_in_text_V_strb_V_0_load_A = (stream_in_text_V_strb_V_0_state_cmp_full & ~stream_in_text_V_strb_V_0_sel_wr);

assign stream_in_text_V_strb_V_0_load_B = (stream_in_text_V_strb_V_0_state_cmp_full & stream_in_text_V_strb_V_0_sel_wr);

assign stream_in_text_V_strb_V_0_sel = stream_in_text_V_strb_V_0_sel_rd;

assign stream_in_text_V_strb_V_0_state_cmp_full = ((stream_in_text_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_strb_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_strb_V_0_vld_out = stream_in_text_V_strb_V_0_state[1'd0];

assign stream_in_text_V_user_V_0_ack_in = stream_in_text_V_user_V_0_state[1'd1];

assign stream_in_text_V_user_V_0_load_A = (stream_in_text_V_user_V_0_state_cmp_full & ~stream_in_text_V_user_V_0_sel_wr);

assign stream_in_text_V_user_V_0_load_B = (stream_in_text_V_user_V_0_state_cmp_full & stream_in_text_V_user_V_0_sel_wr);

assign stream_in_text_V_user_V_0_sel = stream_in_text_V_user_V_0_sel_rd;

assign stream_in_text_V_user_V_0_state_cmp_full = ((stream_in_text_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_in_text_V_user_V_0_vld_in = stream_in_text_TVALID;

assign stream_in_text_V_user_V_0_vld_out = stream_in_text_V_user_V_0_state[1'd0];

assign stream_out_TDATA = stream_out_V_data_V_1_data_out;

assign stream_out_TDEST = stream_out_V_dest_V_1_data_out;

assign stream_out_TID = stream_out_V_id_V_1_data_out;

assign stream_out_TKEEP = stream_out_V_keep_V_1_data_out;

assign stream_out_TLAST = stream_out_V_last_V_1_data_out;

assign stream_out_TSTRB = stream_out_V_strb_V_1_data_out;

assign stream_out_TUSER = stream_out_V_user_V_1_data_out;

assign stream_out_TVALID = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_data_V_1_ack_in = stream_out_V_data_V_1_state[1'd1];

assign stream_out_V_data_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_data_V_1_load_A = (stream_out_V_data_V_1_state_cmp_full & ~stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_load_B = (stream_out_V_data_V_1_state_cmp_full & stream_out_V_data_V_1_sel_wr);

assign stream_out_V_data_V_1_sel = stream_out_V_data_V_1_sel_rd;

assign stream_out_V_data_V_1_state_cmp_full = ((stream_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_data_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_data_V_1_vld_out = stream_out_V_data_V_1_state[1'd0];

assign stream_out_V_dest_V_1_ack_in = stream_out_V_dest_V_1_state[1'd1];

assign stream_out_V_dest_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_dest_V_1_load_A = (stream_out_V_dest_V_1_state_cmp_full & ~stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_load_B = (stream_out_V_dest_V_1_state_cmp_full & stream_out_V_dest_V_1_sel_wr);

assign stream_out_V_dest_V_1_sel = stream_out_V_dest_V_1_sel_rd;

assign stream_out_V_dest_V_1_state_cmp_full = ((stream_out_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_dest_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_dest_V_1_vld_out = stream_out_V_dest_V_1_state[1'd0];

assign stream_out_V_id_V_1_ack_in = stream_out_V_id_V_1_state[1'd1];

assign stream_out_V_id_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_id_V_1_load_A = (stream_out_V_id_V_1_state_cmp_full & ~stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_load_B = (stream_out_V_id_V_1_state_cmp_full & stream_out_V_id_V_1_sel_wr);

assign stream_out_V_id_V_1_sel = stream_out_V_id_V_1_sel_rd;

assign stream_out_V_id_V_1_state_cmp_full = ((stream_out_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_id_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_id_V_1_vld_out = stream_out_V_id_V_1_state[1'd0];

assign stream_out_V_keep_V_1_ack_in = stream_out_V_keep_V_1_state[1'd1];

assign stream_out_V_keep_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_keep_V_1_load_A = (stream_out_V_keep_V_1_state_cmp_full & ~stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_load_B = (stream_out_V_keep_V_1_state_cmp_full & stream_out_V_keep_V_1_sel_wr);

assign stream_out_V_keep_V_1_sel = stream_out_V_keep_V_1_sel_rd;

assign stream_out_V_keep_V_1_state_cmp_full = ((stream_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_keep_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_keep_V_1_vld_out = stream_out_V_keep_V_1_state[1'd0];

assign stream_out_V_last_V_1_ack_in = stream_out_V_last_V_1_state[1'd1];

assign stream_out_V_last_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_last_V_1_load_A = (stream_out_V_last_V_1_state_cmp_full & ~stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_load_B = (stream_out_V_last_V_1_state_cmp_full & stream_out_V_last_V_1_sel_wr);

assign stream_out_V_last_V_1_sel = stream_out_V_last_V_1_sel_rd;

assign stream_out_V_last_V_1_state_cmp_full = ((stream_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_last_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_last_V_1_vld_out = stream_out_V_last_V_1_state[1'd0];

assign stream_out_V_strb_V_1_ack_in = stream_out_V_strb_V_1_state[1'd1];

assign stream_out_V_strb_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_strb_V_1_load_A = (stream_out_V_strb_V_1_state_cmp_full & ~stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_load_B = (stream_out_V_strb_V_1_state_cmp_full & stream_out_V_strb_V_1_sel_wr);

assign stream_out_V_strb_V_1_sel = stream_out_V_strb_V_1_sel_rd;

assign stream_out_V_strb_V_1_state_cmp_full = ((stream_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_strb_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_strb_V_1_vld_out = stream_out_V_strb_V_1_state[1'd0];

assign stream_out_V_user_V_1_ack_in = stream_out_V_user_V_1_state[1'd1];

assign stream_out_V_user_V_1_ack_out = stream_out_TREADY;

assign stream_out_V_user_V_1_load_A = (stream_out_V_user_V_1_state_cmp_full & ~stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_load_B = (stream_out_V_user_V_1_state_cmp_full & stream_out_V_user_V_1_sel_wr);

assign stream_out_V_user_V_1_sel = stream_out_V_user_V_1_sel_rd;

assign stream_out_V_user_V_1_state_cmp_full = ((stream_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign stream_out_V_user_V_1_vld_in = grp_matrix2axi_fu_188_stream_out_TVALID;

assign stream_out_V_user_V_1_vld_out = stream_out_V_user_V_1_state[1'd0];

assign tmp_20_cast_fu_331_p1 = j_0_i_reg_163;

assign tmp_24_fu_285_p2 = (tmp_60_cast_reg_353 + tmp_cast_fu_281_p1);

assign tmp_25_fu_335_p2 = (tmp_62_cast_reg_374 + tmp_20_cast_fu_331_p1);

assign tmp_60_cast_fu_265_p1 = tmp_fu_257_p3;

assign tmp_62_cast_fu_315_p1 = tmp_s_fu_307_p3;

assign tmp_63_cast_fu_290_p1 = tmp_24_fu_285_p2;

assign tmp_64_cast_fu_340_p1 = tmp_25_fu_335_p2;

assign tmp_cast_fu_281_p1 = j_0_i5_reg_141;

assign tmp_fu_257_p3 = {{i_0_i1_reg_130}, {2'd0}};

assign tmp_s_fu_307_p3 = {{i_0_i_reg_152}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_60_cast_reg_353[1:0] <= 2'b00;
    tmp_60_cast_reg_353[5] <= 1'b0;
    tmp_62_cast_reg_374[1:0] <= 2'b00;
    tmp_62_cast_reg_374[5] <= 1'b0;
end

endmodule //AESEncrypt_TopFunction
