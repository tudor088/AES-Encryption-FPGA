// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mixColumns (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_data_V_address0,
        state_data_V_ce0,
        state_data_V_we0,
        state_data_V_d0,
        state_data_V_q0,
        state_data_V_address1,
        state_data_V_ce1,
        state_data_V_we1,
        state_data_V_d1,
        state_data_V_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_data_V_address0;
output   state_data_V_ce0;
output   state_data_V_we0;
output  [7:0] state_data_V_d0;
input  [7:0] state_data_V_q0;
output  [3:0] state_data_V_address1;
output   state_data_V_ce1;
output   state_data_V_we1;
output  [7:0] state_data_V_d1;
input  [7:0] state_data_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_data_V_address0;
reg state_data_V_ce0;
reg state_data_V_we0;
reg[7:0] state_data_V_d0;
reg[3:0] state_data_V_address1;
reg state_data_V_ce1;
reg state_data_V_we1;
reg[7:0] state_data_V_d1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] gf_mul2_table_V_address0;
reg    gf_mul2_table_V_ce0;
wire   [7:0] gf_mul2_table_V_q0;
reg   [7:0] gf_mul2_table_V_address1;
reg    gf_mul2_table_V_ce1;
wire   [7:0] gf_mul2_table_V_q1;
reg   [7:0] gf_mul2_table_V_address2;
reg    gf_mul2_table_V_ce2;
wire   [7:0] gf_mul2_table_V_q2;
reg   [7:0] gf_mul2_table_V_address3;
reg    gf_mul2_table_V_ce3;
wire   [7:0] gf_mul2_table_V_q3;
reg   [7:0] gf_mul3_table_V_address0;
reg    gf_mul3_table_V_ce0;
wire   [7:0] gf_mul3_table_V_q0;
reg   [7:0] gf_mul3_table_V_address1;
reg    gf_mul3_table_V_ce1;
wire   [7:0] gf_mul3_table_V_q1;
reg   [7:0] gf_mul3_table_V_address2;
reg    gf_mul3_table_V_ce2;
wire   [7:0] gf_mul3_table_V_q2;
reg   [7:0] gf_mul3_table_V_address3;
reg    gf_mul3_table_V_ce3;
wire   [7:0] gf_mul3_table_V_q3;
reg   [7:0] reg_471;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_475;
wire   [3:0] state_data_V_addr_reg_835;
wire   [3:0] state_data_V_addr_16_reg_840;
wire   [3:0] state_data_V_addr_17_reg_845;
wire   [3:0] state_data_V_addr_18_reg_850;
wire   [3:0] state_data_V_addr_19_reg_855;
wire    ap_CS_fsm_state3;
wire   [3:0] state_data_V_addr_20_reg_860;
reg   [7:0] state_data_V_load_17_reg_865;
reg   [7:0] state_data_V_load_18_reg_872;
wire   [3:0] state_data_V_addr_21_reg_879;
wire    ap_CS_fsm_state4;
wire   [3:0] state_data_V_addr_22_reg_884;
reg   [7:0] state_data_V_load_19_reg_889;
reg   [7:0] state_data_V_load_20_reg_896;
wire   [3:0] state_data_V_addr_23_reg_903;
wire    ap_CS_fsm_state5;
wire   [3:0] state_data_V_addr_24_reg_908;
reg   [7:0] state_data_V_load_21_reg_913;
reg   [7:0] state_data_V_load_22_reg_920;
wire   [3:0] state_data_V_addr_25_reg_927;
wire    ap_CS_fsm_state6;
wire   [3:0] state_data_V_addr_26_reg_932;
reg   [7:0] state_data_V_load_23_reg_937;
reg   [7:0] state_data_V_load_24_reg_944;
wire   [3:0] state_data_V_addr_27_reg_951;
wire    ap_CS_fsm_state7;
wire   [3:0] state_data_V_addr_28_reg_956;
reg   [7:0] state_data_V_load_25_reg_961;
reg   [7:0] state_data_V_load_26_reg_968;
wire   [3:0] state_data_V_addr_29_reg_975;
wire    ap_CS_fsm_state8;
wire   [3:0] state_data_V_addr_30_reg_980;
reg   [7:0] state_data_V_load_27_reg_1025;
reg   [7:0] state_data_V_load_28_reg_1032;
wire   [7:0] op2_V_read_assign_1_fu_548_p2;
reg   [7:0] op2_V_read_assign_1_reg_1039;
wire   [7:0] op2_V_read_assign_2_fu_565_p2;
reg   [7:0] op2_V_read_assign_2_reg_1044;
wire    ap_CS_fsm_state10;
wire   [7:0] op2_V_read_assign_4_fu_635_p2;
reg   [7:0] op2_V_read_assign_4_reg_1089;
wire    ap_CS_fsm_state11;
wire   [7:0] op2_V_read_assign_5_fu_651_p2;
reg   [7:0] op2_V_read_assign_5_reg_1094;
wire    ap_CS_fsm_state12;
wire   [7:0] op2_V_read_assign_7_fu_721_p2;
reg   [7:0] op2_V_read_assign_7_reg_1139;
wire    ap_CS_fsm_state13;
wire   [7:0] op2_V_read_assign_8_fu_737_p2;
reg   [7:0] op2_V_read_assign_8_reg_1144;
wire    ap_CS_fsm_state14;
wire   [7:0] op2_V_read_assign_10_fu_812_p2;
reg   [7:0] op2_V_read_assign_10_reg_1189;
wire    ap_CS_fsm_state15;
wire   [7:0] op2_V_read_assign_11_fu_829_p2;
reg   [7:0] op2_V_read_assign_11_reg_1194;
wire   [63:0] tmp_i_fu_479_p1;
wire   [63:0] tmp_i1_fu_485_p1;
wire   [63:0] tmp_i2_fu_491_p1;
wire   [63:0] tmp_i3_fu_496_p1;
wire   [63:0] tmp_i4_fu_571_p1;
wire   [63:0] tmp_i5_fu_576_p1;
wire   [63:0] tmp_i6_fu_581_p1;
wire   [63:0] tmp_i7_fu_586_p1;
wire   [63:0] tmp_i8_fu_657_p1;
wire   [63:0] tmp_i9_fu_662_p1;
wire   [63:0] tmp_i10_fu_667_p1;
wire   [63:0] tmp_i11_fu_672_p1;
wire   [63:0] tmp_i12_fu_743_p1;
wire   [63:0] tmp_i13_fu_748_p1;
wire   [63:0] tmp_i14_fu_753_p1;
wire   [63:0] tmp_i15_fu_759_p1;
wire   [7:0] op2_V_read_assign_fu_511_p2;
wire   [7:0] op2_V_read_assign_s_fu_529_p2;
wire   [7:0] op2_V_read_assign_12_fu_601_p2;
wire   [7:0] op2_V_read_assign_3_fu_618_p2;
wire   [7:0] op2_V_read_assign_13_fu_687_p2;
wire   [7:0] op2_V_read_assign_6_fu_704_p2;
wire   [7:0] op2_V_read_assign_14_fu_777_p2;
wire   [7:0] op2_V_read_assign_9_fu_795_p2;
wire    ap_CS_fsm_state16;
wire   [7:0] tmp1_fu_505_p2;
wire   [7:0] tmp_fu_501_p2;
wire   [7:0] tmp3_fu_523_p2;
wire   [7:0] tmp2_fu_518_p2;
wire   [7:0] tmp5_fu_542_p2;
wire   [7:0] tmp4_fu_536_p2;
wire   [7:0] tmp7_fu_559_p2;
wire   [7:0] tmp6_fu_554_p2;
wire   [7:0] tmp9_fu_595_p2;
wire   [7:0] tmp8_fu_591_p2;
wire   [7:0] tmp11_fu_612_p2;
wire   [7:0] tmp10_fu_608_p2;
wire   [7:0] tmp13_fu_629_p2;
wire   [7:0] tmp12_fu_625_p2;
wire   [7:0] tmp15_fu_645_p2;
wire   [7:0] tmp14_fu_641_p2;
wire   [7:0] tmp17_fu_681_p2;
wire   [7:0] tmp16_fu_677_p2;
wire   [7:0] tmp19_fu_698_p2;
wire   [7:0] tmp18_fu_694_p2;
wire   [7:0] tmp21_fu_715_p2;
wire   [7:0] tmp20_fu_711_p2;
wire   [7:0] tmp23_fu_731_p2;
wire   [7:0] tmp22_fu_727_p2;
wire   [7:0] tmp25_fu_771_p2;
wire   [7:0] tmp24_fu_765_p2;
wire   [7:0] tmp27_fu_789_p2;
wire   [7:0] tmp26_fu_784_p2;
wire   [7:0] tmp29_fu_806_p2;
wire   [7:0] tmp28_fu_802_p2;
wire   [7:0] tmp31_fu_823_p2;
wire   [7:0] tmp30_fu_818_p2;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

mixColumns_gf_mulfYi #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
gf_mul2_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gf_mul2_table_V_address0),
    .ce0(gf_mul2_table_V_ce0),
    .q0(gf_mul2_table_V_q0),
    .address1(gf_mul2_table_V_address1),
    .ce1(gf_mul2_table_V_ce1),
    .q1(gf_mul2_table_V_q1),
    .address2(gf_mul2_table_V_address2),
    .ce2(gf_mul2_table_V_ce2),
    .q2(gf_mul2_table_V_q2),
    .address3(gf_mul2_table_V_address3),
    .ce3(gf_mul2_table_V_ce3),
    .q3(gf_mul2_table_V_q3)
);

mixColumns_gf_mulg8j #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
gf_mul3_table_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(gf_mul3_table_V_address0),
    .ce0(gf_mul3_table_V_ce0),
    .q0(gf_mul3_table_V_q0),
    .address1(gf_mul3_table_V_address1),
    .ce1(gf_mul3_table_V_ce1),
    .q1(gf_mul3_table_V_q1),
    .address2(gf_mul3_table_V_address2),
    .ce2(gf_mul3_table_V_ce2),
    .q2(gf_mul3_table_V_q2),
    .address3(gf_mul3_table_V_address3),
    .ce3(gf_mul3_table_V_ce3),
    .q3(gf_mul3_table_V_q3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        op2_V_read_assign_10_reg_1189 <= op2_V_read_assign_10_fu_812_p2;
        op2_V_read_assign_11_reg_1194 <= op2_V_read_assign_11_fu_829_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        op2_V_read_assign_1_reg_1039 <= op2_V_read_assign_1_fu_548_p2;
        op2_V_read_assign_2_reg_1044 <= op2_V_read_assign_2_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        op2_V_read_assign_4_reg_1089 <= op2_V_read_assign_4_fu_635_p2;
        op2_V_read_assign_5_reg_1094 <= op2_V_read_assign_5_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        op2_V_read_assign_7_reg_1139 <= op2_V_read_assign_7_fu_721_p2;
        op2_V_read_assign_8_reg_1144 <= op2_V_read_assign_8_fu_737_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_471 <= state_data_V_q0;
        reg_475 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_load_17_reg_865 <= state_data_V_q0;
        state_data_V_load_18_reg_872 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_load_19_reg_889 <= state_data_V_q0;
        state_data_V_load_20_reg_896 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_load_21_reg_913 <= state_data_V_q0;
        state_data_V_load_22_reg_920 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_load_23_reg_937 <= state_data_V_q0;
        state_data_V_load_24_reg_944 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_load_25_reg_961 <= state_data_V_q0;
        state_data_V_load_26_reg_968 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_load_27_reg_1025 <= state_data_V_q0;
        state_data_V_load_28_reg_1032 <= state_data_V_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul2_table_V_address0 = tmp_i12_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul2_table_V_address0 = tmp_i8_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul2_table_V_address0 = tmp_i4_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul2_table_V_address0 = tmp_i_fu_479_p1;
    end else begin
        gf_mul2_table_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul2_table_V_address1 = tmp_i13_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul2_table_V_address1 = tmp_i9_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul2_table_V_address1 = tmp_i5_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul2_table_V_address1 = tmp_i1_fu_485_p1;
    end else begin
        gf_mul2_table_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul2_table_V_address2 = tmp_i14_fu_753_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul2_table_V_address2 = tmp_i10_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul2_table_V_address2 = tmp_i6_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul2_table_V_address2 = tmp_i2_fu_491_p1;
    end else begin
        gf_mul2_table_V_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul2_table_V_address3 = tmp_i15_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul2_table_V_address3 = tmp_i11_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul2_table_V_address3 = tmp_i7_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul2_table_V_address3 = tmp_i3_fu_496_p1;
    end else begin
        gf_mul2_table_V_address3 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul2_table_V_ce0 = 1'b1;
    end else begin
        gf_mul2_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul2_table_V_ce1 = 1'b1;
    end else begin
        gf_mul2_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul2_table_V_ce2 = 1'b1;
    end else begin
        gf_mul2_table_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul2_table_V_ce3 = 1'b1;
    end else begin
        gf_mul2_table_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul3_table_V_address0 = tmp_i13_fu_748_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul3_table_V_address0 = tmp_i9_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul3_table_V_address0 = tmp_i5_fu_576_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul3_table_V_address0 = tmp_i1_fu_485_p1;
    end else begin
        gf_mul3_table_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul3_table_V_address1 = tmp_i14_fu_753_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul3_table_V_address1 = tmp_i10_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul3_table_V_address1 = tmp_i6_fu_581_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul3_table_V_address1 = tmp_i2_fu_491_p1;
    end else begin
        gf_mul3_table_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul3_table_V_address2 = tmp_i15_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul3_table_V_address2 = tmp_i11_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul3_table_V_address2 = tmp_i7_fu_586_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul3_table_V_address2 = tmp_i3_fu_496_p1;
    end else begin
        gf_mul3_table_V_address2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gf_mul3_table_V_address3 = tmp_i12_fu_743_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        gf_mul3_table_V_address3 = tmp_i8_fu_657_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        gf_mul3_table_V_address3 = tmp_i4_fu_571_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        gf_mul3_table_V_address3 = tmp_i_fu_479_p1;
    end else begin
        gf_mul3_table_V_address3 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul3_table_V_ce0 = 1'b1;
    end else begin
        gf_mul3_table_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul3_table_V_ce1 = 1'b1;
    end else begin
        gf_mul3_table_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul3_table_V_ce2 = 1'b1;
    end else begin
        gf_mul3_table_V_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        gf_mul3_table_V_ce3 = 1'b1;
    end else begin
        gf_mul3_table_V_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_address0 = state_data_V_addr_29_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_address0 = state_data_V_addr_27_reg_951;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_address0 = state_data_V_addr_25_reg_927;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_address0 = state_data_V_addr_23_reg_903;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_address0 = state_data_V_addr_21_reg_879;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_address0 = state_data_V_addr_19_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_address0 = state_data_V_addr_17_reg_845;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_address0 = state_data_V_addr_reg_835;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address0 = 64'd0;
    end else begin
        state_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_address1 = state_data_V_addr_30_reg_980;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_address1 = state_data_V_addr_28_reg_956;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_address1 = state_data_V_addr_26_reg_932;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_address1 = state_data_V_addr_24_reg_908;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_address1 = state_data_V_addr_22_reg_884;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_address1 = state_data_V_addr_20_reg_860;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_address1 = state_data_V_addr_18_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_address1 = state_data_V_addr_16_reg_840;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address1 = 64'd4;
    end else begin
        state_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce0 = 1'b1;
    end else begin
        state_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce1 = 1'b1;
    end else begin
        state_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_d0 = op2_V_read_assign_10_reg_1189;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_d0 = op2_V_read_assign_14_fu_777_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_d0 = op2_V_read_assign_7_reg_1139;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_d0 = op2_V_read_assign_13_fu_687_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_d0 = op2_V_read_assign_4_reg_1089;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_d0 = op2_V_read_assign_12_fu_601_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_d0 = op2_V_read_assign_1_reg_1039;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_d0 = op2_V_read_assign_fu_511_p2;
    end else begin
        state_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_d1 = op2_V_read_assign_11_reg_1194;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_d1 = op2_V_read_assign_9_fu_795_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_d1 = op2_V_read_assign_8_reg_1144;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_d1 = op2_V_read_assign_6_fu_704_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_d1 = op2_V_read_assign_5_reg_1094;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_d1 = op2_V_read_assign_3_fu_618_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_d1 = op2_V_read_assign_2_reg_1044;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_d1 = op2_V_read_assign_s_fu_529_p2;
    end else begin
        state_data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we0 = 1'b1;
    end else begin
        state_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we1 = 1'b1;
    end else begin
        state_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign op2_V_read_assign_10_fu_812_p2 = (tmp29_fu_806_p2 ^ tmp28_fu_802_p2);

assign op2_V_read_assign_11_fu_829_p2 = (tmp31_fu_823_p2 ^ tmp30_fu_818_p2);

assign op2_V_read_assign_12_fu_601_p2 = (tmp9_fu_595_p2 ^ tmp8_fu_591_p2);

assign op2_V_read_assign_13_fu_687_p2 = (tmp17_fu_681_p2 ^ tmp16_fu_677_p2);

assign op2_V_read_assign_14_fu_777_p2 = (tmp25_fu_771_p2 ^ tmp24_fu_765_p2);

assign op2_V_read_assign_1_fu_548_p2 = (tmp5_fu_542_p2 ^ tmp4_fu_536_p2);

assign op2_V_read_assign_2_fu_565_p2 = (tmp7_fu_559_p2 ^ tmp6_fu_554_p2);

assign op2_V_read_assign_3_fu_618_p2 = (tmp11_fu_612_p2 ^ tmp10_fu_608_p2);

assign op2_V_read_assign_4_fu_635_p2 = (tmp13_fu_629_p2 ^ tmp12_fu_625_p2);

assign op2_V_read_assign_5_fu_651_p2 = (tmp15_fu_645_p2 ^ tmp14_fu_641_p2);

assign op2_V_read_assign_6_fu_704_p2 = (tmp19_fu_698_p2 ^ tmp18_fu_694_p2);

assign op2_V_read_assign_7_fu_721_p2 = (tmp21_fu_715_p2 ^ tmp20_fu_711_p2);

assign op2_V_read_assign_8_fu_737_p2 = (tmp23_fu_731_p2 ^ tmp22_fu_727_p2);

assign op2_V_read_assign_9_fu_795_p2 = (tmp27_fu_789_p2 ^ tmp26_fu_784_p2);

assign op2_V_read_assign_fu_511_p2 = (tmp_fu_501_p2 ^ tmp1_fu_505_p2);

assign op2_V_read_assign_s_fu_529_p2 = (tmp3_fu_523_p2 ^ tmp2_fu_518_p2);

assign state_data_V_addr_16_reg_840 = 64'd4;

assign state_data_V_addr_17_reg_845 = 64'd8;

assign state_data_V_addr_18_reg_850 = 64'd12;

assign state_data_V_addr_19_reg_855 = 64'd1;

assign state_data_V_addr_20_reg_860 = 64'd5;

assign state_data_V_addr_21_reg_879 = 64'd9;

assign state_data_V_addr_22_reg_884 = 64'd13;

assign state_data_V_addr_23_reg_903 = 64'd2;

assign state_data_V_addr_24_reg_908 = 64'd6;

assign state_data_V_addr_25_reg_927 = 64'd10;

assign state_data_V_addr_26_reg_932 = 64'd14;

assign state_data_V_addr_27_reg_951 = 64'd3;

assign state_data_V_addr_28_reg_956 = 64'd7;

assign state_data_V_addr_29_reg_975 = 64'd11;

assign state_data_V_addr_30_reg_980 = 64'd15;

assign state_data_V_addr_reg_835 = 64'd0;

assign tmp10_fu_608_p2 = (state_data_V_load_22_reg_920 ^ state_data_V_load_19_reg_889);

assign tmp11_fu_612_p2 = (gf_mul3_table_V_q1 ^ gf_mul2_table_V_q1);

assign tmp12_fu_625_p2 = (state_data_V_load_20_reg_896 ^ state_data_V_load_19_reg_889);

assign tmp13_fu_629_p2 = (gf_mul3_table_V_q2 ^ gf_mul2_table_V_q2);

assign tmp14_fu_641_p2 = (state_data_V_load_21_reg_913 ^ state_data_V_load_20_reg_896);

assign tmp15_fu_645_p2 = (gf_mul3_table_V_q3 ^ gf_mul2_table_V_q3);

assign tmp16_fu_677_p2 = (state_data_V_load_26_reg_968 ^ state_data_V_load_25_reg_961);

assign tmp17_fu_681_p2 = (gf_mul3_table_V_q0 ^ gf_mul2_table_V_q0);

assign tmp18_fu_694_p2 = (state_data_V_load_26_reg_968 ^ state_data_V_load_23_reg_937);

assign tmp19_fu_698_p2 = (gf_mul3_table_V_q1 ^ gf_mul2_table_V_q1);

assign tmp1_fu_505_p2 = (gf_mul3_table_V_q0 ^ gf_mul2_table_V_q0);

assign tmp20_fu_711_p2 = (state_data_V_load_24_reg_944 ^ state_data_V_load_23_reg_937);

assign tmp21_fu_715_p2 = (gf_mul3_table_V_q2 ^ gf_mul2_table_V_q2);

assign tmp22_fu_727_p2 = (state_data_V_load_25_reg_961 ^ state_data_V_load_24_reg_944);

assign tmp23_fu_731_p2 = (gf_mul3_table_V_q3 ^ gf_mul2_table_V_q3);

assign tmp24_fu_765_p2 = (reg_475 ^ reg_471);

assign tmp25_fu_771_p2 = (gf_mul3_table_V_q0 ^ gf_mul2_table_V_q0);

assign tmp26_fu_784_p2 = (state_data_V_load_27_reg_1025 ^ reg_475);

assign tmp27_fu_789_p2 = (gf_mul3_table_V_q1 ^ gf_mul2_table_V_q1);

assign tmp28_fu_802_p2 = (state_data_V_load_28_reg_1032 ^ state_data_V_load_27_reg_1025);

assign tmp29_fu_806_p2 = (gf_mul3_table_V_q2 ^ gf_mul2_table_V_q2);

assign tmp2_fu_518_p2 = (state_data_V_load_18_reg_872 ^ reg_471);

assign tmp30_fu_818_p2 = (state_data_V_load_28_reg_1032 ^ reg_471);

assign tmp31_fu_823_p2 = (gf_mul3_table_V_q3 ^ gf_mul2_table_V_q3);

assign tmp3_fu_523_p2 = (gf_mul3_table_V_q1 ^ gf_mul2_table_V_q1);

assign tmp4_fu_536_p2 = (reg_475 ^ reg_471);

assign tmp5_fu_542_p2 = (gf_mul3_table_V_q2 ^ gf_mul2_table_V_q2);

assign tmp6_fu_554_p2 = (state_data_V_load_17_reg_865 ^ reg_475);

assign tmp7_fu_559_p2 = (gf_mul3_table_V_q3 ^ gf_mul2_table_V_q3);

assign tmp8_fu_591_p2 = (state_data_V_load_22_reg_920 ^ state_data_V_load_21_reg_913);

assign tmp9_fu_595_p2 = (gf_mul3_table_V_q0 ^ gf_mul2_table_V_q0);

assign tmp_fu_501_p2 = (state_data_V_load_18_reg_872 ^ state_data_V_load_17_reg_865);

assign tmp_i10_fu_667_p1 = state_data_V_load_25_reg_961;

assign tmp_i11_fu_672_p1 = state_data_V_load_26_reg_968;

assign tmp_i12_fu_743_p1 = state_data_V_load_27_reg_1025;

assign tmp_i13_fu_748_p1 = state_data_V_load_28_reg_1032;

assign tmp_i14_fu_753_p1 = reg_471;

assign tmp_i15_fu_759_p1 = reg_475;

assign tmp_i1_fu_485_p1 = reg_475;

assign tmp_i2_fu_491_p1 = state_data_V_load_17_reg_865;

assign tmp_i3_fu_496_p1 = state_data_V_load_18_reg_872;

assign tmp_i4_fu_571_p1 = state_data_V_load_19_reg_889;

assign tmp_i5_fu_576_p1 = state_data_V_load_20_reg_896;

assign tmp_i6_fu_581_p1 = state_data_V_load_21_reg_913;

assign tmp_i7_fu_586_p1 = state_data_V_load_22_reg_920;

assign tmp_i8_fu_657_p1 = state_data_V_load_23_reg_937;

assign tmp_i9_fu_662_p1 = state_data_V_load_24_reg_944;

assign tmp_i_fu_479_p1 = reg_471;

endmodule //mixColumns
