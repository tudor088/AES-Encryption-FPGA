// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module keyExpansion5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        masterKey_data_V_address0,
        masterKey_data_V_ce0,
        masterKey_data_V_q0,
        expandedKey_V_address0,
        expandedKey_V_ce0,
        expandedKey_V_we0,
        expandedKey_V_d0,
        expandedKey_V_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] masterKey_data_V_address0;
output   masterKey_data_V_ce0;
input  [7:0] masterKey_data_V_q0;
output  [7:0] expandedKey_V_address0;
output   expandedKey_V_ce0;
output   expandedKey_V_we0;
output  [7:0] expandedKey_V_d0;
input  [7:0] expandedKey_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg masterKey_data_V_ce0;
reg[7:0] expandedKey_V_address0;
reg expandedKey_V_ce0;
reg expandedKey_V_we0;
reg[7:0] expandedKey_V_d0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_V_address0;
reg    sbox_V_ce0;
wire   [7:0] sbox_V_q0;
wire   [3:0] rcon_V_address0;
reg    rcon_V_ce0;
wire   [7:0] rcon_V_q0;
wire   [2:0] col_1_fu_572_p2;
reg   [2:0] col_1_reg_840;
wire    ap_CS_fsm_state2;
wire   [7:0] tmp_cast1_fu_578_p1;
reg   [7:0] tmp_cast1_reg_845;
wire   [0:0] exitcond2_fu_566_p2;
wire   [5:0] tmp_cast_fu_582_p1;
reg   [5:0] tmp_cast_reg_850;
wire   [2:0] row_fu_592_p2;
reg   [2:0] row_reg_858;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond4_fu_586_p2;
wire   [7:0] next_mul_fu_620_p2;
reg   [7:0] next_mul_reg_868;
wire   [7:0] tmp_6_fu_626_p2;
reg   [7:0] tmp_6_reg_873;
wire   [7:0] tmp_4_cast_fu_647_p1;
reg   [7:0] tmp_4_cast_reg_881;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond3_fu_635_p2;
wire   [2:0] row_1_fu_657_p2;
reg   [2:0] row_1_reg_889;
wire    ap_CS_fsm_state6;
wire   [7:0] next_mul1_fu_663_p2;
reg   [7:0] next_mul1_reg_894;
wire   [0:0] exitcond5_fu_651_p2;
wire   [1:0] tmp_32_fu_679_p1;
reg   [1:0] tmp_32_reg_904;
wire   [0:0] tmp_7_fu_687_p2;
reg   [0:0] tmp_7_reg_908;
wire    ap_CS_fsm_state7;
wire   [2:0] i_fu_699_p2;
reg   [2:0] i_reg_923;
wire    ap_CS_fsm_state9;
wire   [1:0] tmp_33_fu_705_p1;
reg   [1:0] tmp_33_reg_928;
wire   [0:0] exitcond_i_fu_693_p2;
wire    ap_CS_fsm_state10;
wire   [7:0] tmp_9_cast_fu_756_p1;
reg   [7:0] tmp_9_cast_reg_950;
wire    ap_CS_fsm_state12;
wire   [7:0] tmp_6_cast_fu_766_p1;
reg   [7:0] tmp_6_cast_reg_955;
wire   [2:0] row_2_fu_776_p2;
reg   [2:0] row_2_reg_963;
wire    ap_CS_fsm_state13;
wire   [7:0] next_mul2_fu_782_p2;
reg   [7:0] next_mul2_reg_968;
wire   [0:0] exitcond_fu_770_p2;
wire   [7:0] tmp_11_fu_798_p2;
reg   [7:0] tmp_11_reg_978;
wire   [7:0] rhs_V_fu_807_p6;
reg   [7:0] rhs_V_reg_983;
wire   [5:0] col_fu_821_p2;
reg   [2:0] col_assign_reg_135;
reg   [2:0] row_assign_reg_146;
wire    ap_CS_fsm_state4;
reg   [7:0] phi_mul_reg_157;
reg   [7:0] temp_3_V_5_reg_493;
reg   [7:0] temp_3_V_reg_168;
reg   [7:0] temp_2_V_3_5_reg_506;
reg   [7:0] temp_2_V_3_reg_180;
reg   [7:0] temp_1_V_5_reg_519;
reg   [7:0] temp_1_V_reg_192;
reg   [7:0] temp_0_V_1_reg_532;
reg   [7:0] temp_0_V_reg_204;
reg   [5:0] col1_reg_216;
reg   [7:0] temp_2_V_reg_228;
wire    ap_CS_fsm_state8;
reg   [7:0] temp_1_V_1_reg_239;
reg   [7:0] temp_0_V_4_reg_250;
reg   [7:0] temp_3_V_6_reg_261;
reg   [2:0] row2_reg_272;
reg   [7:0] phi_mul1_reg_283;
reg   [7:0] temp_2_V_be_reg_294;
reg   [7:0] temp_1_V_1_be_reg_312;
reg   [7:0] temp_0_V_5_be_reg_330;
reg   [7:0] temp_3_V_8_be_reg_348;
reg   [7:0] temp_3_V_3_reg_366;
wire    ap_CS_fsm_state11;
reg   [7:0] temp_2_V_3_3_reg_377;
reg   [7:0] temp_1_V_3_reg_388;
reg   [7:0] temp_0_V_3_reg_399;
reg   [2:0] i_i_reg_410;
reg   [7:0] temp_3_V_3_be_reg_421;
reg   [7:0] temp_2_V_3_3_be_reg_439;
reg   [7:0] temp_1_V_3_be_reg_457;
reg   [7:0] temp_0_V_3_be_reg_475;
wire   [7:0] temp_0_V_2_fu_749_p2;
reg   [2:0] row3_reg_544;
wire    ap_CS_fsm_state14;
reg   [7:0] phi_mul2_reg_555;
wire   [63:0] tmp_35_cast_fu_615_p1;
wire   [63:0] tmp_37_cast_fu_631_p1;
wire   [63:0] tmp_39_cast_fu_674_p1;
wire   [63:0] tmp_4_i_fu_723_p1;
wire   [63:0] tmp_3_fu_744_p1;
wire   [63:0] tmp_41_cast_fu_793_p1;
wire   [63:0] tmp_42_cast_fu_827_p1;
wire   [7:0] r_V_fu_831_p2;
wire   [4:0] tmp_4_fu_598_p3;
wire   [5:0] tmp_34_cast_fu_606_p1;
wire   [5:0] tmp_5_fu_610_p2;
wire   [5:0] tmp_s_fu_641_p2;
wire   [7:0] tmp_8_fu_669_p2;
wire   [1:0] tmp_fu_683_p1;
wire   [1:0] tmp_9_fu_709_p5;
wire   [7:0] tmp_9_fu_709_p6;
wire   [3:0] p_lshr_f_cast_fu_728_p4;
wire   [3:0] addconv_fu_738_p2;
wire   [5:0] tmp_2_fu_760_p2;
wire   [7:0] tmp_10_fu_788_p2;
wire   [1:0] rhs_V_fu_807_p5;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

keyExpansion5_sbobkb #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_V_address0),
    .ce0(sbox_V_ce0),
    .q0(sbox_V_q0)
);

keyExpansion5_rcocud #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
rcon_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(rcon_V_address0),
    .ce0(rcon_V_ce0),
    .q0(rcon_V_q0)
);

AESEncrypt_TopFundEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
AESEncrypt_TopFundEe_U9(
    .din0(temp_0_V_3_reg_399),
    .din1(temp_1_V_3_reg_388),
    .din2(temp_2_V_3_3_reg_377),
    .din3(temp_3_V_3_reg_366),
    .din4(tmp_9_fu_709_p5),
    .dout(tmp_9_fu_709_p6)
);

AESEncrypt_TopFundEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
AESEncrypt_TopFundEe_U10(
    .din0(temp_0_V_1_reg_532),
    .din1(temp_1_V_5_reg_519),
    .din2(temp_2_V_3_5_reg_506),
    .din3(temp_3_V_5_reg_493),
    .din4(rhs_V_fu_807_p5),
    .dout(rhs_V_fu_807_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col1_reg_216 <= 6'd4;
    end else if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_770_p2 == 1'd1))) begin
        col1_reg_216 <= col_fu_821_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_586_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        col_assign_reg_135 <= col_1_reg_840;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        col_assign_reg_135 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_i_reg_410 <= i_reg_923;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
        i_i_reg_410 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul1_reg_283 <= next_mul1_reg_894;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        phi_mul1_reg_283 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        phi_mul2_reg_555 <= next_mul2_reg_968;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        phi_mul2_reg_555 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_157 <= 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_mul_reg_157 <= next_mul_reg_868;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        row2_reg_272 <= row_1_reg_889;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        row2_reg_272 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        row3_reg_544 <= row_2_reg_963;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        row3_reg_544 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        row_assign_reg_146 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        row_assign_reg_146 <= row_reg_858;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_0_V_1_reg_532 <= temp_3_V_6_reg_261;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_7_reg_908 == 1'd1))) begin
        temp_0_V_1_reg_532 <= temp_0_V_2_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd0))) begin
        temp_0_V_3_be_reg_475 <= sbox_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd1)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd2)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd3)))) begin
        temp_0_V_3_be_reg_475 <= temp_0_V_3_reg_399;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_0_V_3_reg_399 <= temp_0_V_3_be_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_0_V_3_reg_399 <= temp_0_V_4_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_0_V_4_reg_250 <= temp_0_V_5_be_reg_330;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        temp_0_V_4_reg_250 <= temp_1_V_reg_192;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd1))) begin
        temp_0_V_5_be_reg_330 <= expandedKey_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd3)))) begin
        temp_0_V_5_be_reg_330 <= temp_0_V_4_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd2))) begin
        temp_1_V_1_be_reg_312 <= expandedKey_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd3)))) begin
        temp_1_V_1_be_reg_312 <= temp_1_V_1_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_1_V_1_reg_239 <= temp_1_V_1_be_reg_312;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        temp_1_V_1_reg_239 <= temp_2_V_3_reg_180;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd1))) begin
        temp_1_V_3_be_reg_457 <= sbox_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd0)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd2)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd3)))) begin
        temp_1_V_3_be_reg_457 <= temp_1_V_3_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_1_V_3_reg_388 <= temp_1_V_3_be_reg_457;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_1_V_3_reg_388 <= temp_1_V_1_reg_239;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_1_V_5_reg_519 <= temp_0_V_4_reg_250;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_7_reg_908 == 1'd1))) begin
        temp_1_V_5_reg_519 <= temp_1_V_3_reg_388;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd2))) begin
        temp_2_V_3_3_be_reg_439 <= sbox_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd0)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd1)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd3)))) begin
        temp_2_V_3_3_be_reg_439 <= temp_2_V_3_3_reg_377;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_2_V_3_3_reg_377 <= temp_2_V_3_3_be_reg_439;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_2_V_3_3_reg_377 <= temp_2_V_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_2_V_3_5_reg_506 <= temp_1_V_1_reg_239;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_7_reg_908 == 1'd1))) begin
        temp_2_V_3_5_reg_506 <= temp_2_V_3_3_reg_377;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd0)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd2)))) begin
        temp_2_V_be_reg_294 <= temp_2_V_reg_228;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd3))) begin
        temp_2_V_be_reg_294 <= expandedKey_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_2_V_reg_228 <= temp_2_V_be_reg_294;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        temp_2_V_reg_228 <= temp_3_V_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd0)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd1)) | ((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd2)))) begin
        temp_3_V_3_be_reg_421 <= temp_3_V_3_reg_366;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_33_reg_928 == 2'd3))) begin
        temp_3_V_3_be_reg_421 <= sbox_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_3_V_3_reg_366 <= temp_3_V_3_be_reg_421;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_3_V_3_reg_366 <= temp_3_V_6_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
        temp_3_V_5_reg_493 <= temp_2_V_reg_228;
    end else if (((1'b1 == ap_CS_fsm_state12) & (tmp_7_reg_908 == 1'd1))) begin
        temp_3_V_5_reg_493 <= temp_3_V_3_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_3_V_6_reg_261 <= temp_3_V_8_be_reg_348;
    end else if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        temp_3_V_6_reg_261 <= temp_0_V_reg_204;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd0))) begin
        temp_3_V_8_be_reg_348 <= expandedKey_V_q0;
    end else if ((((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd1)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd2)) | ((1'b1 == ap_CS_fsm_state7) & (tmp_32_reg_904 == 2'd3)))) begin
        temp_3_V_8_be_reg_348 <= temp_3_V_6_reg_261;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_1_reg_840 <= col_1_fu_572_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_923 <= i_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_651_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        next_mul1_reg_894 <= next_mul1_fu_663_p2;
        tmp_32_reg_904 <= tmp_32_fu_679_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_770_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        next_mul2_reg_968 <= next_mul2_fu_782_p2;
        rhs_V_reg_983 <= rhs_V_fu_807_p6;
        tmp_11_reg_978 <= tmp_11_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_586_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        next_mul_reg_868 <= next_mul_fu_620_p2;
        tmp_6_reg_873 <= tmp_6_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        row_1_reg_889 <= row_1_fu_657_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        row_2_reg_963 <= row_2_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_858 <= row_fu_592_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_770_p2 == 1'd1))) begin
        temp_0_V_reg_204 <= temp_0_V_1_reg_532;
        temp_1_V_reg_192 <= temp_1_V_5_reg_519;
        temp_2_V_3_reg_180 <= temp_2_V_3_5_reg_506;
        temp_3_V_reg_168 <= temp_3_V_5_reg_493;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_i_fu_693_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_33_reg_928 <= tmp_33_fu_705_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_635_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_4_cast_reg_881[5 : 0] <= tmp_4_cast_fu_647_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_6_cast_reg_955[5 : 0] <= tmp_6_cast_fu_766_p1[5 : 0];
        tmp_9_cast_reg_950[5 : 0] <= tmp_9_cast_fu_756_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
        tmp_7_reg_908 <= tmp_7_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_566_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_cast1_reg_845[2 : 0] <= tmp_cast1_fu_578_p1[2 : 0];
        tmp_cast_reg_850[2 : 0] <= tmp_cast_fu_582_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_635_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_635_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_V_address0 = tmp_42_cast_fu_827_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        expandedKey_V_address0 = tmp_41_cast_fu_793_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_V_address0 = tmp_39_cast_fu_674_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_V_address0 = tmp_37_cast_fu_631_p1;
    end else begin
        expandedKey_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        expandedKey_V_ce0 = 1'b1;
    end else begin
        expandedKey_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        expandedKey_V_d0 = r_V_fu_831_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        expandedKey_V_d0 = masterKey_data_V_q0;
    end else begin
        expandedKey_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state4))) begin
        expandedKey_V_we0 = 1'b1;
    end else begin
        expandedKey_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        masterKey_data_V_ce0 = 1'b1;
    end else begin
        masterKey_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        rcon_V_ce0 = 1'b1;
    end else begin
        rcon_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sbox_V_ce0 = 1'b1;
    end else begin
        sbox_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond2_fu_566_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond4_fu_586_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_635_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_7_fu_687_p2 == 1'd1) & (exitcond5_fu_651_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((tmp_7_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (exitcond5_fu_651_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond_i_fu_693_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (exitcond_fu_770_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addconv_fu_738_p2 = ($signed(p_lshr_f_cast_fu_728_p4) + $signed(4'd15));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign col_1_fu_572_p2 = (col_assign_reg_135 + 3'd1);

assign col_fu_821_p2 = (col1_reg_216 + 6'd1);

assign exitcond2_fu_566_p2 = ((col_assign_reg_135 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_635_p2 = ((col1_reg_216 == 6'd44) ? 1'b1 : 1'b0);

assign exitcond4_fu_586_p2 = ((row_assign_reg_146 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond5_fu_651_p2 = ((row2_reg_272 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_770_p2 = ((row3_reg_544 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_693_p2 = ((i_i_reg_410 == 3'd4) ? 1'b1 : 1'b0);

assign i_fu_699_p2 = (i_i_reg_410 + 3'd1);

assign masterKey_data_V_address0 = tmp_35_cast_fu_615_p1;

assign next_mul1_fu_663_p2 = (8'd44 + phi_mul1_reg_283);

assign next_mul2_fu_782_p2 = (8'd44 + phi_mul2_reg_555);

assign next_mul_fu_620_p2 = (phi_mul_reg_157 + 8'd44);

assign p_lshr_f_cast_fu_728_p4 = {{col1_reg_216[5:2]}};

assign r_V_fu_831_p2 = (rhs_V_reg_983 ^ expandedKey_V_q0);

assign rcon_V_address0 = tmp_3_fu_744_p1;

assign rhs_V_fu_807_p5 = row3_reg_544[1:0];

assign row_1_fu_657_p2 = (row2_reg_272 + 3'd1);

assign row_2_fu_776_p2 = (row3_reg_544 + 3'd1);

assign row_fu_592_p2 = (row_assign_reg_146 + 3'd1);

assign sbox_V_address0 = tmp_4_i_fu_723_p1;

assign temp_0_V_2_fu_749_p2 = (temp_0_V_3_reg_399 ^ rcon_V_q0);

assign tmp_10_fu_788_p2 = (tmp_6_cast_reg_955 + phi_mul2_reg_555);

assign tmp_11_fu_798_p2 = (tmp_9_cast_reg_950 + phi_mul2_reg_555);

assign tmp_2_fu_760_p2 = ($signed(col1_reg_216) + $signed(6'd60));

assign tmp_32_fu_679_p1 = row2_reg_272[1:0];

assign tmp_33_fu_705_p1 = i_i_reg_410[1:0];

assign tmp_34_cast_fu_606_p1 = tmp_4_fu_598_p3;

assign tmp_35_cast_fu_615_p1 = tmp_5_fu_610_p2;

assign tmp_37_cast_fu_631_p1 = tmp_6_reg_873;

assign tmp_39_cast_fu_674_p1 = tmp_8_fu_669_p2;

assign tmp_3_fu_744_p1 = addconv_fu_738_p2;

assign tmp_41_cast_fu_793_p1 = tmp_10_fu_788_p2;

assign tmp_42_cast_fu_827_p1 = tmp_11_reg_978;

assign tmp_4_cast_fu_647_p1 = tmp_s_fu_641_p2;

assign tmp_4_fu_598_p3 = {{row_assign_reg_146}, {2'd0}};

assign tmp_4_i_fu_723_p1 = tmp_9_fu_709_p6;

assign tmp_5_fu_610_p2 = (tmp_cast_reg_850 + tmp_34_cast_fu_606_p1);

assign tmp_6_cast_fu_766_p1 = tmp_2_fu_760_p2;

assign tmp_6_fu_626_p2 = (tmp_cast1_reg_845 + phi_mul_reg_157);

assign tmp_7_fu_687_p2 = ((tmp_fu_683_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_669_p2 = (tmp_4_cast_reg_881 + phi_mul1_reg_283);

assign tmp_9_cast_fu_756_p1 = col1_reg_216;

assign tmp_9_fu_709_p5 = i_i_reg_410[1:0];

assign tmp_cast1_fu_578_p1 = col_assign_reg_135;

assign tmp_cast_fu_582_p1 = col_assign_reg_135;

assign tmp_fu_683_p1 = col1_reg_216[1:0];

assign tmp_s_fu_641_p2 = ($signed(col1_reg_216) + $signed(6'd63));

always @ (posedge ap_clk) begin
    tmp_cast1_reg_845[7:3] <= 5'b00000;
    tmp_cast_reg_850[5:3] <= 3'b000;
    tmp_4_cast_reg_881[7:6] <= 2'b00;
    tmp_9_cast_reg_950[7:6] <= 2'b00;
    tmp_6_cast_reg_955[7:6] <= 2'b00;
end

endmodule //keyExpansion5
