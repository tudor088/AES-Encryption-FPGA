// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module aesEncrypt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_data_V_address0,
        state_data_V_ce0,
        state_data_V_we0,
        state_data_V_d0,
        state_data_V_q0,
        state_data_V_address1,
        state_data_V_ce1,
        state_data_V_we1,
        state_data_V_d1,
        state_data_V_q1,
        masterKey_data_V_address0,
        masterKey_data_V_ce0,
        masterKey_data_V_q0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_data_V_address0;
output   state_data_V_ce0;
output   state_data_V_we0;
output  [7:0] state_data_V_d0;
input  [7:0] state_data_V_q0;
output  [3:0] state_data_V_address1;
output   state_data_V_ce1;
output   state_data_V_we1;
output  [7:0] state_data_V_d1;
input  [7:0] state_data_V_q1;
output  [3:0] masterKey_data_V_address0;
output   masterKey_data_V_ce0;
input  [7:0] masterKey_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_data_V_address0;
reg state_data_V_ce0;
reg state_data_V_we0;
reg[7:0] state_data_V_d0;
reg[3:0] state_data_V_address1;
reg state_data_V_ce1;
reg state_data_V_we1;
reg[7:0] state_data_V_d1;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_324_p2;
reg   [2:0] i_reg_614;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_43_cast_fu_338_p1;
reg   [5:0] tmp_43_cast_reg_619;
wire   [0:0] exitcond11_i_fu_318_p2;
wire   [2:0] j_fu_348_p2;
wire    ap_CS_fsm_state4;
wire   [7:0] next_mul_fu_368_p2;
reg   [7:0] next_mul_reg_632;
wire    ap_CS_fsm_state5;
wire   [2:0] row_3_fu_380_p2;
reg   [2:0] row_3_reg_640;
wire   [5:0] tmp_46_cast_fu_394_p1;
reg   [5:0] tmp_46_cast_reg_645;
wire   [0:0] exitcond9_fu_374_p2;
wire   [2:0] col_fu_404_p2;
reg   [2:0] col_reg_653;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond8_fu_398_p2;
wire   [5:0] tmp_15_fu_429_p2;
reg   [5:0] tmp_15_reg_663;
wire   [5:0] tmp_12_fu_444_p3;
reg   [5:0] tmp_12_reg_671;
wire    ap_CS_fsm_state18;
wire    grp_mixColumns_fu_263_ap_idle;
wire    grp_mixColumns_fu_263_ap_ready;
wire    grp_mixColumns_fu_263_ap_done;
wire   [7:0] next_mul4_fu_452_p2;
reg   [7:0] next_mul4_reg_676;
wire    ap_CS_fsm_state19;
wire   [2:0] row_4_fu_464_p2;
reg   [2:0] row_4_reg_684;
wire   [5:0] tmp_55_cast_fu_478_p1;
reg   [5:0] tmp_55_cast_reg_689;
wire   [0:0] exitcond6_fu_458_p2;
wire   [3:0] round_1_fu_482_p2;
reg   [3:0] round_1_reg_694;
wire   [2:0] col_3_fu_498_p2;
reg   [2:0] col_3_reg_702;
wire    ap_CS_fsm_state20;
wire   [0:0] exitcond5_fu_492_p2;
wire   [5:0] tmp_23_fu_524_p2;
reg   [5:0] tmp_23_reg_712;
wire   [7:0] next_mul3_fu_533_p2;
reg   [7:0] next_mul3_reg_717;
wire    ap_CS_fsm_state30;
wire   [2:0] row_fu_545_p2;
reg   [2:0] row_reg_725;
wire   [5:0] tmp_52_cast_fu_559_p1;
reg   [5:0] tmp_52_cast_reg_730;
wire   [0:0] exitcond4_fu_539_p2;
wire   [2:0] col_2_fu_569_p2;
reg   [2:0] col_2_reg_738;
wire    ap_CS_fsm_state31;
wire   [0:0] exitcond_fu_563_p2;
wire   [5:0] tmp_21_fu_602_p2;
reg   [5:0] tmp_21_reg_748;
reg   [7:0] expandedKey_address0;
reg    expandedKey_ce0;
reg    expandedKey_we0;
wire   [7:0] expandedKey_q0;
reg   [3:0] roundKey_data_V_address0;
reg    roundKey_data_V_ce0;
reg    roundKey_data_V_we0;
reg   [7:0] roundKey_data_V_d0;
wire   [7:0] roundKey_data_V_q0;
reg    roundKey_data_V_ce1;
wire   [7:0] roundKey_data_V_q1;
wire    grp_mixColumns_fu_263_ap_start;
wire   [3:0] grp_mixColumns_fu_263_state_data_V_address0;
wire    grp_mixColumns_fu_263_state_data_V_ce0;
wire    grp_mixColumns_fu_263_state_data_V_we0;
wire   [7:0] grp_mixColumns_fu_263_state_data_V_d0;
wire   [3:0] grp_mixColumns_fu_263_state_data_V_address1;
wire    grp_mixColumns_fu_263_state_data_V_ce1;
wire    grp_mixColumns_fu_263_state_data_V_we1;
wire   [7:0] grp_mixColumns_fu_263_state_data_V_d1;
wire    grp_keyExpansion5_fu_273_ap_start;
wire    grp_keyExpansion5_fu_273_ap_done;
wire    grp_keyExpansion5_fu_273_ap_idle;
wire    grp_keyExpansion5_fu_273_ap_ready;
wire   [3:0] grp_keyExpansion5_fu_273_masterKey_data_V_address0;
wire    grp_keyExpansion5_fu_273_masterKey_data_V_ce0;
wire   [7:0] grp_keyExpansion5_fu_273_expandedKey_V_address0;
wire    grp_keyExpansion5_fu_273_expandedKey_V_ce0;
wire    grp_keyExpansion5_fu_273_expandedKey_V_we0;
wire   [7:0] grp_keyExpansion5_fu_273_expandedKey_V_d0;
wire    grp_addRoundKey4_fu_285_ap_start;
wire    grp_addRoundKey4_fu_285_ap_done;
wire    grp_addRoundKey4_fu_285_ap_idle;
wire    grp_addRoundKey4_fu_285_ap_ready;
wire   [3:0] grp_addRoundKey4_fu_285_state_data_V_address0;
wire    grp_addRoundKey4_fu_285_state_data_V_ce0;
wire    grp_addRoundKey4_fu_285_state_data_V_we0;
wire   [7:0] grp_addRoundKey4_fu_285_state_data_V_d0;
wire   [3:0] grp_addRoundKey4_fu_285_state_data_V_address1;
wire    grp_addRoundKey4_fu_285_state_data_V_ce1;
wire    grp_addRoundKey4_fu_285_state_data_V_we1;
wire   [7:0] grp_addRoundKey4_fu_285_state_data_V_d1;
wire   [3:0] grp_addRoundKey4_fu_285_roundKey_data_V_address0;
wire    grp_addRoundKey4_fu_285_roundKey_data_V_ce0;
wire   [3:0] grp_addRoundKey4_fu_285_roundKey_data_V_address1;
wire    grp_addRoundKey4_fu_285_roundKey_data_V_ce1;
wire    grp_substituteBytes_fu_292_ap_start;
wire    grp_substituteBytes_fu_292_ap_done;
wire    grp_substituteBytes_fu_292_ap_idle;
wire    grp_substituteBytes_fu_292_ap_ready;
wire   [3:0] grp_substituteBytes_fu_292_state_data_V_address0;
wire    grp_substituteBytes_fu_292_state_data_V_ce0;
wire    grp_substituteBytes_fu_292_state_data_V_we0;
wire   [7:0] grp_substituteBytes_fu_292_state_data_V_d0;
wire   [3:0] grp_substituteBytes_fu_292_state_data_V_address1;
wire    grp_substituteBytes_fu_292_state_data_V_ce1;
wire    grp_substituteBytes_fu_292_state_data_V_we1;
wire   [7:0] grp_substituteBytes_fu_292_state_data_V_d1;
wire    grp_shiftRowLeft_fu_300_ap_start;
wire    grp_shiftRowLeft_fu_300_ap_done;
wire    grp_shiftRowLeft_fu_300_ap_idle;
wire    grp_shiftRowLeft_fu_300_ap_ready;
wire   [3:0] grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0;
wire    grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0;
wire    grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0;
wire   [7:0] grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0;
reg   [3:0] grp_shiftRowLeft_fu_300_row;
reg   [3:0] grp_shiftRowLeft_fu_300_shiftAmount;
wire    grp_shiftRowRight_fu_312_ap_start;
wire    grp_shiftRowRight_fu_312_ap_done;
wire    grp_shiftRowRight_fu_312_ap_idle;
wire    grp_shiftRowRight_fu_312_ap_ready;
wire   [3:0] grp_shiftRowRight_fu_312_AESMatrix_data_V_address0;
wire    grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0;
wire    grp_shiftRowRight_fu_312_AESMatrix_data_V_we0;
wire   [7:0] grp_shiftRowRight_fu_312_AESMatrix_data_V_d0;
reg   [2:0] i_0_i_reg_127;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_i_fu_342_p2;
reg   [2:0] j_0_i_reg_138;
reg   [2:0] row_assign_reg_149;
reg   [7:0] phi_mul_reg_160;
reg   [2:0] col_assign_reg_172;
wire    ap_CS_fsm_state7;
reg   [3:0] round_reg_183;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state22;
reg   [2:0] row_assign_2_reg_195;
reg   [7:0] phi_mul4_reg_206;
reg   [2:0] col_assign_2_reg_218;
wire    ap_CS_fsm_state21;
reg   [2:0] row_assign_1_reg_229;
wire    ap_CS_fsm_state29;
reg   [7:0] phi_mul3_reg_240;
reg   [2:0] col_assign_1_reg_252;
wire    ap_CS_fsm_state32;
reg    grp_mixColumns_fu_263_ap_start_reg;
wire    ap_CS_fsm_state17;
reg    grp_keyExpansion5_fu_273_ap_start_reg;
reg    grp_addRoundKey4_fu_285_ap_start_reg;
wire    ap_CS_fsm_state33;
reg    grp_substituteBytes_fu_292_ap_start_reg;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond7_fu_438_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state23;
reg    grp_shiftRowLeft_fu_300_ap_start_reg;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
reg    grp_shiftRowRight_fu_312_ap_start_reg;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state16;
wire   [63:0] tmp_47_cast_fu_363_p1;
wire   [63:0] tmp_48_cast_fu_424_p1;
wire   [63:0] tmp_49_cast_fu_434_p1;
wire   [63:0] tmp_58_cast_fu_519_p1;
wire   [63:0] tmp_59_cast_fu_529_p1;
wire   [63:0] tmp_56_cast_fu_593_p1;
wire   [63:0] tmp_57_cast_fu_607_p1;
wire   [4:0] tmp_fu_330_p3;
wire   [5:0] tmp_11_cast_fu_354_p1;
wire   [5:0] tmp_13_fu_358_p2;
wire   [4:0] tmp_s_fu_386_p3;
wire   [7:0] tmp_13_cast_fu_414_p1;
wire   [7:0] tmp_14_fu_418_p2;
wire   [5:0] tmp_13_cast1_fu_410_p1;
wire   [4:0] tmp_19_fu_470_p3;
wire   [5:0] col_assign_2_cast5_fu_488_p1;
wire   [5:0] tmp_18_fu_504_p2;
wire   [7:0] tmp_19_cast_fu_509_p1;
wire   [7:0] tmp_22_fu_513_p2;
wire   [4:0] tmp_17_fu_551_p3;
wire   [5:0] tmp_16_fu_575_p3;
wire   [7:0] tmp_17_cast_fu_583_p1;
wire   [7:0] tmp_20_fu_587_p2;
wire   [5:0] tmp_i6_cast_fu_598_p1;
reg   [32:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
#0 grp_mixColumns_fu_263_ap_start_reg = 1'b0;
#0 grp_keyExpansion5_fu_273_ap_start_reg = 1'b0;
#0 grp_addRoundKey4_fu_285_ap_start_reg = 1'b0;
#0 grp_substituteBytes_fu_292_ap_start_reg = 1'b0;
#0 grp_shiftRowLeft_fu_300_ap_start_reg = 1'b0;
#0 grp_shiftRowRight_fu_312_ap_start_reg = 1'b0;
end

aesEncrypt_expandhbi #(
    .DataWidth( 8 ),
    .AddressRange( 176 ),
    .AddressWidth( 8 ))
expandedKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(expandedKey_address0),
    .ce0(expandedKey_ce0),
    .we0(expandedKey_we0),
    .d0(grp_keyExpansion5_fu_273_expandedKey_V_d0),
    .q0(expandedKey_q0)
);

aesEncrypt_roundKibs #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
roundKey_data_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(roundKey_data_V_address0),
    .ce0(roundKey_data_V_ce0),
    .we0(roundKey_data_V_we0),
    .d0(roundKey_data_V_d0),
    .q0(roundKey_data_V_q0),
    .address1(grp_addRoundKey4_fu_285_roundKey_data_V_address1),
    .ce1(roundKey_data_V_ce1),
    .q1(roundKey_data_V_q1)
);

mixColumns grp_mixColumns_fu_263(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_mixColumns_fu_263_ap_start),
    .ap_done(grp_mixColumns_fu_263_ap_done),
    .ap_idle(grp_mixColumns_fu_263_ap_idle),
    .ap_ready(grp_mixColumns_fu_263_ap_ready),
    .state_data_V_address0(grp_mixColumns_fu_263_state_data_V_address0),
    .state_data_V_ce0(grp_mixColumns_fu_263_state_data_V_ce0),
    .state_data_V_we0(grp_mixColumns_fu_263_state_data_V_we0),
    .state_data_V_d0(grp_mixColumns_fu_263_state_data_V_d0),
    .state_data_V_q0(state_data_V_q0),
    .state_data_V_address1(grp_mixColumns_fu_263_state_data_V_address1),
    .state_data_V_ce1(grp_mixColumns_fu_263_state_data_V_ce1),
    .state_data_V_we1(grp_mixColumns_fu_263_state_data_V_we1),
    .state_data_V_d1(grp_mixColumns_fu_263_state_data_V_d1),
    .state_data_V_q1(state_data_V_q1)
);

keyExpansion5 grp_keyExpansion5_fu_273(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_keyExpansion5_fu_273_ap_start),
    .ap_done(grp_keyExpansion5_fu_273_ap_done),
    .ap_idle(grp_keyExpansion5_fu_273_ap_idle),
    .ap_ready(grp_keyExpansion5_fu_273_ap_ready),
    .masterKey_data_V_address0(grp_keyExpansion5_fu_273_masterKey_data_V_address0),
    .masterKey_data_V_ce0(grp_keyExpansion5_fu_273_masterKey_data_V_ce0),
    .masterKey_data_V_q0(masterKey_data_V_q0),
    .expandedKey_V_address0(grp_keyExpansion5_fu_273_expandedKey_V_address0),
    .expandedKey_V_ce0(grp_keyExpansion5_fu_273_expandedKey_V_ce0),
    .expandedKey_V_we0(grp_keyExpansion5_fu_273_expandedKey_V_we0),
    .expandedKey_V_d0(grp_keyExpansion5_fu_273_expandedKey_V_d0),
    .expandedKey_V_q0(expandedKey_q0)
);

addRoundKey4 grp_addRoundKey4_fu_285(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_addRoundKey4_fu_285_ap_start),
    .ap_done(grp_addRoundKey4_fu_285_ap_done),
    .ap_idle(grp_addRoundKey4_fu_285_ap_idle),
    .ap_ready(grp_addRoundKey4_fu_285_ap_ready),
    .state_data_V_address0(grp_addRoundKey4_fu_285_state_data_V_address0),
    .state_data_V_ce0(grp_addRoundKey4_fu_285_state_data_V_ce0),
    .state_data_V_we0(grp_addRoundKey4_fu_285_state_data_V_we0),
    .state_data_V_d0(grp_addRoundKey4_fu_285_state_data_V_d0),
    .state_data_V_q0(state_data_V_q0),
    .state_data_V_address1(grp_addRoundKey4_fu_285_state_data_V_address1),
    .state_data_V_ce1(grp_addRoundKey4_fu_285_state_data_V_ce1),
    .state_data_V_we1(grp_addRoundKey4_fu_285_state_data_V_we1),
    .state_data_V_d1(grp_addRoundKey4_fu_285_state_data_V_d1),
    .state_data_V_q1(state_data_V_q1),
    .roundKey_data_V_address0(grp_addRoundKey4_fu_285_roundKey_data_V_address0),
    .roundKey_data_V_ce0(grp_addRoundKey4_fu_285_roundKey_data_V_ce0),
    .roundKey_data_V_q0(roundKey_data_V_q0),
    .roundKey_data_V_address1(grp_addRoundKey4_fu_285_roundKey_data_V_address1),
    .roundKey_data_V_ce1(grp_addRoundKey4_fu_285_roundKey_data_V_ce1),
    .roundKey_data_V_q1(roundKey_data_V_q1)
);

substituteBytes grp_substituteBytes_fu_292(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_substituteBytes_fu_292_ap_start),
    .ap_done(grp_substituteBytes_fu_292_ap_done),
    .ap_idle(grp_substituteBytes_fu_292_ap_idle),
    .ap_ready(grp_substituteBytes_fu_292_ap_ready),
    .state_data_V_address0(grp_substituteBytes_fu_292_state_data_V_address0),
    .state_data_V_ce0(grp_substituteBytes_fu_292_state_data_V_ce0),
    .state_data_V_we0(grp_substituteBytes_fu_292_state_data_V_we0),
    .state_data_V_d0(grp_substituteBytes_fu_292_state_data_V_d0),
    .state_data_V_q0(state_data_V_q0),
    .state_data_V_address1(grp_substituteBytes_fu_292_state_data_V_address1),
    .state_data_V_ce1(grp_substituteBytes_fu_292_state_data_V_ce1),
    .state_data_V_we1(grp_substituteBytes_fu_292_state_data_V_we1),
    .state_data_V_d1(grp_substituteBytes_fu_292_state_data_V_d1),
    .state_data_V_q1(state_data_V_q1)
);

shiftRowLeft grp_shiftRowLeft_fu_300(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_shiftRowLeft_fu_300_ap_start),
    .ap_done(grp_shiftRowLeft_fu_300_ap_done),
    .ap_idle(grp_shiftRowLeft_fu_300_ap_idle),
    .ap_ready(grp_shiftRowLeft_fu_300_ap_ready),
    .AESMatrix_data_V_address0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0),
    .AESMatrix_data_V_ce0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0),
    .AESMatrix_data_V_we0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0),
    .AESMatrix_data_V_d0(grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0),
    .AESMatrix_data_V_q0(state_data_V_q0),
    .row(grp_shiftRowLeft_fu_300_row),
    .shiftAmount(grp_shiftRowLeft_fu_300_shiftAmount)
);

shiftRowRight grp_shiftRowRight_fu_312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_shiftRowRight_fu_312_ap_start),
    .ap_done(grp_shiftRowRight_fu_312_ap_done),
    .ap_idle(grp_shiftRowRight_fu_312_ap_idle),
    .ap_ready(grp_shiftRowRight_fu_312_ap_ready),
    .AESMatrix_data_V_address0(grp_shiftRowRight_fu_312_AESMatrix_data_V_address0),
    .AESMatrix_data_V_ce0(grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0),
    .AESMatrix_data_V_we0(grp_shiftRowRight_fu_312_AESMatrix_data_V_we0),
    .AESMatrix_data_V_d0(grp_shiftRowRight_fu_312_AESMatrix_data_V_d0),
    .AESMatrix_data_V_q0(state_data_V_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_addRoundKey4_fu_285_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state5) & (exitcond9_fu_374_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state30) & (exitcond4_fu_539_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state19) & (exitcond6_fu_458_p2 == 1'd1)))) begin
            grp_addRoundKey4_fu_285_ap_start_reg <= 1'b1;
        end else if ((grp_addRoundKey4_fu_285_ap_ready == 1'b1)) begin
            grp_addRoundKey4_fu_285_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_keyExpansion5_fu_273_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_keyExpansion5_fu_273_ap_start_reg <= 1'b1;
        end else if ((grp_keyExpansion5_fu_273_ap_ready == 1'b1)) begin
            grp_keyExpansion5_fu_273_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_mixColumns_fu_263_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state17)) begin
            grp_mixColumns_fu_263_ap_start_reg <= 1'b1;
        end else if ((grp_mixColumns_fu_263_ap_ready == 1'b1)) begin
            grp_mixColumns_fu_263_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_shiftRowLeft_fu_300_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
            grp_shiftRowLeft_fu_300_ap_start_reg <= 1'b1;
        end else if ((grp_shiftRowLeft_fu_300_ap_ready == 1'b1)) begin
            grp_shiftRowLeft_fu_300_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_shiftRowRight_fu_312_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state15))) begin
            grp_shiftRowRight_fu_312_ap_start_reg <= 1'b1;
        end else if ((grp_shiftRowRight_fu_312_ap_ready == 1'b1)) begin
            grp_shiftRowRight_fu_312_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_substituteBytes_fu_292_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & (exitcond7_fu_438_p2 == 1'd1)) | ((exitcond7_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9)))) begin
            grp_substituteBytes_fu_292_ap_start_reg <= 1'b1;
        end else if ((grp_substituteBytes_fu_292_ap_ready == 1'b1)) begin
            grp_substituteBytes_fu_292_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        col_assign_1_reg_252 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        col_assign_1_reg_252 <= col_2_reg_738;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        col_assign_2_reg_218 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        col_assign_2_reg_218 <= col_3_reg_702;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        col_assign_reg_172 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        col_assign_reg_172 <= col_reg_653;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_342_p2 == 1'd1))) begin
        i_0_i_reg_127 <= i_reg_614;
    end else if (((grp_keyExpansion5_fu_273_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_i_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_i_reg_138 <= 3'd0;
    end else if (((exitcond_i_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_i_reg_138 <= j_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond_fu_563_p2 == 1'd1))) begin
        phi_mul3_reg_240 <= next_mul3_reg_717;
    end else if (((grp_shiftRowRight_fu_312_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        phi_mul3_reg_240 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond5_fu_492_p2 == 1'd1))) begin
        phi_mul4_reg_206 <= next_mul4_reg_676;
    end else if (((1'b1 == ap_CS_fsm_state18) & (grp_mixColumns_fu_263_ap_done == 1'b1))) begin
        phi_mul4_reg_206 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_160 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond8_fu_398_p2 == 1'd1))) begin
        phi_mul_reg_160 <= next_mul_reg_632;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_addRoundKey4_fu_285_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state22)) begin
            round_reg_183 <= round_1_reg_694;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            round_reg_183 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) & (exitcond_fu_563_p2 == 1'd1))) begin
        row_assign_1_reg_229 <= row_reg_725;
    end else if (((grp_shiftRowRight_fu_312_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
        row_assign_1_reg_229 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (exitcond5_fu_492_p2 == 1'd1))) begin
        row_assign_2_reg_195 <= row_4_reg_684;
    end else if (((1'b1 == ap_CS_fsm_state18) & (grp_mixColumns_fu_263_ap_done == 1'b1))) begin
        row_assign_2_reg_195 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_assign_reg_149 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond8_fu_398_p2 == 1'd1))) begin
        row_assign_reg_149 <= row_3_reg_640;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        col_2_reg_738 <= col_2_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        col_3_reg_702 <= col_3_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        col_reg_653 <= col_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_614 <= i_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        next_mul3_reg_717 <= next_mul3_fu_533_p2;
        row_reg_725 <= row_fu_545_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        next_mul4_reg_676 <= next_mul4_fu_452_p2;
        row_4_reg_684 <= row_4_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        next_mul_reg_632 <= next_mul_fu_368_p2;
        row_3_reg_640 <= row_3_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond6_fu_458_p2 == 1'd1))) begin
        round_1_reg_694 <= round_1_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & (grp_mixColumns_fu_263_ap_done == 1'b1))) begin
        tmp_12_reg_671[5 : 2] <= tmp_12_fu_444_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_398_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_15_reg_663 <= tmp_15_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_563_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state31))) begin
        tmp_21_reg_748 <= tmp_21_fu_602_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond5_fu_492_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp_23_reg_712 <= tmp_23_fu_524_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond11_i_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_43_cast_reg_619[4 : 2] <= tmp_43_cast_fu_338_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond9_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_46_cast_reg_645[4 : 2] <= tmp_46_cast_fu_394_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        tmp_52_cast_reg_730[4 : 2] <= tmp_52_cast_fu_559_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond6_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        tmp_55_cast_reg_689[4 : 2] <= tmp_55_cast_fu_478_p1[4 : 2];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((grp_addRoundKey4_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_addRoundKey4_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        expandedKey_address0 = tmp_56_cast_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        expandedKey_address0 = tmp_58_cast_fu_519_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        expandedKey_address0 = tmp_48_cast_fu_424_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_address0 = grp_keyExpansion5_fu_273_expandedKey_V_address0;
    end else begin
        expandedKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state6))) begin
        expandedKey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_ce0 = grp_keyExpansion5_fu_273_expandedKey_V_ce0;
    end else begin
        expandedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        expandedKey_we0 = grp_keyExpansion5_fu_273_expandedKey_V_we0;
    end else begin
        expandedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_shiftRowLeft_fu_300_row = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_shiftRowLeft_fu_300_row = 4'd1;
    end else begin
        grp_shiftRowLeft_fu_300_row = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_shiftRowLeft_fu_300_shiftAmount = 4'd2;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state12))) begin
        grp_shiftRowLeft_fu_300_shiftAmount = 4'd1;
    end else begin
        grp_shiftRowLeft_fu_300_shiftAmount = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        roundKey_data_V_address0 = tmp_57_cast_fu_607_p1;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        roundKey_data_V_address0 = tmp_59_cast_fu_529_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        roundKey_data_V_address0 = tmp_49_cast_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_data_V_address0 = tmp_47_cast_fu_363_p1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        roundKey_data_V_address0 = grp_addRoundKey4_fu_285_roundKey_data_V_address0;
    end else begin
        roundKey_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7))) begin
        roundKey_data_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        roundKey_data_V_ce0 = grp_addRoundKey4_fu_285_roundKey_data_V_ce0;
    end else begin
        roundKey_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        roundKey_data_V_ce1 = grp_addRoundKey4_fu_285_roundKey_data_V_ce1;
    end else begin
        roundKey_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7))) begin
        roundKey_data_V_d0 = expandedKey_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        roundKey_data_V_d0 = 8'd0;
    end else begin
        roundKey_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state7) | ((exitcond_i_fu_342_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)))) begin
        roundKey_data_V_we0 = 1'b1;
    end else begin
        roundKey_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29))) begin
        state_data_V_address0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        state_data_V_address0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_address0 = grp_substituteBytes_fu_292_state_data_V_address0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_address0 = grp_addRoundKey4_fu_285_state_data_V_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_address0 = grp_mixColumns_fu_263_state_data_V_address0;
    end else begin
        state_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_address1 = grp_substituteBytes_fu_292_state_data_V_address1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_address1 = grp_addRoundKey4_fu_285_state_data_V_address1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_address1 = grp_mixColumns_fu_263_state_data_V_address1;
    end else begin
        state_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29))) begin
        state_data_V_ce0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        state_data_V_ce0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_ce0 = grp_substituteBytes_fu_292_state_data_V_ce0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_ce0 = grp_addRoundKey4_fu_285_state_data_V_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_ce0 = grp_mixColumns_fu_263_state_data_V_ce0;
    end else begin
        state_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_ce1 = grp_substituteBytes_fu_292_state_data_V_ce1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_ce1 = grp_addRoundKey4_fu_285_state_data_V_ce1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_ce1 = grp_mixColumns_fu_263_state_data_V_ce1;
    end else begin
        state_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29))) begin
        state_data_V_d0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        state_data_V_d0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_d0 = grp_substituteBytes_fu_292_state_data_V_d0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_d0 = grp_addRoundKey4_fu_285_state_data_V_d0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_d0 = grp_mixColumns_fu_263_state_data_V_d0;
    end else begin
        state_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_d1 = grp_substituteBytes_fu_292_state_data_V_d1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_d1 = grp_addRoundKey4_fu_285_state_data_V_d1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_d1 = grp_mixColumns_fu_263_state_data_V_d1;
    end else begin
        state_data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state29))) begin
        state_data_V_we0 = grp_shiftRowRight_fu_312_AESMatrix_data_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        state_data_V_we0 = grp_shiftRowLeft_fu_300_AESMatrix_data_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we0 = grp_substituteBytes_fu_292_state_data_V_we0;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_we0 = grp_addRoundKey4_fu_285_state_data_V_we0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_we0 = grp_mixColumns_fu_263_state_data_V_we0;
    end else begin
        state_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we1 = grp_substituteBytes_fu_292_state_data_V_we1;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state8))) begin
        state_data_V_we1 = grp_addRoundKey4_fu_285_state_data_V_we1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_data_V_we1 = grp_mixColumns_fu_263_state_data_V_we1;
    end else begin
        state_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_keyExpansion5_fu_273_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond11_i_fu_318_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_342_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((exitcond9_fu_374_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond8_fu_398_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((grp_addRoundKey4_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond7_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((grp_substituteBytes_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if (((grp_shiftRowLeft_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_shiftRowLeft_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((grp_shiftRowRight_fu_312_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_mixColumns_fu_263_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((exitcond6_fu_458_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (exitcond5_fu_492_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state22 : begin
            if (((grp_addRoundKey4_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((grp_substituteBytes_fu_292_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((grp_shiftRowLeft_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_shiftRowLeft_fu_300_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if (((grp_shiftRowRight_fu_312_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((exitcond4_fu_539_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (exitcond_fu_563_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state33 : begin
            if (((grp_addRoundKey4_fu_285_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign col_2_fu_569_p2 = (col_assign_1_reg_252 + 3'd1);

assign col_3_fu_498_p2 = (col_assign_2_reg_218 + 3'd1);

assign col_assign_2_cast5_fu_488_p1 = col_assign_2_reg_218;

assign col_fu_404_p2 = (col_assign_reg_172 + 3'd1);

assign exitcond11_i_fu_318_p2 = ((i_0_i_reg_127 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_539_p2 = ((row_assign_1_reg_229 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond5_fu_492_p2 = ((col_assign_2_reg_218 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond6_fu_458_p2 = ((row_assign_2_reg_195 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond7_fu_438_p2 = ((round_reg_183 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond8_fu_398_p2 = ((col_assign_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond9_fu_374_p2 = ((row_assign_reg_149 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_563_p2 = ((col_assign_1_reg_252 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_342_p2 = ((j_0_i_reg_138 == 3'd4) ? 1'b1 : 1'b0);

assign grp_addRoundKey4_fu_285_ap_start = grp_addRoundKey4_fu_285_ap_start_reg;

assign grp_keyExpansion5_fu_273_ap_start = grp_keyExpansion5_fu_273_ap_start_reg;

assign grp_mixColumns_fu_263_ap_start = grp_mixColumns_fu_263_ap_start_reg;

assign grp_shiftRowLeft_fu_300_ap_start = grp_shiftRowLeft_fu_300_ap_start_reg;

assign grp_shiftRowRight_fu_312_ap_start = grp_shiftRowRight_fu_312_ap_start_reg;

assign grp_substituteBytes_fu_292_ap_start = grp_substituteBytes_fu_292_ap_start_reg;

assign i_fu_324_p2 = (i_0_i_reg_127 + 3'd1);

assign j_fu_348_p2 = (j_0_i_reg_138 + 3'd1);

assign masterKey_data_V_address0 = grp_keyExpansion5_fu_273_masterKey_data_V_address0;

assign masterKey_data_V_ce0 = grp_keyExpansion5_fu_273_masterKey_data_V_ce0;

assign next_mul3_fu_533_p2 = (phi_mul3_reg_240 + 8'd44);

assign next_mul4_fu_452_p2 = (phi_mul4_reg_206 + 8'd44);

assign next_mul_fu_368_p2 = (phi_mul_reg_160 + 8'd44);

assign round_1_fu_482_p2 = (round_reg_183 + 4'd1);

assign row_3_fu_380_p2 = (row_assign_reg_149 + 3'd1);

assign row_4_fu_464_p2 = (row_assign_2_reg_195 + 3'd1);

assign row_fu_545_p2 = (row_assign_1_reg_229 + 3'd1);

assign tmp_11_cast_fu_354_p1 = j_0_i_reg_138;

assign tmp_12_fu_444_p3 = {{round_reg_183}, {2'd0}};

assign tmp_13_cast1_fu_410_p1 = col_assign_reg_172;

assign tmp_13_cast_fu_414_p1 = col_assign_reg_172;

assign tmp_13_fu_358_p2 = (tmp_43_cast_reg_619 + tmp_11_cast_fu_354_p1);

assign tmp_14_fu_418_p2 = (phi_mul_reg_160 + tmp_13_cast_fu_414_p1);

assign tmp_15_fu_429_p2 = (tmp_46_cast_reg_645 + tmp_13_cast1_fu_410_p1);

assign tmp_16_fu_575_p3 = {{3'd5}, {col_assign_1_reg_252}};

assign tmp_17_cast_fu_583_p1 = tmp_16_fu_575_p3;

assign tmp_17_fu_551_p3 = {{row_assign_1_reg_229}, {2'd0}};

assign tmp_18_fu_504_p2 = (tmp_12_reg_671 + col_assign_2_cast5_fu_488_p1);

assign tmp_19_cast_fu_509_p1 = tmp_18_fu_504_p2;

assign tmp_19_fu_470_p3 = {{row_assign_2_reg_195}, {2'd0}};

assign tmp_20_fu_587_p2 = (phi_mul3_reg_240 + tmp_17_cast_fu_583_p1);

assign tmp_21_fu_602_p2 = (tmp_52_cast_reg_730 + tmp_i6_cast_fu_598_p1);

assign tmp_22_fu_513_p2 = (phi_mul4_reg_206 + tmp_19_cast_fu_509_p1);

assign tmp_23_fu_524_p2 = (tmp_55_cast_reg_689 + col_assign_2_cast5_fu_488_p1);

assign tmp_43_cast_fu_338_p1 = tmp_fu_330_p3;

assign tmp_46_cast_fu_394_p1 = tmp_s_fu_386_p3;

assign tmp_47_cast_fu_363_p1 = tmp_13_fu_358_p2;

assign tmp_48_cast_fu_424_p1 = tmp_14_fu_418_p2;

assign tmp_49_cast_fu_434_p1 = tmp_15_reg_663;

assign tmp_52_cast_fu_559_p1 = tmp_17_fu_551_p3;

assign tmp_55_cast_fu_478_p1 = tmp_19_fu_470_p3;

assign tmp_56_cast_fu_593_p1 = tmp_20_fu_587_p2;

assign tmp_57_cast_fu_607_p1 = tmp_21_reg_748;

assign tmp_58_cast_fu_519_p1 = tmp_22_fu_513_p2;

assign tmp_59_cast_fu_529_p1 = tmp_23_reg_712;

assign tmp_fu_330_p3 = {{i_0_i_reg_127}, {2'd0}};

assign tmp_i6_cast_fu_598_p1 = col_assign_1_reg_252;

assign tmp_s_fu_386_p3 = {{row_assign_reg_149}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_43_cast_reg_619[1:0] <= 2'b00;
    tmp_43_cast_reg_619[5] <= 1'b0;
    tmp_46_cast_reg_645[1:0] <= 2'b00;
    tmp_46_cast_reg_645[5] <= 1'b0;
    tmp_12_reg_671[1:0] <= 2'b00;
    tmp_55_cast_reg_689[1:0] <= 2'b00;
    tmp_55_cast_reg_689[5] <= 1'b0;
    tmp_52_cast_reg_730[1:0] <= 2'b00;
    tmp_52_cast_reg_730[5] <= 1'b0;
end

endmodule //aesEncrypt
