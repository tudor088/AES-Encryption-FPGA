// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module addRoundKey4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_data_V_address0,
        state_data_V_ce0,
        state_data_V_we0,
        state_data_V_d0,
        state_data_V_q0,
        state_data_V_address1,
        state_data_V_ce1,
        state_data_V_we1,
        state_data_V_d1,
        state_data_V_q1,
        roundKey_data_V_address0,
        roundKey_data_V_ce0,
        roundKey_data_V_q0,
        roundKey_data_V_address1,
        roundKey_data_V_ce1,
        roundKey_data_V_q1
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_data_V_address0;
output   state_data_V_ce0;
output   state_data_V_we0;
output  [7:0] state_data_V_d0;
input  [7:0] state_data_V_q0;
output  [3:0] state_data_V_address1;
output   state_data_V_ce1;
output   state_data_V_we1;
output  [7:0] state_data_V_d1;
input  [7:0] state_data_V_q1;
output  [3:0] roundKey_data_V_address0;
output   roundKey_data_V_ce0;
input  [7:0] roundKey_data_V_q0;
output  [3:0] roundKey_data_V_address1;
output   roundKey_data_V_ce1;
input  [7:0] roundKey_data_V_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_data_V_address0;
reg state_data_V_ce0;
reg state_data_V_we0;
reg[7:0] state_data_V_d0;
reg[3:0] state_data_V_address1;
reg state_data_V_ce1;
reg state_data_V_we1;
reg[7:0] state_data_V_d1;
reg[3:0] roundKey_data_V_address0;
reg roundKey_data_V_ce0;
reg[3:0] roundKey_data_V_address1;
reg roundKey_data_V_ce1;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] reg_338;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state9;
reg   [7:0] reg_342;
wire   [3:0] state_data_V_addr_reg_432;
wire   [3:0] state_data_V_addr_46_reg_437;
wire   [3:0] state_data_V_addr_47_reg_442;
wire   [3:0] state_data_V_addr_48_reg_447;
wire   [3:0] state_data_V_addr_49_reg_452;
wire    ap_CS_fsm_state3;
wire   [3:0] state_data_V_addr_50_reg_457;
reg   [7:0] state_data_V_load_47_reg_462;
reg   [7:0] state_data_V_load_48_reg_467;
wire   [3:0] state_data_V_addr_51_reg_472;
wire    ap_CS_fsm_state4;
wire   [3:0] state_data_V_addr_52_reg_477;
reg   [7:0] state_data_V_load_49_reg_482;
reg   [7:0] state_data_V_load_50_reg_487;
wire   [3:0] state_data_V_addr_53_reg_492;
wire    ap_CS_fsm_state5;
wire   [3:0] state_data_V_addr_54_reg_497;
reg   [7:0] state_data_V_load_51_reg_502;
reg   [7:0] state_data_V_load_52_reg_507;
wire   [3:0] state_data_V_addr_55_reg_512;
wire    ap_CS_fsm_state6;
wire   [3:0] state_data_V_addr_56_reg_517;
reg   [7:0] state_data_V_load_53_reg_522;
reg   [7:0] state_data_V_load_54_reg_527;
wire   [3:0] state_data_V_addr_57_reg_532;
wire    ap_CS_fsm_state7;
wire   [3:0] state_data_V_addr_58_reg_537;
reg   [7:0] state_data_V_load_55_reg_542;
reg   [7:0] state_data_V_load_56_reg_547;
wire   [3:0] state_data_V_addr_59_reg_552;
wire    ap_CS_fsm_state8;
wire   [3:0] state_data_V_addr_60_reg_557;
reg   [7:0] state_data_V_load_57_reg_572;
reg   [7:0] state_data_V_load_58_reg_577;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [7:0] grp_fu_346_p2;
wire   [7:0] grp_fu_353_p2;
wire   [7:0] op2_V_read_assign_28_fu_360_p2;
wire   [7:0] op2_V_read_assign_29_fu_366_p2;
wire   [7:0] op2_V_read_assign_30_fu_372_p2;
wire   [7:0] op2_V_read_assign_31_fu_378_p2;
wire   [7:0] op2_V_read_assign_32_fu_384_p2;
wire   [7:0] op2_V_read_assign_33_fu_390_p2;
wire   [7:0] op2_V_read_assign_34_fu_396_p2;
wire   [7:0] op2_V_read_assign_35_fu_402_p2;
wire   [7:0] op2_V_read_assign_36_fu_408_p2;
wire   [7:0] op2_V_read_assign_37_fu_414_p2;
wire   [7:0] op2_V_read_assign_38_fu_420_p2;
wire   [7:0] op2_V_read_assign_39_fu_426_p2;
wire    ap_CS_fsm_state16;
reg   [15:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2))) begin
        reg_338 <= state_data_V_q0;
        reg_342 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_load_47_reg_462 <= state_data_V_q0;
        state_data_V_load_48_reg_467 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_load_49_reg_482 <= state_data_V_q0;
        state_data_V_load_50_reg_487 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_load_51_reg_502 <= state_data_V_q0;
        state_data_V_load_52_reg_507 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_load_53_reg_522 <= state_data_V_q0;
        state_data_V_load_54_reg_527 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_load_55_reg_542 <= state_data_V_q0;
        state_data_V_load_56_reg_547 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_load_57_reg_572 <= state_data_V_q0;
        state_data_V_load_58_reg_577 <= state_data_V_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        roundKey_data_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        roundKey_data_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        roundKey_data_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        roundKey_data_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        roundKey_data_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        roundKey_data_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_data_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_data_V_address0 = 64'd0;
    end else begin
        roundKey_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        roundKey_data_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        roundKey_data_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        roundKey_data_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        roundKey_data_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        roundKey_data_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        roundKey_data_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        roundKey_data_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        roundKey_data_V_address1 = 64'd1;
    end else begin
        roundKey_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        roundKey_data_V_ce0 = 1'b1;
    end else begin
        roundKey_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        roundKey_data_V_ce1 = 1'b1;
    end else begin
        roundKey_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_address0 = state_data_V_addr_59_reg_552;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_address0 = state_data_V_addr_57_reg_532;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_address0 = state_data_V_addr_55_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_address0 = state_data_V_addr_53_reg_492;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_address0 = state_data_V_addr_51_reg_472;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_address0 = state_data_V_addr_49_reg_452;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_address0 = state_data_V_addr_47_reg_442;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_address0 = state_data_V_addr_reg_432;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address0 = 64'd0;
    end else begin
        state_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        state_data_V_address1 = state_data_V_addr_60_reg_557;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_address1 = state_data_V_addr_58_reg_537;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_address1 = state_data_V_addr_56_reg_517;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_address1 = state_data_V_addr_54_reg_497;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_address1 = state_data_V_addr_52_reg_477;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_address1 = state_data_V_addr_50_reg_457;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_address1 = state_data_V_addr_48_reg_447;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        state_data_V_address1 = state_data_V_addr_46_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address1 = 64'd1;
    end else begin
        state_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce0 = 1'b1;
    end else begin
        state_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_data_V_ce1 = 1'b1;
    end else begin
        state_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_d0 = op2_V_read_assign_38_fu_420_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_d0 = op2_V_read_assign_36_fu_408_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_d0 = op2_V_read_assign_34_fu_396_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_d0 = op2_V_read_assign_32_fu_384_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_d0 = op2_V_read_assign_30_fu_372_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_d0 = op2_V_read_assign_28_fu_360_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        state_data_V_d0 = grp_fu_346_p2;
    end else begin
        state_data_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        state_data_V_d1 = op2_V_read_assign_39_fu_426_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_data_V_d1 = op2_V_read_assign_37_fu_414_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_data_V_d1 = op2_V_read_assign_35_fu_402_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_data_V_d1 = op2_V_read_assign_33_fu_390_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_data_V_d1 = op2_V_read_assign_31_fu_378_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        state_data_V_d1 = op2_V_read_assign_29_fu_366_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        state_data_V_d1 = grp_fu_353_p2;
    end else begin
        state_data_V_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we0 = 1'b1;
    end else begin
        state_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        state_data_V_we1 = 1'b1;
    end else begin
        state_data_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign grp_fu_346_p2 = (roundKey_data_V_q0 ^ reg_338);

assign grp_fu_353_p2 = (roundKey_data_V_q1 ^ reg_342);

assign op2_V_read_assign_28_fu_360_p2 = (state_data_V_load_47_reg_462 ^ roundKey_data_V_q0);

assign op2_V_read_assign_29_fu_366_p2 = (state_data_V_load_48_reg_467 ^ roundKey_data_V_q1);

assign op2_V_read_assign_30_fu_372_p2 = (state_data_V_load_49_reg_482 ^ roundKey_data_V_q0);

assign op2_V_read_assign_31_fu_378_p2 = (state_data_V_load_50_reg_487 ^ roundKey_data_V_q1);

assign op2_V_read_assign_32_fu_384_p2 = (state_data_V_load_51_reg_502 ^ roundKey_data_V_q0);

assign op2_V_read_assign_33_fu_390_p2 = (state_data_V_load_52_reg_507 ^ roundKey_data_V_q1);

assign op2_V_read_assign_34_fu_396_p2 = (state_data_V_load_53_reg_522 ^ roundKey_data_V_q0);

assign op2_V_read_assign_35_fu_402_p2 = (state_data_V_load_54_reg_527 ^ roundKey_data_V_q1);

assign op2_V_read_assign_36_fu_408_p2 = (state_data_V_load_55_reg_542 ^ roundKey_data_V_q0);

assign op2_V_read_assign_37_fu_414_p2 = (state_data_V_load_56_reg_547 ^ roundKey_data_V_q1);

assign op2_V_read_assign_38_fu_420_p2 = (state_data_V_load_57_reg_572 ^ roundKey_data_V_q0);

assign op2_V_read_assign_39_fu_426_p2 = (state_data_V_load_58_reg_577 ^ roundKey_data_V_q1);

assign state_data_V_addr_46_reg_437 = 64'd1;

assign state_data_V_addr_47_reg_442 = 64'd2;

assign state_data_V_addr_48_reg_447 = 64'd3;

assign state_data_V_addr_49_reg_452 = 64'd4;

assign state_data_V_addr_50_reg_457 = 64'd5;

assign state_data_V_addr_51_reg_472 = 64'd6;

assign state_data_V_addr_52_reg_477 = 64'd7;

assign state_data_V_addr_53_reg_492 = 64'd8;

assign state_data_V_addr_54_reg_497 = 64'd9;

assign state_data_V_addr_55_reg_512 = 64'd10;

assign state_data_V_addr_56_reg_517 = 64'd11;

assign state_data_V_addr_57_reg_532 = 64'd12;

assign state_data_V_addr_58_reg_537 = 64'd13;

assign state_data_V_addr_59_reg_552 = 64'd14;

assign state_data_V_addr_60_reg_557 = 64'd15;

assign state_data_V_addr_reg_432 = 64'd0;

endmodule //addRoundKey4
