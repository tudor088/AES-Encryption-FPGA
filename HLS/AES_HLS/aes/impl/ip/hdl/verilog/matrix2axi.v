// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module matrix2axi (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_data_V_address0,
        state_data_V_ce0,
        state_data_V_q0,
        state_data_V_address1,
        state_data_V_ce1,
        state_data_V_q1,
        stream_out_TDATA,
        stream_out_TVALID,
        stream_out_TREADY,
        stream_out_TKEEP,
        stream_out_TSTRB,
        stream_out_TUSER,
        stream_out_TLAST,
        stream_out_TID,
        stream_out_TDEST
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_data_V_address0;
output   state_data_V_ce0;
input  [7:0] state_data_V_q0;
output  [3:0] state_data_V_address1;
output   state_data_V_ce1;
input  [7:0] state_data_V_q1;
output  [127:0] stream_out_TDATA;
output   stream_out_TVALID;
input   stream_out_TREADY;
output  [15:0] stream_out_TKEEP;
output  [15:0] stream_out_TSTRB;
output  [0:0] stream_out_TUSER;
output  [0:0] stream_out_TLAST;
output  [0:0] stream_out_TID;
output  [0:0] stream_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_data_V_address0;
reg state_data_V_ce0;
reg[3:0] state_data_V_address1;
reg state_data_V_ce1;
reg stream_out_TVALID;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    stream_out_TDATA_blk_n;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state2;
reg   [7:0] state_data_V_load_reg_295;
reg   [7:0] state_data_V_load_31_reg_300;
wire    ap_CS_fsm_state3;
reg   [7:0] state_data_V_load_32_reg_315;
reg   [7:0] state_data_V_load_33_reg_320;
wire    ap_CS_fsm_state4;
reg   [7:0] state_data_V_load_34_reg_335;
reg   [7:0] state_data_V_load_35_reg_340;
wire    ap_CS_fsm_state5;
reg   [7:0] state_data_V_load_36_reg_355;
reg   [7:0] state_data_V_load_37_reg_360;
wire    ap_CS_fsm_state6;
reg   [7:0] state_data_V_load_38_reg_375;
reg   [7:0] state_data_V_load_39_reg_380;
wire    ap_CS_fsm_state7;
reg   [7:0] state_data_V_load_40_reg_395;
reg   [7:0] state_data_V_load_41_reg_400;
wire    ap_CS_fsm_state8;
reg   [7:0] state_data_V_load_42_reg_415;
reg   [7:0] state_data_V_load_43_reg_420;
reg    ap_reg_ioackin_stream_out_TREADY;
reg    ap_sig_ioackin_stream_out_TREADY;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_reg_ioackin_stream_out_TREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_stream_out_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            if ((ap_sig_ioackin_stream_out_TREADY == 1'b1)) begin
                ap_reg_ioackin_stream_out_TREADY <= 1'b0;
            end else if ((stream_out_TREADY == 1'b1)) begin
                ap_reg_ioackin_stream_out_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_load_31_reg_300 <= state_data_V_q1;
        state_data_V_load_reg_295 <= state_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_load_32_reg_315 <= state_data_V_q0;
        state_data_V_load_33_reg_320 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_load_34_reg_335 <= state_data_V_q0;
        state_data_V_load_35_reg_340 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_load_36_reg_355 <= state_data_V_q0;
        state_data_V_load_37_reg_360 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_load_38_reg_375 <= state_data_V_q0;
        state_data_V_load_39_reg_380 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_load_40_reg_395 <= state_data_V_q0;
        state_data_V_load_41_reg_400 <= state_data_V_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_load_42_reg_415 <= state_data_V_q0;
        state_data_V_load_43_reg_420 <= state_data_V_q1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_stream_out_TREADY == 1'b1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_stream_out_TREADY == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_stream_out_TREADY == 1'b0)) begin
        ap_sig_ioackin_stream_out_TREADY = stream_out_TREADY;
    end else begin
        ap_sig_ioackin_stream_out_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address0 = 64'd0;
    end else begin
        state_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_data_V_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_data_V_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        state_data_V_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_data_V_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_data_V_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_data_V_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_data_V_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        state_data_V_address1 = 64'd4;
    end else begin
        state_data_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_data_V_ce0 = 1'b1;
    end else begin
        state_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        state_data_V_ce1 = 1'b1;
    end else begin
        state_data_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        stream_out_TDATA_blk_n = stream_out_TREADY;
    end else begin
        stream_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_stream_out_TREADY == 1'b0) & (1'b1 == ap_CS_fsm_state9))) begin
        stream_out_TVALID = 1'b1;
    end else begin
        stream_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (ap_sig_ioackin_stream_out_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign stream_out_TDATA = {{{{{{{{{{{{{{{{state_data_V_load_reg_295}, {state_data_V_load_31_reg_300}}, {state_data_V_load_32_reg_315}}, {state_data_V_load_33_reg_320}}, {state_data_V_load_34_reg_335}}, {state_data_V_load_35_reg_340}}, {state_data_V_load_36_reg_355}}, {state_data_V_load_37_reg_360}}, {state_data_V_load_38_reg_375}}, {state_data_V_load_39_reg_380}}, {state_data_V_load_40_reg_395}}, {state_data_V_load_41_reg_400}}, {state_data_V_load_42_reg_415}}, {state_data_V_load_43_reg_420}}, {state_data_V_q0}}, {state_data_V_q1}};

assign stream_out_TDEST = 1'd0;

assign stream_out_TID = 1'd0;

assign stream_out_TKEEP = 16'd65535;

assign stream_out_TLAST = 1'd1;

assign stream_out_TSTRB = 16'd0;

assign stream_out_TUSER = 1'd0;

endmodule //matrix2axi
