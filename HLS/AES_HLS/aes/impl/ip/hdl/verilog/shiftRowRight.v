// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module shiftRowRight (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        AESMatrix_data_V_address0,
        AESMatrix_data_V_ce0,
        AESMatrix_data_V_we0,
        AESMatrix_data_V_d0,
        AESMatrix_data_V_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] AESMatrix_data_V_address0;
output   AESMatrix_data_V_ce0;
output   AESMatrix_data_V_we0;
output  [7:0] AESMatrix_data_V_d0;
input  [7:0] AESMatrix_data_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] AESMatrix_data_V_address0;
reg AESMatrix_data_V_ce0;
reg AESMatrix_data_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] col_2_fu_94_p2;
reg   [2:0] col_2_reg_224;
wire    ap_CS_fsm_state2;
wire   [1:0] tmp_fu_100_p1;
reg   [1:0] tmp_reg_229;
wire   [0:0] exitcond8_fu_88_p2;
wire   [2:0] col_1_fu_145_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] col_reg_66;
wire    ap_CS_fsm_state3;
reg   [2:0] col1_reg_77;
wire   [0:0] exitcond_fu_139_p2;
wire   [63:0] tmp_1_fu_110_p3;
wire   [63:0] tmp_2_cast_fu_173_p1;
reg   [7:0] tempRow_3_V_fu_30;
reg   [7:0] tempRow_3_V_1_fu_34;
reg   [7:0] tempRow_3_V_2_fu_38;
reg   [7:0] tempRow_3_V_3_fu_42;
wire   [7:0] tmp_3_fu_182_p6;
wire   [1:0] tmp_cast_fu_104_p2;
wire   [2:0] tmp_2_fu_163_p2;
wire  signed [3:0] tmp_2_cast1_fu_169_p1;
wire   [1:0] tmp_3_fu_182_p5;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

AESEncrypt_TopFundEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
AESEncrypt_TopFundEe_U24(
    .din0(tempRow_3_V_fu_30),
    .din1(tempRow_3_V_1_fu_34),
    .din2(tempRow_3_V_2_fu_38),
    .din3(tempRow_3_V_3_fu_42),
    .din4(tmp_3_fu_182_p5),
    .dout(tmp_3_fu_182_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        col1_reg_77 <= 3'd0;
    end else if (((exitcond_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        col1_reg_77 <= col_1_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_reg_66 <= col_2_reg_224;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        col_reg_66 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        col_2_reg_224 <= col_2_fu_94_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_229 == 2'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        tempRow_3_V_1_fu_34 <= AESMatrix_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_229 == 2'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        tempRow_3_V_2_fu_38 <= AESMatrix_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_229 == 2'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        tempRow_3_V_3_fu_42 <= AESMatrix_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_229 == 2'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tempRow_3_V_fu_30 <= AESMatrix_data_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond8_fu_88_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_229 <= tmp_fu_100_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        AESMatrix_data_V_address0 = tmp_2_cast_fu_173_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        AESMatrix_data_V_address0 = tmp_1_fu_110_p3;
    end else begin
        AESMatrix_data_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        AESMatrix_data_V_ce0 = 1'b1;
    end else begin
        AESMatrix_data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_139_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        AESMatrix_data_V_we0 = 1'b1;
    end else begin
        AESMatrix_data_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond8_fu_88_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond_fu_139_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AESMatrix_data_V_d0 = tmp_3_fu_182_p6;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign col_1_fu_145_p2 = (col1_reg_77 + 3'd1);

assign col_2_fu_94_p2 = (col_reg_66 + 3'd1);

assign exitcond8_fu_88_p2 = ((col_reg_66 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_139_p2 = ((col1_reg_77 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_1_fu_110_p3 = {{62'd3}, {tmp_cast_fu_104_p2}};

assign tmp_2_cast1_fu_169_p1 = $signed(tmp_2_fu_163_p2);

assign tmp_2_cast_fu_173_p1 = $unsigned(tmp_2_cast1_fu_169_p1);

assign tmp_2_fu_163_p2 = (col1_reg_77 ^ 3'd4);

assign tmp_3_fu_182_p5 = col1_reg_77[1:0];

assign tmp_cast_fu_104_p2 = ($signed(2'd3) + $signed(tmp_fu_100_p1));

assign tmp_fu_100_p1 = col_reg_66[1:0];

endmodule //shiftRowRight
