-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shiftRowLeft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    AESMatrix_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    AESMatrix_data_V_ce0 : OUT STD_LOGIC;
    AESMatrix_data_V_we0 : OUT STD_LOGIC;
    AESMatrix_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    AESMatrix_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    row : IN STD_LOGIC_VECTOR (3 downto 0);
    shiftAmount : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of shiftRowLeft is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_102_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_253 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_110_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_4_fu_120_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_4_reg_266 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_10_fu_126_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_reg_271 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond8_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_3_fu_173_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal col_reg_80 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col1_reg_91 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_cast_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tempRow_3_V_fu_32 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempRow_3_V_5_fu_36 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempRow_3_V_6_fu_40 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempRow_3_V_7_fu_44 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_209_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_fu_130_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_135_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_191_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_195_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_209_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component AESEncrypt_TopFundEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    AESEncrypt_TopFundEe_U20 : component AESEncrypt_TopFundEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => tempRow_3_V_fu_32,
        din1 => tempRow_3_V_5_fu_36,
        din2 => tempRow_3_V_6_fu_40,
        din3 => tempRow_3_V_7_fu_44,
        din4 => tmp_9_fu_209_p5,
        dout => tmp_9_fu_209_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col1_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col1_reg_91 <= ap_const_lv3_0;
            elsif (((exitcond_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                col1_reg_91 <= col_3_fu_173_p2;
            end if; 
        end if;
    end process;

    col_reg_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                col_reg_80 <= col_4_reg_266;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_reg_80 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_4_reg_266 <= col_4_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_271 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tempRow_3_V_5_fu_36 <= AESMatrix_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_271 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tempRow_3_V_6_fu_40 <= AESMatrix_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_271 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tempRow_3_V_7_fu_44 <= AESMatrix_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_10_reg_271 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tempRow_3_V_fu_32 <= AESMatrix_data_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_10_reg_271 <= tmp_10_fu_126_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_7_reg_258 <= tmp_7_fu_110_p1;
                    tmp_reg_253(5 downto 2) <= tmp_fu_102_p3(5 downto 2);
            end if;
        end if;
    end process;
    tmp_reg_253(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond8_fu_114_p2, ap_CS_fsm_state4, exitcond_fu_167_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond8_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((exitcond_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    AESMatrix_data_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_6_fu_142_p1, tmp_8_cast_fu_200_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            AESMatrix_data_V_address0 <= tmp_8_cast_fu_200_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            AESMatrix_data_V_address0 <= tmp_6_fu_142_p1(4 - 1 downto 0);
        else 
            AESMatrix_data_V_address0 <= "XXXX";
        end if; 
    end process;


    AESMatrix_data_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            AESMatrix_data_V_ce0 <= ap_const_logic_1;
        else 
            AESMatrix_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    AESMatrix_data_V_d0 <= tmp_9_fu_209_p6;

    AESMatrix_data_V_we0_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_167_p2)
    begin
        if (((exitcond_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            AESMatrix_data_V_we0 <= ap_const_logic_1;
        else 
            AESMatrix_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4, exitcond_fu_167_p2)
    begin
        if ((((exitcond_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, exitcond_fu_167_p2)
    begin
        if (((exitcond_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_3_fu_173_p2 <= std_logic_vector(unsigned(col1_reg_91) + unsigned(ap_const_lv3_1));
    col_4_fu_120_p2 <= std_logic_vector(unsigned(col_reg_80) + unsigned(ap_const_lv3_1));
    exitcond8_fu_114_p2 <= "1" when (col_reg_80 = ap_const_lv3_4) else "0";
    exitcond_fu_167_p2 <= "1" when (col1_reg_91 = ap_const_lv3_4) else "0";
    tmp_10_fu_126_p1 <= col_reg_80(2 - 1 downto 0);
    tmp_5_fu_135_p3 <= (row & tmp_cast_fu_130_p2);
    tmp_6_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_135_p3),64));
    tmp_7_cast_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col1_reg_91),6));
    tmp_7_fu_110_p1 <= shiftAmount(2 - 1 downto 0);
    tmp_8_cast_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_195_p2),64));
    tmp_8_fu_195_p2 <= std_logic_vector(unsigned(tmp_reg_253) + unsigned(tmp_7_cast_fu_191_p1));
    tmp_9_fu_209_p5 <= col1_reg_91(2 - 1 downto 0);
    tmp_cast_fu_130_p2 <= std_logic_vector(unsigned(tmp_7_reg_258) + unsigned(tmp_10_fu_126_p1));
    tmp_fu_102_p3 <= (row & ap_const_lv2_0);
end behav;
