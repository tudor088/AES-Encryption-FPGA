-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity keyExpansion5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    masterKey_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    masterKey_data_V_ce0 : OUT STD_LOGIC;
    masterKey_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_V_ce0 : OUT STD_LOGIC;
    expandedKey_V_we0 : OUT STD_LOGIC;
    expandedKey_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    expandedKey_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of keyExpansion5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_2C : STD_LOGIC_VECTOR (7 downto 0) := "00101100";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_V_ce0 : STD_LOGIC;
    signal sbox_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rcon_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal rcon_V_ce0 : STD_LOGIC;
    signal rcon_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_1_fu_572_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_1_reg_840 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_cast1_fu_578_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast1_reg_845 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond2_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_582_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_reg_850 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_fu_592_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_reg_858 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond4_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul_reg_868 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_873 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_fu_647_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_cast_reg_881 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond3_fu_635_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_fu_657_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_1_reg_889 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul1_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul1_reg_894 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_679_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_32_reg_904 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_fu_699_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_923 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_33_fu_705_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_reg_928 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_i_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_9_cast_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_reg_950 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_6_cast_fu_766_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_cast_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal row_2_fu_776_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_2_reg_963 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal next_mul2_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal next_mul2_reg_968 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_798_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_978 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_807_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_reg_983 : STD_LOGIC_VECTOR (7 downto 0);
    signal col_fu_821_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_assign_reg_135 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_assign_reg_146 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal phi_mul_reg_157 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_V_5_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_V_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_V_3_5_reg_506 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_V_3_reg_180 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_V_5_reg_519 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_V_reg_192 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_1_reg_532 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_reg_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal col1_reg_216 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_2_V_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_1_V_1_reg_239 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_4_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_V_6_reg_261 : STD_LOGIC_VECTOR (7 downto 0);
    signal row2_reg_272 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul1_reg_283 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_V_be_reg_294 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_V_1_be_reg_312 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_5_be_reg_330 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_V_8_be_reg_348 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_V_3_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_2_V_3_3_reg_377 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_V_3_reg_388 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_3_reg_399 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_i_reg_410 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_3_V_3_be_reg_421 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_V_3_3_be_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_V_3_be_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_3_be_reg_475 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_V_2_fu_749_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal row3_reg_544 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal phi_mul2_reg_555 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_cast_fu_615_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_cast_fu_631_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_39_cast_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_i_fu_723_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_744_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_41_cast_fu_793_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_cast_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_831_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_598_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_34_cast_fu_606_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_641_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_683_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_709_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_709_p6 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_lshr_f_cast_fu_728_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal addconv_fu_738_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_760_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_788_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_fu_807_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component AESEncrypt_TopFundEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keyExpansion5_sbobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component keyExpansion5_rcocud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_V_U : component keyExpansion5_sbobkb
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_V_address0,
        ce0 => sbox_V_ce0,
        q0 => sbox_V_q0);

    rcon_V_U : component keyExpansion5_rcocud
    generic map (
        DataWidth => 8,
        AddressRange => 11,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => rcon_V_address0,
        ce0 => rcon_V_ce0,
        q0 => rcon_V_q0);

    AESEncrypt_TopFundEe_U9 : component AESEncrypt_TopFundEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => temp_0_V_3_reg_399,
        din1 => temp_1_V_3_reg_388,
        din2 => temp_2_V_3_3_reg_377,
        din3 => temp_3_V_3_reg_366,
        din4 => tmp_9_fu_709_p5,
        dout => tmp_9_fu_709_p6);

    AESEncrypt_TopFundEe_U10 : component AESEncrypt_TopFundEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        din4_WIDTH => 2,
        dout_WIDTH => 8)
    port map (
        din0 => temp_0_V_1_reg_532,
        din1 => temp_1_V_5_reg_519,
        din2 => temp_2_V_3_5_reg_506,
        din3 => temp_3_V_5_reg_493,
        din4 => rhs_V_fu_807_p5,
        dout => rhs_V_fu_807_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col1_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_566_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                col1_reg_216 <= ap_const_lv6_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_770_p2 = ap_const_lv1_1))) then 
                col1_reg_216 <= col_fu_821_p2;
            end if; 
        end if;
    end process;

    col_assign_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                col_assign_reg_135 <= col_1_reg_840;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                col_assign_reg_135 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_i_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_i_reg_410 <= i_reg_923;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                i_i_reg_410 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul1_reg_283 <= next_mul1_reg_894;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                phi_mul1_reg_283 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul2_reg_555_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                phi_mul2_reg_555 <= next_mul2_reg_968;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                phi_mul2_reg_555 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_566_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_157 <= ap_const_lv8_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_157 <= next_mul_reg_868;
            end if; 
        end if;
    end process;

    row2_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                row2_reg_272 <= row_1_reg_889;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                row2_reg_272 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    row3_reg_544_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                row3_reg_544 <= row_2_reg_963;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                row3_reg_544 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    row_assign_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_566_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                row_assign_reg_146 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                row_assign_reg_146 <= row_reg_858;
            end if; 
        end if;
    end process;

    temp_0_V_1_reg_532_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_0_V_1_reg_532 <= temp_3_V_6_reg_261;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_7_reg_908 = ap_const_lv1_1))) then 
                temp_0_V_1_reg_532 <= temp_0_V_2_fu_749_p2;
            end if; 
        end if;
    end process;

    temp_0_V_3_be_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_0))) then 
                temp_0_V_3_be_reg_475 <= sbox_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_3)))) then 
                temp_0_V_3_be_reg_475 <= temp_0_V_3_reg_399;
            end if; 
        end if;
    end process;

    temp_0_V_3_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                temp_0_V_3_reg_399 <= temp_0_V_3_be_reg_475;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_0_V_3_reg_399 <= temp_0_V_4_reg_250;
            end if; 
        end if;
    end process;

    temp_0_V_4_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp_0_V_4_reg_250 <= temp_0_V_5_be_reg_330;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_0_V_4_reg_250 <= temp_1_V_reg_192;
            end if; 
        end if;
    end process;

    temp_0_V_5_be_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_1))) then 
                temp_0_V_5_be_reg_330 <= expandedKey_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_3)))) then 
                temp_0_V_5_be_reg_330 <= temp_0_V_4_reg_250;
            end if; 
        end if;
    end process;

    temp_1_V_1_be_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_2))) then 
                temp_1_V_1_be_reg_312 <= expandedKey_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_3)))) then 
                temp_1_V_1_be_reg_312 <= temp_1_V_1_reg_239;
            end if; 
        end if;
    end process;

    temp_1_V_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp_1_V_1_reg_239 <= temp_1_V_1_be_reg_312;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_1_V_1_reg_239 <= temp_2_V_3_reg_180;
            end if; 
        end if;
    end process;

    temp_1_V_3_be_reg_457_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_1))) then 
                temp_1_V_3_be_reg_457 <= sbox_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_3)))) then 
                temp_1_V_3_be_reg_457 <= temp_1_V_3_reg_388;
            end if; 
        end if;
    end process;

    temp_1_V_3_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                temp_1_V_3_reg_388 <= temp_1_V_3_be_reg_457;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_1_V_3_reg_388 <= temp_1_V_1_reg_239;
            end if; 
        end if;
    end process;

    temp_1_V_5_reg_519_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_1_V_5_reg_519 <= temp_0_V_4_reg_250;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_7_reg_908 = ap_const_lv1_1))) then 
                temp_1_V_5_reg_519 <= temp_1_V_3_reg_388;
            end if; 
        end if;
    end process;

    temp_2_V_3_3_be_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_2))) then 
                temp_2_V_3_3_be_reg_439 <= sbox_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_3)))) then 
                temp_2_V_3_3_be_reg_439 <= temp_2_V_3_3_reg_377;
            end if; 
        end if;
    end process;

    temp_2_V_3_3_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                temp_2_V_3_3_reg_377 <= temp_2_V_3_3_be_reg_439;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_2_V_3_3_reg_377 <= temp_2_V_reg_228;
            end if; 
        end if;
    end process;

    temp_2_V_3_5_reg_506_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_2_V_3_5_reg_506 <= temp_1_V_1_reg_239;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_7_reg_908 = ap_const_lv1_1))) then 
                temp_2_V_3_5_reg_506 <= temp_2_V_3_3_reg_377;
            end if; 
        end if;
    end process;

    temp_2_V_be_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_2)))) then 
                temp_2_V_be_reg_294 <= temp_2_V_reg_228;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_3))) then 
                temp_2_V_be_reg_294 <= expandedKey_V_q0;
            end if; 
        end if;
    end process;

    temp_2_V_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp_2_V_reg_228 <= temp_2_V_be_reg_294;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_2_V_reg_228 <= temp_3_V_reg_168;
            end if; 
        end if;
    end process;

    temp_3_V_3_be_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_2)))) then 
                temp_3_V_3_be_reg_421 <= temp_3_V_3_reg_366;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_33_reg_928 = ap_const_lv2_3))) then 
                temp_3_V_3_be_reg_421 <= sbox_V_q0;
            end if; 
        end if;
    end process;

    temp_3_V_3_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                temp_3_V_3_reg_366 <= temp_3_V_3_be_reg_421;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_3_V_3_reg_366 <= temp_3_V_6_reg_261;
            end if; 
        end if;
    end process;

    temp_3_V_5_reg_493_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then 
                temp_3_V_5_reg_493 <= temp_2_V_reg_228;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and (tmp_7_reg_908 = ap_const_lv1_1))) then 
                temp_3_V_5_reg_493 <= temp_3_V_3_reg_366;
            end if; 
        end if;
    end process;

    temp_3_V_6_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                temp_3_V_6_reg_261 <= temp_3_V_8_be_reg_348;
            elsif (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                temp_3_V_6_reg_261 <= temp_0_V_reg_204;
            end if; 
        end if;
    end process;

    temp_3_V_8_be_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_0))) then 
                temp_3_V_8_be_reg_348 <= expandedKey_V_q0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_2)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_32_reg_904 = ap_const_lv2_3)))) then 
                temp_3_V_8_be_reg_348 <= temp_3_V_6_reg_261;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                col_1_reg_840 <= col_1_fu_572_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_923 <= i_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_651_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                next_mul1_reg_894 <= next_mul1_fu_663_p2;
                tmp_32_reg_904 <= tmp_32_fu_679_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_770_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                next_mul2_reg_968 <= next_mul2_fu_782_p2;
                rhs_V_reg_983 <= rhs_V_fu_807_p6;
                tmp_11_reg_978 <= tmp_11_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_586_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                next_mul_reg_868 <= next_mul_fu_620_p2;
                tmp_6_reg_873 <= tmp_6_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                row_1_reg_889 <= row_1_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                row_2_reg_963 <= row_2_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                row_reg_858 <= row_fu_592_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_770_p2 = ap_const_lv1_1))) then
                temp_0_V_reg_204 <= temp_0_V_1_reg_532;
                temp_1_V_reg_192 <= temp_1_V_5_reg_519;
                temp_2_V_3_reg_180 <= temp_2_V_3_5_reg_506;
                temp_3_V_reg_168 <= temp_3_V_5_reg_493;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_693_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_33_reg_928 <= tmp_33_fu_705_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_635_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    tmp_4_cast_reg_881(5 downto 0) <= tmp_4_cast_fu_647_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    tmp_6_cast_reg_955(5 downto 0) <= tmp_6_cast_fu_766_p1(5 downto 0);
                    tmp_9_cast_reg_950(5 downto 0) <= tmp_9_cast_fu_756_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then
                tmp_7_reg_908 <= tmp_7_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_566_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_cast1_reg_845(2 downto 0) <= tmp_cast1_fu_578_p1(2 downto 0);
                    tmp_cast_reg_850(2 downto 0) <= tmp_cast_fu_582_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_cast1_reg_845(7 downto 3) <= "00000";
    tmp_cast_reg_850(5 downto 3) <= "000";
    tmp_4_cast_reg_881(7 downto 6) <= "00";
    tmp_9_cast_reg_950(7 downto 6) <= "00";
    tmp_6_cast_reg_955(7 downto 6) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_566_p2, ap_CS_fsm_state3, exitcond4_fu_586_p2, ap_CS_fsm_state5, exitcond3_fu_635_p2, ap_CS_fsm_state6, exitcond5_fu_651_p2, tmp_7_fu_687_p2, ap_CS_fsm_state9, exitcond_i_fu_693_p2, ap_CS_fsm_state13, exitcond_fu_770_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond2_fu_566_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond4_fu_586_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_635_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_7_fu_687_p2 = ap_const_lv1_1) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((tmp_7_fu_687_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_651_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_i_fu_693_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond_fu_770_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    addconv_fu_738_p2 <= std_logic_vector(unsigned(p_lshr_f_cast_fu_728_p4) + unsigned(ap_const_lv4_F));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond3_fu_635_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_635_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond3_fu_635_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_fu_635_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    col_1_fu_572_p2 <= std_logic_vector(unsigned(col_assign_reg_135) + unsigned(ap_const_lv3_1));
    col_fu_821_p2 <= std_logic_vector(unsigned(col1_reg_216) + unsigned(ap_const_lv6_1));
    exitcond2_fu_566_p2 <= "1" when (col_assign_reg_135 = ap_const_lv3_4) else "0";
    exitcond3_fu_635_p2 <= "1" when (col1_reg_216 = ap_const_lv6_2C) else "0";
    exitcond4_fu_586_p2 <= "1" when (row_assign_reg_146 = ap_const_lv3_4) else "0";
    exitcond5_fu_651_p2 <= "1" when (row2_reg_272 = ap_const_lv3_4) else "0";
    exitcond_fu_770_p2 <= "1" when (row3_reg_544 = ap_const_lv3_4) else "0";
    exitcond_i_fu_693_p2 <= "1" when (i_i_reg_410 = ap_const_lv3_4) else "0";

    expandedKey_V_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state14, tmp_37_cast_fu_631_p1, tmp_39_cast_fu_674_p1, tmp_41_cast_fu_793_p1, tmp_42_cast_fu_827_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_V_address0 <= tmp_42_cast_fu_827_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            expandedKey_V_address0 <= tmp_41_cast_fu_793_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            expandedKey_V_address0 <= tmp_39_cast_fu_674_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_V_address0 <= tmp_37_cast_fu_631_p1(8 - 1 downto 0);
        else 
            expandedKey_V_address0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_V_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            expandedKey_V_ce0 <= ap_const_logic_1;
        else 
            expandedKey_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    expandedKey_V_d0_assign_proc : process(masterKey_data_V_q0, ap_CS_fsm_state4, ap_CS_fsm_state14, r_V_fu_831_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            expandedKey_V_d0 <= r_V_fu_831_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            expandedKey_V_d0 <= masterKey_data_V_q0;
        else 
            expandedKey_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    expandedKey_V_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            expandedKey_V_we0 <= ap_const_logic_1;
        else 
            expandedKey_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_699_p2 <= std_logic_vector(unsigned(i_i_reg_410) + unsigned(ap_const_lv3_1));
    masterKey_data_V_address0 <= tmp_35_cast_fu_615_p1(4 - 1 downto 0);

    masterKey_data_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            masterKey_data_V_ce0 <= ap_const_logic_1;
        else 
            masterKey_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul1_fu_663_p2 <= std_logic_vector(unsigned(ap_const_lv8_2C) + unsigned(phi_mul1_reg_283));
    next_mul2_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv8_2C) + unsigned(phi_mul2_reg_555));
    next_mul_fu_620_p2 <= std_logic_vector(unsigned(phi_mul_reg_157) + unsigned(ap_const_lv8_2C));
    p_lshr_f_cast_fu_728_p4 <= col1_reg_216(5 downto 2);
    r_V_fu_831_p2 <= (rhs_V_reg_983 xor expandedKey_V_q0);
    rcon_V_address0 <= tmp_3_fu_744_p1(4 - 1 downto 0);

    rcon_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            rcon_V_ce0 <= ap_const_logic_1;
        else 
            rcon_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rhs_V_fu_807_p5 <= row3_reg_544(2 - 1 downto 0);
    row_1_fu_657_p2 <= std_logic_vector(unsigned(row2_reg_272) + unsigned(ap_const_lv3_1));
    row_2_fu_776_p2 <= std_logic_vector(unsigned(row3_reg_544) + unsigned(ap_const_lv3_1));
    row_fu_592_p2 <= std_logic_vector(unsigned(row_assign_reg_146) + unsigned(ap_const_lv3_1));
    sbox_V_address0 <= tmp_4_i_fu_723_p1(8 - 1 downto 0);

    sbox_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            sbox_V_ce0 <= ap_const_logic_1;
        else 
            sbox_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_0_V_2_fu_749_p2 <= (temp_0_V_3_reg_399 xor rcon_V_q0);
    tmp_10_fu_788_p2 <= std_logic_vector(unsigned(tmp_6_cast_reg_955) + unsigned(phi_mul2_reg_555));
    tmp_11_fu_798_p2 <= std_logic_vector(unsigned(tmp_9_cast_reg_950) + unsigned(phi_mul2_reg_555));
    tmp_2_fu_760_p2 <= std_logic_vector(unsigned(col1_reg_216) + unsigned(ap_const_lv6_3C));
    tmp_32_fu_679_p1 <= row2_reg_272(2 - 1 downto 0);
    tmp_33_fu_705_p1 <= i_i_reg_410(2 - 1 downto 0);
    tmp_34_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_598_p3),6));
    tmp_35_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_610_p2),64));
    tmp_37_cast_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_reg_873),64));
    tmp_39_cast_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_669_p2),64));
    tmp_3_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addconv_fu_738_p2),64));
    tmp_41_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_788_p2),64));
    tmp_42_cast_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_978),64));
    tmp_4_cast_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_641_p2),8));
    tmp_4_fu_598_p3 <= (row_assign_reg_146 & ap_const_lv2_0);
    tmp_4_i_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_709_p6),64));
    tmp_5_fu_610_p2 <= std_logic_vector(unsigned(tmp_cast_reg_850) + unsigned(tmp_34_cast_fu_606_p1));
    tmp_6_cast_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_760_p2),8));
    tmp_6_fu_626_p2 <= std_logic_vector(unsigned(tmp_cast1_reg_845) + unsigned(phi_mul_reg_157));
    tmp_7_fu_687_p2 <= "1" when (tmp_fu_683_p1 = ap_const_lv2_0) else "0";
    tmp_8_fu_669_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_881) + unsigned(phi_mul1_reg_283));
    tmp_9_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col1_reg_216),8));
    tmp_9_fu_709_p5 <= i_i_reg_410(2 - 1 downto 0);
    tmp_cast1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_135),8));
    tmp_cast_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_reg_135),6));
    tmp_fu_683_p1 <= col1_reg_216(2 - 1 downto 0);
    tmp_s_fu_641_p2 <= std_logic_vector(unsigned(col1_reg_216) + unsigned(ap_const_lv6_3F));
end behav;
