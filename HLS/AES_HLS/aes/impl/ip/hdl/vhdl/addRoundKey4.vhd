-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity addRoundKey4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_data_V_ce0 : OUT STD_LOGIC;
    state_data_V_we0 : OUT STD_LOGIC;
    state_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_data_V_ce1 : OUT STD_LOGIC;
    state_data_V_we1 : OUT STD_LOGIC;
    state_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_data_V_ce0 : OUT STD_LOGIC;
    roundKey_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    roundKey_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    roundKey_data_V_ce1 : OUT STD_LOGIC;
    roundKey_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of addRoundKey4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_338 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_addr_46_reg_437 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_addr_47_reg_442 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_addr_48_reg_447 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_addr_49_reg_452 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal state_data_V_addr_50_reg_457 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_47_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_48_reg_467 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_51_reg_472 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal state_data_V_addr_52_reg_477 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_49_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_50_reg_487 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_53_reg_492 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal state_data_V_addr_54_reg_497 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_51_reg_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_52_reg_507 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_55_reg_512 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal state_data_V_addr_56_reg_517 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_53_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_54_reg_527 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_57_reg_532 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal state_data_V_addr_58_reg_537 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_55_reg_542 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_56_reg_547 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_addr_59_reg_552 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal state_data_V_addr_60_reg_557 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_data_V_load_57_reg_572 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_data_V_load_58_reg_577 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_28_fu_360_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_29_fu_366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_30_fu_372_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_31_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_32_fu_384_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_33_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_34_fu_396_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_35_fu_402_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_36_fu_408_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_37_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_38_fu_420_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_V_read_assign_39_fu_426_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_338 <= state_data_V_q0;
                reg_342 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                state_data_V_load_47_reg_462 <= state_data_V_q0;
                state_data_V_load_48_reg_467 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                state_data_V_load_49_reg_482 <= state_data_V_q0;
                state_data_V_load_50_reg_487 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                state_data_V_load_51_reg_502 <= state_data_V_q0;
                state_data_V_load_52_reg_507 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                state_data_V_load_53_reg_522 <= state_data_V_q0;
                state_data_V_load_54_reg_527 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                state_data_V_load_55_reg_542 <= state_data_V_q0;
                state_data_V_load_56_reg_547 <= state_data_V_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                state_data_V_load_57_reg_572 <= state_data_V_q0;
                state_data_V_load_58_reg_577 <= state_data_V_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_346_p2 <= (roundKey_data_V_q0 xor reg_338);
    grp_fu_353_p2 <= (roundKey_data_V_q1 xor reg_342);
    op2_V_read_assign_28_fu_360_p2 <= (state_data_V_load_47_reg_462 xor roundKey_data_V_q0);
    op2_V_read_assign_29_fu_366_p2 <= (state_data_V_load_48_reg_467 xor roundKey_data_V_q1);
    op2_V_read_assign_30_fu_372_p2 <= (state_data_V_load_49_reg_482 xor roundKey_data_V_q0);
    op2_V_read_assign_31_fu_378_p2 <= (state_data_V_load_50_reg_487 xor roundKey_data_V_q1);
    op2_V_read_assign_32_fu_384_p2 <= (state_data_V_load_51_reg_502 xor roundKey_data_V_q0);
    op2_V_read_assign_33_fu_390_p2 <= (state_data_V_load_52_reg_507 xor roundKey_data_V_q1);
    op2_V_read_assign_34_fu_396_p2 <= (state_data_V_load_53_reg_522 xor roundKey_data_V_q0);
    op2_V_read_assign_35_fu_402_p2 <= (state_data_V_load_54_reg_527 xor roundKey_data_V_q1);
    op2_V_read_assign_36_fu_408_p2 <= (state_data_V_load_55_reg_542 xor roundKey_data_V_q0);
    op2_V_read_assign_37_fu_414_p2 <= (state_data_V_load_56_reg_547 xor roundKey_data_V_q1);
    op2_V_read_assign_38_fu_420_p2 <= (state_data_V_load_57_reg_572 xor roundKey_data_V_q0);
    op2_V_read_assign_39_fu_426_p2 <= (state_data_V_load_58_reg_577 xor roundKey_data_V_q1);

    roundKey_data_V_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            roundKey_data_V_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            roundKey_data_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            roundKey_data_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            roundKey_data_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            roundKey_data_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            roundKey_data_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            roundKey_data_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            roundKey_data_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            roundKey_data_V_address0 <= "XXXX";
        end if; 
    end process;


    roundKey_data_V_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            roundKey_data_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            roundKey_data_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            roundKey_data_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            roundKey_data_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            roundKey_data_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            roundKey_data_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            roundKey_data_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            roundKey_data_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            roundKey_data_V_address1 <= "XXXX";
        end if; 
    end process;


    roundKey_data_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            roundKey_data_V_ce0 <= ap_const_logic_1;
        else 
            roundKey_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    roundKey_data_V_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            roundKey_data_V_ce1 <= ap_const_logic_1;
        else 
            roundKey_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    state_data_V_addr_46_reg_437 <= ap_const_lv64_1(4 - 1 downto 0);
    state_data_V_addr_47_reg_442 <= ap_const_lv64_2(4 - 1 downto 0);
    state_data_V_addr_48_reg_447 <= ap_const_lv64_3(4 - 1 downto 0);
    state_data_V_addr_49_reg_452 <= ap_const_lv64_4(4 - 1 downto 0);
    state_data_V_addr_50_reg_457 <= ap_const_lv64_5(4 - 1 downto 0);
    state_data_V_addr_51_reg_472 <= ap_const_lv64_6(4 - 1 downto 0);
    state_data_V_addr_52_reg_477 <= ap_const_lv64_7(4 - 1 downto 0);
    state_data_V_addr_53_reg_492 <= ap_const_lv64_8(4 - 1 downto 0);
    state_data_V_addr_54_reg_497 <= ap_const_lv64_9(4 - 1 downto 0);
    state_data_V_addr_55_reg_512 <= ap_const_lv64_A(4 - 1 downto 0);
    state_data_V_addr_56_reg_517 <= ap_const_lv64_B(4 - 1 downto 0);
    state_data_V_addr_57_reg_532 <= ap_const_lv64_C(4 - 1 downto 0);
    state_data_V_addr_58_reg_537 <= ap_const_lv64_D(4 - 1 downto 0);
    state_data_V_addr_59_reg_552 <= ap_const_lv64_E(4 - 1 downto 0);
    state_data_V_addr_60_reg_557 <= ap_const_lv64_F(4 - 1 downto 0);
    state_data_V_addr_reg_432 <= ap_const_lv64_0(4 - 1 downto 0);

    state_data_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_data_V_addr_reg_432, state_data_V_addr_47_reg_442, state_data_V_addr_49_reg_452, ap_CS_fsm_state3, state_data_V_addr_51_reg_472, ap_CS_fsm_state4, state_data_V_addr_53_reg_492, ap_CS_fsm_state5, state_data_V_addr_55_reg_512, ap_CS_fsm_state6, state_data_V_addr_57_reg_532, ap_CS_fsm_state7, state_data_V_addr_59_reg_552, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_data_V_address0 <= state_data_V_addr_59_reg_552;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_data_V_address0 <= state_data_V_addr_57_reg_532;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_data_V_address0 <= state_data_V_addr_55_reg_512;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_data_V_address0 <= state_data_V_addr_53_reg_492;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_data_V_address0 <= state_data_V_addr_51_reg_472;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_data_V_address0 <= state_data_V_addr_49_reg_452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_data_V_address0 <= state_data_V_addr_47_reg_442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_data_V_address0 <= state_data_V_addr_reg_432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            state_data_V_address0 <= "XXXX";
        end if; 
    end process;


    state_data_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, state_data_V_addr_46_reg_437, state_data_V_addr_48_reg_447, ap_CS_fsm_state3, state_data_V_addr_50_reg_457, ap_CS_fsm_state4, state_data_V_addr_52_reg_477, ap_CS_fsm_state5, state_data_V_addr_54_reg_497, ap_CS_fsm_state6, state_data_V_addr_56_reg_517, ap_CS_fsm_state7, state_data_V_addr_58_reg_537, ap_CS_fsm_state8, state_data_V_addr_60_reg_557, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            state_data_V_address1 <= state_data_V_addr_60_reg_557;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_data_V_address1 <= state_data_V_addr_58_reg_537;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_data_V_address1 <= state_data_V_addr_56_reg_517;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_data_V_address1 <= state_data_V_addr_54_reg_497;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_data_V_address1 <= state_data_V_addr_52_reg_477;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_data_V_address1 <= state_data_V_addr_50_reg_457;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_data_V_address1 <= state_data_V_addr_48_reg_447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            state_data_V_address1 <= state_data_V_addr_46_reg_437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            state_data_V_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            state_data_V_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            state_data_V_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            state_data_V_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_data_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_data_V_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_data_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            state_data_V_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            state_data_V_address1 <= "XXXX";
        end if; 
    end process;


    state_data_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_ce0 <= ap_const_logic_1;
        else 
            state_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state9, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_data_V_ce1 <= ap_const_logic_1;
        else 
            state_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_d0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_346_p2, op2_V_read_assign_28_fu_360_p2, op2_V_read_assign_30_fu_372_p2, op2_V_read_assign_32_fu_384_p2, op2_V_read_assign_34_fu_396_p2, op2_V_read_assign_36_fu_408_p2, op2_V_read_assign_38_fu_420_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_data_V_d0 <= op2_V_read_assign_38_fu_420_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_data_V_d0 <= op2_V_read_assign_36_fu_408_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_data_V_d0 <= op2_V_read_assign_34_fu_396_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_data_V_d0 <= op2_V_read_assign_32_fu_384_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_data_V_d0 <= op2_V_read_assign_30_fu_372_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_data_V_d0 <= op2_V_read_assign_28_fu_360_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_data_V_d0 <= grp_fu_346_p2;
        else 
            state_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_data_V_d1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, grp_fu_353_p2, op2_V_read_assign_29_fu_366_p2, op2_V_read_assign_31_fu_378_p2, op2_V_read_assign_33_fu_390_p2, op2_V_read_assign_35_fu_402_p2, op2_V_read_assign_37_fu_414_p2, op2_V_read_assign_39_fu_426_p2, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            state_data_V_d1 <= op2_V_read_assign_39_fu_426_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            state_data_V_d1 <= op2_V_read_assign_37_fu_414_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            state_data_V_d1 <= op2_V_read_assign_35_fu_402_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            state_data_V_d1 <= op2_V_read_assign_33_fu_390_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            state_data_V_d1 <= op2_V_read_assign_31_fu_378_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            state_data_V_d1 <= op2_V_read_assign_29_fu_366_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            state_data_V_d1 <= grp_fu_353_p2;
        else 
            state_data_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_data_V_we0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_data_V_we0 <= ap_const_logic_1;
        else 
            state_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_data_V_we1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            state_data_V_we1 <= ap_const_logic_1;
        else 
            state_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
