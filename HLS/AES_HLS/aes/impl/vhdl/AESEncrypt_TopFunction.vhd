-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AESEncrypt_TopFunction is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_text_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    stream_in_text_TVALID : IN STD_LOGIC;
    stream_in_text_TREADY : OUT STD_LOGIC;
    stream_in_text_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_text_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_text_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_text_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_text_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_text_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    stream_in_key_TVALID : IN STD_LOGIC;
    stream_in_key_TREADY : OUT STD_LOGIC;
    stream_in_key_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_key_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
    stream_in_key_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_key_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    stream_out_TVALID : OUT STD_LOGIC;
    stream_out_TREADY : IN STD_LOGIC;
    stream_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of AESEncrypt_TopFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "AESEncrypt_TopFunction,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.498000,HLS_SYN_LAT=2809,HLS_SYN_TPT=none,HLS_SYN_MEM=9,HLS_SYN_DSP=0,HLS_SYN_FF=2578,HLS_SYN_LUT=5824}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal stream_in_text_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_text_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_text_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_text_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_keep_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_keep_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_strb_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_text_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_strb_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_id_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_id_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_id_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_id_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_id_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_id_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_id_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_vld_out : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_ack_in : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_text_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_text_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_text_V_dest_V_0_sel : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_load_A : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_load_B : STD_LOGIC;
    signal stream_in_text_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_text_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_key_V_data_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_data_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_data_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_data_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_key_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_in_key_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_data_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_data_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_data_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_keep_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_keep_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_strb_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_in_key_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_strb_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_user_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_user_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_user_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_user_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_user_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_user_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_user_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_last_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_last_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_last_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_last_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_last_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_last_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_last_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_id_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_id_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_id_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_id_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_id_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_id_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_id_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_dest_V_0_vld_in : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_vld_out : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_ack_in : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_ack_out : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_in_key_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal stream_in_key_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal stream_in_key_V_dest_V_0_sel : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_load_A : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_load_B : STD_LOGIC;
    signal stream_in_key_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_in_key_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal stream_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_out_V_data_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_data_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_data_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal stream_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_data_V_1_sel : STD_LOGIC;
    signal stream_out_V_data_V_1_load_A : STD_LOGIC;
    signal stream_out_V_data_V_1_load_B : STD_LOGIC;
    signal stream_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_keep_V_1_sel : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_A : STD_LOGIC;
    signal stream_out_V_keep_V_1_load_B : STD_LOGIC;
    signal stream_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_strb_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_strb_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_strb_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal stream_out_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_strb_V_1_sel : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_A : STD_LOGIC;
    signal stream_out_V_strb_V_1_load_B : STD_LOGIC;
    signal stream_out_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_user_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_user_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_user_V_1_sel : STD_LOGIC;
    signal stream_out_V_user_V_1_load_A : STD_LOGIC;
    signal stream_out_V_user_V_1_load_B : STD_LOGIC;
    signal stream_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_last_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_last_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_last_V_1_sel : STD_LOGIC;
    signal stream_out_V_last_V_1_load_A : STD_LOGIC;
    signal stream_out_V_last_V_1_load_B : STD_LOGIC;
    signal stream_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_id_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_id_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_id_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_id_V_1_sel : STD_LOGIC;
    signal stream_out_V_id_V_1_load_A : STD_LOGIC;
    signal stream_out_V_id_V_1_load_B : STD_LOGIC;
    signal stream_out_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal stream_out_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_dest_V_1_vld_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_vld_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_in : STD_LOGIC;
    signal stream_out_V_dest_V_1_ack_out : STD_LOGIC;
    signal stream_out_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal stream_out_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal stream_out_V_dest_V_1_sel : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_A : STD_LOGIC;
    signal stream_out_V_dest_V_1_load_B : STD_LOGIC;
    signal stream_out_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal stream_out_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal i_fu_251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_348 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_60_cast_fu_265_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_60_cast_reg_353 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond11_i2_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_301_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_369 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_62_cast_fu_315_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_62_cast_reg_374 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond11_i_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal matrixText_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal matrixText_data_V_ce0 : STD_LOGIC;
    signal matrixText_data_V_we0 : STD_LOGIC;
    signal matrixText_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixText_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixText_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal matrixText_data_V_ce1 : STD_LOGIC;
    signal matrixText_data_V_we1 : STD_LOGIC;
    signal matrixText_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixText_data_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixKey_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal matrixKey_data_V_ce0 : STD_LOGIC;
    signal matrixKey_data_V_we0 : STD_LOGIC;
    signal matrixKey_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixKey_data_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal matrixKey_data_V_ce1 : STD_LOGIC;
    signal matrixKey_data_V_we1 : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_ap_start : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_ap_done : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_ap_idle : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_ap_ready : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_state_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesEncrypt_fu_174_state_data_V_ce0 : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_state_data_V_we0 : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_state_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aesEncrypt_fu_174_state_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesEncrypt_fu_174_state_data_V_ce1 : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_state_data_V_we1 : STD_LOGIC;
    signal grp_aesEncrypt_fu_174_state_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_aesEncrypt_fu_174_masterKey_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_aesEncrypt_fu_174_masterKey_data_V_ce0 : STD_LOGIC;
    signal grp_matrix2axi_fu_188_ap_start : STD_LOGIC;
    signal grp_matrix2axi_fu_188_ap_done : STD_LOGIC;
    signal grp_matrix2axi_fu_188_ap_idle : STD_LOGIC;
    signal grp_matrix2axi_fu_188_ap_ready : STD_LOGIC;
    signal grp_matrix2axi_fu_188_state_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix2axi_fu_188_state_data_V_ce0 : STD_LOGIC;
    signal grp_matrix2axi_fu_188_state_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix2axi_fu_188_state_data_V_ce1 : STD_LOGIC;
    signal grp_matrix2axi_fu_188_stream_out_TDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TVALID : STD_LOGIC;
    signal grp_matrix2axi_fu_188_stream_out_TREADY : STD_LOGIC;
    signal grp_matrix2axi_fu_188_stream_out_TKEEP : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matrix2axi_fu_188_stream_out_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_axi2matrix_fu_207_ap_start : STD_LOGIC;
    signal grp_axi2matrix_fu_207_ap_done : STD_LOGIC;
    signal grp_axi2matrix_fu_207_ap_idle : STD_LOGIC;
    signal grp_axi2matrix_fu_207_ap_ready : STD_LOGIC;
    signal grp_axi2matrix_fu_207_stream_in_key_TVALID : STD_LOGIC;
    signal grp_axi2matrix_fu_207_stream_in_key_TREADY : STD_LOGIC;
    signal grp_axi2matrix_fu_207_state_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axi2matrix_fu_207_state_data_V_ce0 : STD_LOGIC;
    signal grp_axi2matrix_fu_207_state_data_V_we0 : STD_LOGIC;
    signal grp_axi2matrix_fu_207_state_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axi2matrix_fu_207_state_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axi2matrix_fu_207_state_data_V_ce1 : STD_LOGIC;
    signal grp_axi2matrix_fu_207_state_data_V_we1 : STD_LOGIC;
    signal grp_axi2matrix_fu_207_state_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axi2matrix_fu_226_ap_start : STD_LOGIC;
    signal grp_axi2matrix_fu_226_ap_done : STD_LOGIC;
    signal grp_axi2matrix_fu_226_ap_idle : STD_LOGIC;
    signal grp_axi2matrix_fu_226_ap_ready : STD_LOGIC;
    signal grp_axi2matrix_fu_226_stream_in_key_TVALID : STD_LOGIC;
    signal grp_axi2matrix_fu_226_stream_in_key_TREADY : STD_LOGIC;
    signal grp_axi2matrix_fu_226_state_data_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axi2matrix_fu_226_state_data_V_ce0 : STD_LOGIC;
    signal grp_axi2matrix_fu_226_state_data_V_we0 : STD_LOGIC;
    signal grp_axi2matrix_fu_226_state_data_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_axi2matrix_fu_226_state_data_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_axi2matrix_fu_226_state_data_V_ce1 : STD_LOGIC;
    signal grp_axi2matrix_fu_226_state_data_V_we1 : STD_LOGIC;
    signal grp_axi2matrix_fu_226_state_data_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_i1_reg_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i6_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i5_reg_141 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_reg_152 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_i_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_i_reg_163 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_aesEncrypt_fu_174_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_matrix2axi_fu_188_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_axi2matrix_fu_207_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_axi2matrix_fu_226_ap_start_reg : STD_LOGIC := '0';
    signal tmp_63_cast_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_cast_fu_340_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_cast_fu_281_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_285_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_307_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_cast_fu_331_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_25_fu_335_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_state11 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state6_on_subcall_done : BOOLEAN;

    component aesEncrypt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce0 : OUT STD_LOGIC;
        state_data_V_we0 : OUT STD_LOGIC;
        state_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce1 : OUT STD_LOGIC;
        state_data_V_we1 : OUT STD_LOGIC;
        state_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        masterKey_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        masterKey_data_V_ce0 : OUT STD_LOGIC;
        masterKey_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component matrix2axi IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce0 : OUT STD_LOGIC;
        state_data_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce1 : OUT STD_LOGIC;
        state_data_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        stream_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        stream_out_TVALID : OUT STD_LOGIC;
        stream_out_TREADY : IN STD_LOGIC;
        stream_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_TSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        stream_out_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        stream_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        stream_out_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        stream_out_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component axi2matrix IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        stream_in_key_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        stream_in_key_TVALID : IN STD_LOGIC;
        stream_in_key_TREADY : OUT STD_LOGIC;
        stream_in_key_TKEEP : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_key_TSTRB : IN STD_LOGIC_VECTOR (15 downto 0);
        stream_in_key_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_key_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_key_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        stream_in_key_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        state_data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce0 : OUT STD_LOGIC;
        state_data_V_we0 : OUT STD_LOGIC;
        state_data_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_data_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        state_data_V_ce1 : OUT STD_LOGIC;
        state_data_V_we1 : OUT STD_LOGIC;
        state_data_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AESEncrypt_TopFunjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AESEncrypt_TopFunkbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component AESEncrypt_TopFunction_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    AESEncrypt_TopFunction_control_s_axi_U : component AESEncrypt_TopFunction_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    matrixText_data_V_U : component AESEncrypt_TopFunjbC
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matrixText_data_V_address0,
        ce0 => matrixText_data_V_ce0,
        we0 => matrixText_data_V_we0,
        d0 => matrixText_data_V_d0,
        q0 => matrixText_data_V_q0,
        address1 => matrixText_data_V_address1,
        ce1 => matrixText_data_V_ce1,
        we1 => matrixText_data_V_we1,
        d1 => matrixText_data_V_d1,
        q1 => matrixText_data_V_q1);

    matrixKey_data_V_U : component AESEncrypt_TopFunkbM
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => matrixKey_data_V_address0,
        ce0 => matrixKey_data_V_ce0,
        we0 => matrixKey_data_V_we0,
        d0 => matrixKey_data_V_d0,
        q0 => matrixKey_data_V_q0,
        address1 => grp_axi2matrix_fu_226_state_data_V_address1,
        ce1 => matrixKey_data_V_ce1,
        we1 => matrixKey_data_V_we1,
        d1 => grp_axi2matrix_fu_226_state_data_V_d1);

    grp_aesEncrypt_fu_174 : component aesEncrypt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_aesEncrypt_fu_174_ap_start,
        ap_done => grp_aesEncrypt_fu_174_ap_done,
        ap_idle => grp_aesEncrypt_fu_174_ap_idle,
        ap_ready => grp_aesEncrypt_fu_174_ap_ready,
        state_data_V_address0 => grp_aesEncrypt_fu_174_state_data_V_address0,
        state_data_V_ce0 => grp_aesEncrypt_fu_174_state_data_V_ce0,
        state_data_V_we0 => grp_aesEncrypt_fu_174_state_data_V_we0,
        state_data_V_d0 => grp_aesEncrypt_fu_174_state_data_V_d0,
        state_data_V_q0 => matrixText_data_V_q0,
        state_data_V_address1 => grp_aesEncrypt_fu_174_state_data_V_address1,
        state_data_V_ce1 => grp_aesEncrypt_fu_174_state_data_V_ce1,
        state_data_V_we1 => grp_aesEncrypt_fu_174_state_data_V_we1,
        state_data_V_d1 => grp_aesEncrypt_fu_174_state_data_V_d1,
        state_data_V_q1 => matrixText_data_V_q1,
        masterKey_data_V_address0 => grp_aesEncrypt_fu_174_masterKey_data_V_address0,
        masterKey_data_V_ce0 => grp_aesEncrypt_fu_174_masterKey_data_V_ce0,
        masterKey_data_V_q0 => matrixKey_data_V_q0);

    grp_matrix2axi_fu_188 : component matrix2axi
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matrix2axi_fu_188_ap_start,
        ap_done => grp_matrix2axi_fu_188_ap_done,
        ap_idle => grp_matrix2axi_fu_188_ap_idle,
        ap_ready => grp_matrix2axi_fu_188_ap_ready,
        state_data_V_address0 => grp_matrix2axi_fu_188_state_data_V_address0,
        state_data_V_ce0 => grp_matrix2axi_fu_188_state_data_V_ce0,
        state_data_V_q0 => matrixText_data_V_q0,
        state_data_V_address1 => grp_matrix2axi_fu_188_state_data_V_address1,
        state_data_V_ce1 => grp_matrix2axi_fu_188_state_data_V_ce1,
        state_data_V_q1 => matrixText_data_V_q1,
        stream_out_TDATA => grp_matrix2axi_fu_188_stream_out_TDATA,
        stream_out_TVALID => grp_matrix2axi_fu_188_stream_out_TVALID,
        stream_out_TREADY => grp_matrix2axi_fu_188_stream_out_TREADY,
        stream_out_TKEEP => grp_matrix2axi_fu_188_stream_out_TKEEP,
        stream_out_TSTRB => grp_matrix2axi_fu_188_stream_out_TSTRB,
        stream_out_TUSER => grp_matrix2axi_fu_188_stream_out_TUSER,
        stream_out_TLAST => grp_matrix2axi_fu_188_stream_out_TLAST,
        stream_out_TID => grp_matrix2axi_fu_188_stream_out_TID,
        stream_out_TDEST => grp_matrix2axi_fu_188_stream_out_TDEST);

    grp_axi2matrix_fu_207 : component axi2matrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_axi2matrix_fu_207_ap_start,
        ap_done => grp_axi2matrix_fu_207_ap_done,
        ap_idle => grp_axi2matrix_fu_207_ap_idle,
        ap_ready => grp_axi2matrix_fu_207_ap_ready,
        stream_in_key_TDATA => stream_in_text_V_data_V_0_data_out,
        stream_in_key_TVALID => grp_axi2matrix_fu_207_stream_in_key_TVALID,
        stream_in_key_TREADY => grp_axi2matrix_fu_207_stream_in_key_TREADY,
        stream_in_key_TKEEP => stream_in_text_V_keep_V_0_data_out,
        stream_in_key_TSTRB => stream_in_text_V_strb_V_0_data_out,
        stream_in_key_TUSER => stream_in_text_V_user_V_0_data_out,
        stream_in_key_TLAST => stream_in_text_V_last_V_0_data_out,
        stream_in_key_TID => stream_in_text_V_id_V_0_data_out,
        stream_in_key_TDEST => stream_in_text_V_dest_V_0_data_out,
        state_data_V_address0 => grp_axi2matrix_fu_207_state_data_V_address0,
        state_data_V_ce0 => grp_axi2matrix_fu_207_state_data_V_ce0,
        state_data_V_we0 => grp_axi2matrix_fu_207_state_data_V_we0,
        state_data_V_d0 => grp_axi2matrix_fu_207_state_data_V_d0,
        state_data_V_address1 => grp_axi2matrix_fu_207_state_data_V_address1,
        state_data_V_ce1 => grp_axi2matrix_fu_207_state_data_V_ce1,
        state_data_V_we1 => grp_axi2matrix_fu_207_state_data_V_we1,
        state_data_V_d1 => grp_axi2matrix_fu_207_state_data_V_d1);

    grp_axi2matrix_fu_226 : component axi2matrix
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_axi2matrix_fu_226_ap_start,
        ap_done => grp_axi2matrix_fu_226_ap_done,
        ap_idle => grp_axi2matrix_fu_226_ap_idle,
        ap_ready => grp_axi2matrix_fu_226_ap_ready,
        stream_in_key_TDATA => stream_in_key_V_data_V_0_data_out,
        stream_in_key_TVALID => grp_axi2matrix_fu_226_stream_in_key_TVALID,
        stream_in_key_TREADY => grp_axi2matrix_fu_226_stream_in_key_TREADY,
        stream_in_key_TKEEP => stream_in_key_V_keep_V_0_data_out,
        stream_in_key_TSTRB => stream_in_key_V_strb_V_0_data_out,
        stream_in_key_TUSER => stream_in_key_V_user_V_0_data_out,
        stream_in_key_TLAST => stream_in_key_V_last_V_0_data_out,
        stream_in_key_TID => stream_in_key_V_id_V_0_data_out,
        stream_in_key_TDEST => stream_in_key_V_dest_V_0_data_out,
        state_data_V_address0 => grp_axi2matrix_fu_226_state_data_V_address0,
        state_data_V_ce0 => grp_axi2matrix_fu_226_state_data_V_ce0,
        state_data_V_we0 => grp_axi2matrix_fu_226_state_data_V_we0,
        state_data_V_d0 => grp_axi2matrix_fu_226_state_data_V_d0,
        state_data_V_address1 => grp_axi2matrix_fu_226_state_data_V_address1,
        state_data_V_ce1 => grp_axi2matrix_fu_226_state_data_V_ce1,
        state_data_V_we1 => grp_axi2matrix_fu_226_state_data_V_we1,
        state_data_V_d1 => grp_axi2matrix_fu_226_state_data_V_d1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_aesEncrypt_fu_174_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_aesEncrypt_fu_174_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_aesEncrypt_fu_174_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_aesEncrypt_fu_174_ap_ready = ap_const_logic_1)) then 
                    grp_aesEncrypt_fu_174_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_axi2matrix_fu_207_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_axi2matrix_fu_207_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond11_i_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_axi2matrix_fu_207_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axi2matrix_fu_207_ap_ready = ap_const_logic_1)) then 
                    grp_axi2matrix_fu_207_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_axi2matrix_fu_226_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_axi2matrix_fu_226_ap_start_reg <= ap_const_logic_0;
            else
                if (((exitcond11_i_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grp_axi2matrix_fu_226_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_axi2matrix_fu_226_ap_ready = ap_const_logic_1)) then 
                    grp_axi2matrix_fu_226_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix2axi_fu_188_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matrix2axi_fu_188_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                    grp_matrix2axi_fu_188_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix2axi_fu_188_ap_ready = ap_const_logic_1)) then 
                    grp_matrix2axi_fu_188_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_data_V_0_sel_rd <= not(stream_in_key_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_data_V_0_sel_wr <= not(stream_in_key_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_data_V_0_state = ap_const_lv2_2) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_data_V_0_state = ap_const_lv2_3) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_data_V_0_state = ap_const_lv2_1) and (stream_in_key_V_data_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_data_V_0_state = ap_const_lv2_3) and (stream_in_key_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_data_V_0_state = ap_const_lv2_1) and (stream_in_key_V_data_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_data_V_0_state = ap_const_lv2_2) and (stream_in_key_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_dest_V_0_sel_rd <= not(stream_in_key_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_dest_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_dest_V_0_sel_wr <= not(stream_in_key_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_key_V_dest_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_key_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_dest_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_key_V_dest_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_key_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_id_V_0_sel_rd <= not(stream_in_key_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_id_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_id_V_0_sel_wr <= not(stream_in_key_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_id_V_0_state = ap_const_lv2_2) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_id_V_0_state = ap_const_lv2_3) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_id_V_0_state = ap_const_lv2_1) and (stream_in_key_V_id_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_id_V_0_state = ap_const_lv2_3) and (stream_in_key_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_id_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_id_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_id_V_0_state = ap_const_lv2_1) and (stream_in_key_V_id_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_id_V_0_state = ap_const_lv2_2) and (stream_in_key_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_keep_V_0_sel_rd <= not(stream_in_key_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_keep_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_keep_V_0_sel_wr <= not(stream_in_key_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_key_V_keep_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_key_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_keep_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_key_V_keep_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_key_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_last_V_0_sel_rd <= not(stream_in_key_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_last_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_last_V_0_sel_wr <= not(stream_in_key_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_last_V_0_state = ap_const_lv2_2) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_last_V_0_state = ap_const_lv2_3) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_last_V_0_state = ap_const_lv2_1) and (stream_in_key_V_last_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_last_V_0_state = ap_const_lv2_3) and (stream_in_key_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_last_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_last_V_0_state = ap_const_lv2_1) and (stream_in_key_V_last_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_last_V_0_state = ap_const_lv2_2) and (stream_in_key_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_strb_V_0_sel_rd <= not(stream_in_key_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_strb_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_strb_V_0_sel_wr <= not(stream_in_key_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_key_V_strb_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_key_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_strb_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_key_V_strb_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_key_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_key_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_key_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_key_V_user_V_0_sel_rd <= not(stream_in_key_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_key_V_user_V_0_ack_in = ap_const_logic_1) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_key_V_user_V_0_sel_wr <= not(stream_in_key_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_key_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_key_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_key_V_user_V_0_state = ap_const_lv2_2) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_0)) or ((stream_in_key_V_user_V_0_state = ap_const_lv2_3) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_key_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_key_V_user_V_0_state = ap_const_lv2_1) and (stream_in_key_V_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_key_V_user_V_0_state = ap_const_lv2_3) and (stream_in_key_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_key_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_key_V_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_key_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_key_V_user_V_0_state = ap_const_lv2_3)) or ((stream_in_key_V_user_V_0_state = ap_const_lv2_1) and (stream_in_key_V_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_key_V_user_V_0_state = ap_const_lv2_2) and (stream_in_key_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_key_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_key_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_data_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_data_V_0_sel_rd <= not(stream_in_text_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_data_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_data_V_0_sel_wr <= not(stream_in_text_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_data_V_0_state = ap_const_lv2_2) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_data_V_0_state = ap_const_lv2_3) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_data_V_0_state = ap_const_lv2_1) and (stream_in_text_V_data_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_data_V_0_state = ap_const_lv2_3) and (stream_in_text_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_data_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_data_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_data_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_data_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_data_V_0_state = ap_const_lv2_1) and (stream_in_text_V_data_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_data_V_0_state = ap_const_lv2_2) and (stream_in_text_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_dest_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_dest_V_0_sel_rd <= not(stream_in_text_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_dest_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_dest_V_0_sel_wr <= not(stream_in_text_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_text_V_dest_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_dest_V_0_state = ap_const_lv2_3) and (stream_in_text_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_dest_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_dest_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_dest_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_dest_V_0_state = ap_const_lv2_1) and (stream_in_text_V_dest_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_dest_V_0_state = ap_const_lv2_2) and (stream_in_text_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_id_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_id_V_0_sel_rd <= not(stream_in_text_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_id_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_id_V_0_sel_wr <= not(stream_in_text_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_id_V_0_state = ap_const_lv2_2) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_id_V_0_state = ap_const_lv2_3) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_id_V_0_state = ap_const_lv2_1) and (stream_in_text_V_id_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_id_V_0_state = ap_const_lv2_3) and (stream_in_text_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_id_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_id_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_id_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_id_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_id_V_0_state = ap_const_lv2_1) and (stream_in_text_V_id_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_id_V_0_state = ap_const_lv2_2) and (stream_in_text_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_keep_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_keep_V_0_sel_rd <= not(stream_in_text_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_keep_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_keep_V_0_sel_wr <= not(stream_in_text_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_text_V_keep_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_keep_V_0_state = ap_const_lv2_3) and (stream_in_text_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_keep_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_keep_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_keep_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_keep_V_0_state = ap_const_lv2_1) and (stream_in_text_V_keep_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_keep_V_0_state = ap_const_lv2_2) and (stream_in_text_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_last_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_last_V_0_sel_rd <= not(stream_in_text_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_last_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_last_V_0_sel_wr <= not(stream_in_text_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_last_V_0_state = ap_const_lv2_2) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_last_V_0_state = ap_const_lv2_3) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_last_V_0_state = ap_const_lv2_1) and (stream_in_text_V_last_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_last_V_0_state = ap_const_lv2_3) and (stream_in_text_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_last_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_last_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_last_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_last_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_last_V_0_state = ap_const_lv2_1) and (stream_in_text_V_last_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_last_V_0_state = ap_const_lv2_2) and (stream_in_text_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_strb_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_strb_V_0_sel_rd <= not(stream_in_text_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_strb_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_strb_V_0_sel_wr <= not(stream_in_text_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_text_V_strb_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_strb_V_0_state = ap_const_lv2_3) and (stream_in_text_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_strb_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_strb_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_strb_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_strb_V_0_state = ap_const_lv2_1) and (stream_in_text_V_strb_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_strb_V_0_state = ap_const_lv2_2) and (stream_in_text_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((stream_in_text_V_user_V_0_ack_out = ap_const_logic_1) and (stream_in_text_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        stream_in_text_V_user_V_0_sel_rd <= not(stream_in_text_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((stream_in_text_V_user_V_0_ack_in = ap_const_logic_1) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        stream_in_text_V_user_V_0_sel_wr <= not(stream_in_text_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_in_text_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_in_text_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((stream_in_text_V_user_V_0_state = ap_const_lv2_2) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_0)) or ((stream_in_text_V_user_V_0_state = ap_const_lv2_3) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    stream_in_text_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((stream_in_text_V_user_V_0_state = ap_const_lv2_1) and (stream_in_text_V_user_V_0_ack_out = ap_const_logic_0)) or ((stream_in_text_V_user_V_0_state = ap_const_lv2_3) and (stream_in_text_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((stream_in_text_V_user_V_0_vld_in = ap_const_logic_0) and (stream_in_text_V_user_V_0_ack_out = ap_const_logic_1))) and not(((stream_in_text_V_user_V_0_ack_out = ap_const_logic_0) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_1))) and (stream_in_text_V_user_V_0_state = ap_const_lv2_3)) or ((stream_in_text_V_user_V_0_state = ap_const_lv2_1) and (stream_in_text_V_user_V_0_ack_out = ap_const_logic_1)) or ((stream_in_text_V_user_V_0_state = ap_const_lv2_2) and (stream_in_text_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    stream_in_text_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    stream_in_text_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_out = ap_const_logic_1) and (stream_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_rd <= not(stream_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_data_V_1_ack_in = ap_const_logic_1) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_data_V_1_sel_wr <= not(stream_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_data_V_1_state = ap_const_lv2_3) and (stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_data_V_1_vld_in = ap_const_logic_0) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_data_V_1_ack_out = ap_const_logic_0) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_data_V_1_state = ap_const_lv2_3)) or ((stream_out_V_data_V_1_state = ap_const_lv2_1) and (stream_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_data_V_1_state = ap_const_lv2_2) and (stream_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_out = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_rd <= not(stream_out_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_dest_V_1_ack_in = ap_const_logic_1) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_dest_V_1_sel_wr <= not(stream_out_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_3) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_dest_V_1_vld_in = ap_const_logic_0) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_dest_V_1_ack_out = ap_const_logic_0) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_dest_V_1_state = ap_const_lv2_3)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_1) and (stream_out_V_dest_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_dest_V_1_state = ap_const_lv2_2) and (stream_out_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_out = ap_const_logic_1) and (stream_out_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_rd <= not(stream_out_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_id_V_1_ack_in = ap_const_logic_1) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_id_V_1_sel_wr <= not(stream_out_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_id_V_1_state = ap_const_lv2_3) and (stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_id_V_1_vld_in = ap_const_logic_0) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_id_V_1_ack_out = ap_const_logic_0) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_id_V_1_state = ap_const_lv2_3)) or ((stream_out_V_id_V_1_state = ap_const_lv2_1) and (stream_out_V_id_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_id_V_1_state = ap_const_lv2_2) and (stream_out_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_out = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_rd <= not(stream_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_keep_V_1_ack_in = ap_const_logic_1) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_keep_V_1_sel_wr <= not(stream_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_3) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_keep_V_1_vld_in = ap_const_logic_0) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_keep_V_1_ack_out = ap_const_logic_0) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_keep_V_1_state = ap_const_lv2_3)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_1) and (stream_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_keep_V_1_state = ap_const_lv2_2) and (stream_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_out = ap_const_logic_1) and (stream_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_rd <= not(stream_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_last_V_1_ack_in = ap_const_logic_1) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_last_V_1_sel_wr <= not(stream_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_last_V_1_state = ap_const_lv2_3) and (stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_last_V_1_vld_in = ap_const_logic_0) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_last_V_1_ack_out = ap_const_logic_0) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_last_V_1_state = ap_const_lv2_3)) or ((stream_out_V_last_V_1_state = ap_const_lv2_1) and (stream_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_last_V_1_state = ap_const_lv2_2) and (stream_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_out = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_rd <= not(stream_out_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_strb_V_1_ack_in = ap_const_logic_1) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_strb_V_1_sel_wr <= not(stream_out_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_3) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_strb_V_1_vld_in = ap_const_logic_0) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_strb_V_1_ack_out = ap_const_logic_0) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_strb_V_1_state = ap_const_lv2_3)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_1) and (stream_out_V_strb_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_strb_V_1_state = ap_const_lv2_2) and (stream_out_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_out = ap_const_logic_1) and (stream_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_rd <= not(stream_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((stream_out_V_user_V_1_ack_in = ap_const_logic_1) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        stream_out_V_user_V_1_sel_wr <= not(stream_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    stream_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                stream_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0)) or ((stream_out_V_user_V_1_state = ap_const_lv2_3) and (stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((stream_out_V_user_V_1_vld_in = ap_const_logic_0) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((stream_out_V_user_V_1_ack_out = ap_const_logic_0) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1))) and (stream_out_V_user_V_1_state = ap_const_lv2_3)) or ((stream_out_V_user_V_1_state = ap_const_lv2_1) and (stream_out_V_user_V_1_ack_out = ap_const_logic_1)) or ((stream_out_V_user_V_1_state = ap_const_lv2_2) and (stream_out_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    stream_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    stream_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i6_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_i1_reg_130 <= i_reg_348;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_i1_reg_130 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_i2_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_i_reg_152 <= ap_const_lv3_0;
            elsif (((exitcond_i_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_0_i_reg_152 <= i_1_reg_369;
            end if; 
        end if;
    end process;

    j_0_i5_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_i2_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_i5_reg_141 <= ap_const_lv3_0;
            elsif (((exitcond_i6_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_i5_reg_141 <= j_fu_275_p2;
            end if; 
        end if;
    end process;

    j_0_i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_i_reg_163 <= ap_const_lv3_0;
            elsif (((exitcond_i_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_i_reg_163 <= j_1_fu_325_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                i_1_reg_369 <= i_1_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_348 <= i_fu_251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_data_V_0_payload_A <= stream_in_key_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_data_V_0_payload_B <= stream_in_key_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_dest_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_dest_V_0_payload_A <= stream_in_key_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_dest_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_dest_V_0_payload_B <= stream_in_key_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_id_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_id_V_0_payload_A <= stream_in_key_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_id_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_id_V_0_payload_B <= stream_in_key_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_keep_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_keep_V_0_payload_A <= stream_in_key_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_keep_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_keep_V_0_payload_B <= stream_in_key_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_last_V_0_payload_A <= stream_in_key_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_last_V_0_payload_B <= stream_in_key_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_strb_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_strb_V_0_payload_A <= stream_in_key_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_strb_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_strb_V_0_payload_B <= stream_in_key_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_key_V_user_V_0_payload_A <= stream_in_key_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_key_V_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_key_V_user_V_0_payload_B <= stream_in_key_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_data_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_data_V_0_payload_A <= stream_in_text_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_data_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_data_V_0_payload_B <= stream_in_text_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_dest_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_dest_V_0_payload_A <= stream_in_text_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_dest_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_dest_V_0_payload_B <= stream_in_text_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_id_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_id_V_0_payload_A <= stream_in_text_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_id_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_id_V_0_payload_B <= stream_in_text_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_keep_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_keep_V_0_payload_A <= stream_in_text_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_keep_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_keep_V_0_payload_B <= stream_in_text_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_last_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_last_V_0_payload_A <= stream_in_text_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_last_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_last_V_0_payload_B <= stream_in_text_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_strb_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_strb_V_0_payload_A <= stream_in_text_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_strb_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_strb_V_0_payload_B <= stream_in_text_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_user_V_0_load_A = ap_const_logic_1)) then
                stream_in_text_V_user_V_0_payload_A <= stream_in_text_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_in_text_V_user_V_0_load_B = ap_const_logic_1)) then
                stream_in_text_V_user_V_0_payload_B <= stream_in_text_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_data_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_data_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_dest_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_dest_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_id_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_id_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_keep_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_last_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_last_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_strb_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_strb_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_A = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_A <= grp_matrix2axi_fu_188_stream_out_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((stream_out_V_user_V_1_load_B = ap_const_logic_1)) then
                stream_out_V_user_V_1_payload_B <= grp_matrix2axi_fu_188_stream_out_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_i2_fu_245_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    tmp_60_cast_reg_353(4 downto 2) <= tmp_60_cast_fu_265_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond11_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_62_cast_reg_374(4 downto 2) <= tmp_62_cast_fu_315_p1(4 downto 2);
            end if;
        end if;
    end process;
    tmp_60_cast_reg_353(1 downto 0) <= "00";
    tmp_60_cast_reg_353(5) <= '0';
    tmp_62_cast_reg_374(1 downto 0) <= "00";
    tmp_62_cast_reg_374(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state2, exitcond11_i2_fu_245_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond11_i_fu_295_p2, ap_CS_fsm_state5, grp_aesEncrypt_fu_174_ap_done, grp_matrix2axi_fu_188_ap_done, exitcond_i6_fu_269_p2, exitcond_i_fu_319_p2, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_block_state6_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond11_i2_fu_245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_i6_fu_269_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond11_i_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state5 => 
                if (((exitcond_i_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_aesEncrypt_fu_174_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (grp_matrix2axi_fu_188_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0) or (stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in)
    begin
                ap_block_state11 <= ((stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0) or (stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_axi2matrix_fu_207_ap_done, grp_axi2matrix_fu_226_ap_done)
    begin
                ap_block_state6_on_subcall_done <= ((grp_axi2matrix_fu_226_ap_done = ap_const_logic_0) or (grp_axi2matrix_fu_207_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if ((not(((stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0) or (stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(stream_out_V_data_V_1_ack_in, stream_out_V_keep_V_1_ack_in, stream_out_V_strb_V_1_ack_in, stream_out_V_user_V_1_ack_in, stream_out_V_last_V_1_ack_in, stream_out_V_id_V_1_ack_in, stream_out_V_dest_V_1_ack_in, ap_CS_fsm_state11)
    begin
        if ((not(((stream_out_V_strb_V_1_ack_in = ap_const_logic_0) or (stream_out_V_keep_V_1_ack_in = ap_const_logic_0) or (stream_out_V_data_V_1_ack_in = ap_const_logic_0) or (stream_out_V_dest_V_1_ack_in = ap_const_logic_0) or (stream_out_V_id_V_1_ack_in = ap_const_logic_0) or (stream_out_V_last_V_1_ack_in = ap_const_logic_0) or (stream_out_V_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond11_i2_fu_245_p2 <= "1" when (i_0_i1_reg_130 = ap_const_lv3_4) else "0";
    exitcond11_i_fu_295_p2 <= "1" when (i_0_i_reg_152 = ap_const_lv3_4) else "0";
    exitcond_i6_fu_269_p2 <= "1" when (j_0_i5_reg_141 = ap_const_lv3_4) else "0";
    exitcond_i_fu_319_p2 <= "1" when (j_0_i_reg_163 = ap_const_lv3_4) else "0";
    grp_aesEncrypt_fu_174_ap_start <= grp_aesEncrypt_fu_174_ap_start_reg;
    grp_axi2matrix_fu_207_ap_start <= grp_axi2matrix_fu_207_ap_start_reg;
    grp_axi2matrix_fu_207_stream_in_key_TVALID <= stream_in_text_V_dest_V_0_state(0);
    grp_axi2matrix_fu_226_ap_start <= grp_axi2matrix_fu_226_ap_start_reg;
    grp_axi2matrix_fu_226_stream_in_key_TVALID <= stream_in_key_V_dest_V_0_state(0);
    grp_matrix2axi_fu_188_ap_start <= grp_matrix2axi_fu_188_ap_start_reg;
    grp_matrix2axi_fu_188_stream_out_TREADY <= stream_out_V_dest_V_1_state(1);
    i_1_fu_301_p2 <= std_logic_vector(unsigned(i_0_i_reg_152) + unsigned(ap_const_lv3_1));
    i_fu_251_p2 <= std_logic_vector(unsigned(i_0_i1_reg_130) + unsigned(ap_const_lv3_1));
    j_1_fu_325_p2 <= std_logic_vector(unsigned(j_0_i_reg_163) + unsigned(ap_const_lv3_1));
    j_fu_275_p2 <= std_logic_vector(unsigned(j_0_i5_reg_141) + unsigned(ap_const_lv3_1));

    matrixKey_data_V_address0_assign_proc : process(ap_CS_fsm_state5, grp_aesEncrypt_fu_174_masterKey_data_V_address0, grp_axi2matrix_fu_226_state_data_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state6, tmp_64_cast_fu_340_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matrixKey_data_V_address0 <= tmp_64_cast_fu_340_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_address0 <= grp_axi2matrix_fu_226_state_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixKey_data_V_address0 <= grp_aesEncrypt_fu_174_masterKey_data_V_address0;
        else 
            matrixKey_data_V_address0 <= "XXXX";
        end if; 
    end process;


    matrixKey_data_V_ce0_assign_proc : process(ap_CS_fsm_state5, grp_aesEncrypt_fu_174_masterKey_data_V_ce0, grp_axi2matrix_fu_226_state_data_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matrixKey_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_ce0 <= grp_axi2matrix_fu_226_state_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixKey_data_V_ce0 <= grp_aesEncrypt_fu_174_masterKey_data_V_ce0;
        else 
            matrixKey_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrixKey_data_V_ce1_assign_proc : process(grp_axi2matrix_fu_226_state_data_V_ce1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_ce1 <= grp_axi2matrix_fu_226_state_data_V_ce1;
        else 
            matrixKey_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matrixKey_data_V_d0_assign_proc : process(ap_CS_fsm_state5, grp_axi2matrix_fu_226_state_data_V_d0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            matrixKey_data_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_d0 <= grp_axi2matrix_fu_226_state_data_V_d0;
        else 
            matrixKey_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    matrixKey_data_V_we0_assign_proc : process(ap_CS_fsm_state5, grp_axi2matrix_fu_226_state_data_V_we0, exitcond_i_fu_319_p2, ap_CS_fsm_state6)
    begin
        if (((exitcond_i_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            matrixKey_data_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_we0 <= grp_axi2matrix_fu_226_state_data_V_we0;
        else 
            matrixKey_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matrixKey_data_V_we1_assign_proc : process(grp_axi2matrix_fu_226_state_data_V_we1, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixKey_data_V_we1 <= grp_axi2matrix_fu_226_state_data_V_we1;
        else 
            matrixKey_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    matrixText_data_V_address0_assign_proc : process(ap_CS_fsm_state3, grp_aesEncrypt_fu_174_state_data_V_address0, grp_matrix2axi_fu_188_state_data_V_address0, grp_axi2matrix_fu_207_state_data_V_address0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6, tmp_63_cast_fu_290_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrixText_data_V_address0 <= tmp_63_cast_fu_290_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_address0 <= grp_axi2matrix_fu_207_state_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matrixText_data_V_address0 <= grp_matrix2axi_fu_188_state_data_V_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_address0 <= grp_aesEncrypt_fu_174_state_data_V_address0;
        else 
            matrixText_data_V_address0 <= "XXXX";
        end if; 
    end process;


    matrixText_data_V_address1_assign_proc : process(grp_aesEncrypt_fu_174_state_data_V_address1, grp_matrix2axi_fu_188_state_data_V_address1, grp_axi2matrix_fu_207_state_data_V_address1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_address1 <= grp_axi2matrix_fu_207_state_data_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matrixText_data_V_address1 <= grp_matrix2axi_fu_188_state_data_V_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_address1 <= grp_aesEncrypt_fu_174_state_data_V_address1;
        else 
            matrixText_data_V_address1 <= "XXXX";
        end if; 
    end process;


    matrixText_data_V_ce0_assign_proc : process(ap_CS_fsm_state3, grp_aesEncrypt_fu_174_state_data_V_ce0, grp_matrix2axi_fu_188_state_data_V_ce0, grp_axi2matrix_fu_207_state_data_V_ce0, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrixText_data_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_ce0 <= grp_axi2matrix_fu_207_state_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matrixText_data_V_ce0 <= grp_matrix2axi_fu_188_state_data_V_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_ce0 <= grp_aesEncrypt_fu_174_state_data_V_ce0;
        else 
            matrixText_data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    matrixText_data_V_ce1_assign_proc : process(grp_aesEncrypt_fu_174_state_data_V_ce1, grp_matrix2axi_fu_188_state_data_V_ce1, grp_axi2matrix_fu_207_state_data_V_ce1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_ce1 <= grp_axi2matrix_fu_207_state_data_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            matrixText_data_V_ce1 <= grp_matrix2axi_fu_188_state_data_V_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_ce1 <= grp_aesEncrypt_fu_174_state_data_V_ce1;
        else 
            matrixText_data_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    matrixText_data_V_d0_assign_proc : process(ap_CS_fsm_state3, grp_aesEncrypt_fu_174_state_data_V_d0, grp_axi2matrix_fu_207_state_data_V_d0, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            matrixText_data_V_d0 <= ap_const_lv8_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_d0 <= grp_axi2matrix_fu_207_state_data_V_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_d0 <= grp_aesEncrypt_fu_174_state_data_V_d0;
        else 
            matrixText_data_V_d0 <= "XXXXXXXX";
        end if; 
    end process;


    matrixText_data_V_d1_assign_proc : process(grp_aesEncrypt_fu_174_state_data_V_d1, grp_axi2matrix_fu_207_state_data_V_d1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_d1 <= grp_axi2matrix_fu_207_state_data_V_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_d1 <= grp_aesEncrypt_fu_174_state_data_V_d1;
        else 
            matrixText_data_V_d1 <= "XXXXXXXX";
        end if; 
    end process;


    matrixText_data_V_we0_assign_proc : process(ap_CS_fsm_state3, grp_aesEncrypt_fu_174_state_data_V_we0, grp_axi2matrix_fu_207_state_data_V_we0, exitcond_i6_fu_269_p2, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if (((exitcond_i6_fu_269_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            matrixText_data_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_we0 <= grp_axi2matrix_fu_207_state_data_V_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_we0 <= grp_aesEncrypt_fu_174_state_data_V_we0;
        else 
            matrixText_data_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    matrixText_data_V_we1_assign_proc : process(grp_aesEncrypt_fu_174_state_data_V_we1, grp_axi2matrix_fu_207_state_data_V_we1, ap_CS_fsm_state8, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            matrixText_data_V_we1 <= grp_axi2matrix_fu_207_state_data_V_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            matrixText_data_V_we1 <= grp_aesEncrypt_fu_174_state_data_V_we1;
        else 
            matrixText_data_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    stream_in_key_TREADY <= stream_in_key_V_dest_V_0_state(1);
    stream_in_key_V_data_V_0_ack_in <= stream_in_key_V_data_V_0_state(1);

    stream_in_key_V_data_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_data_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_data_V_0_data_out_assign_proc : process(stream_in_key_V_data_V_0_payload_A, stream_in_key_V_data_V_0_payload_B, stream_in_key_V_data_V_0_sel)
    begin
        if ((stream_in_key_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_data_V_0_data_out <= stream_in_key_V_data_V_0_payload_B;
        else 
            stream_in_key_V_data_V_0_data_out <= stream_in_key_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_data_V_0_load_A <= (stream_in_key_V_data_V_0_state_cmp_full and not(stream_in_key_V_data_V_0_sel_wr));
    stream_in_key_V_data_V_0_load_B <= (stream_in_key_V_data_V_0_state_cmp_full and stream_in_key_V_data_V_0_sel_wr);
    stream_in_key_V_data_V_0_sel <= stream_in_key_V_data_V_0_sel_rd;
    stream_in_key_V_data_V_0_state_cmp_full <= '0' when (stream_in_key_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_data_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_data_V_0_vld_out <= stream_in_key_V_data_V_0_state(0);
    stream_in_key_V_dest_V_0_ack_in <= stream_in_key_V_dest_V_0_state(1);

    stream_in_key_V_dest_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_dest_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_dest_V_0_data_out_assign_proc : process(stream_in_key_V_dest_V_0_payload_A, stream_in_key_V_dest_V_0_payload_B, stream_in_key_V_dest_V_0_sel)
    begin
        if ((stream_in_key_V_dest_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_dest_V_0_data_out <= stream_in_key_V_dest_V_0_payload_B;
        else 
            stream_in_key_V_dest_V_0_data_out <= stream_in_key_V_dest_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_dest_V_0_load_A <= (stream_in_key_V_dest_V_0_state_cmp_full and not(stream_in_key_V_dest_V_0_sel_wr));
    stream_in_key_V_dest_V_0_load_B <= (stream_in_key_V_dest_V_0_state_cmp_full and stream_in_key_V_dest_V_0_sel_wr);
    stream_in_key_V_dest_V_0_sel <= stream_in_key_V_dest_V_0_sel_rd;
    stream_in_key_V_dest_V_0_state_cmp_full <= '0' when (stream_in_key_V_dest_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_dest_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_dest_V_0_vld_out <= stream_in_key_V_dest_V_0_state(0);
    stream_in_key_V_id_V_0_ack_in <= stream_in_key_V_id_V_0_state(1);

    stream_in_key_V_id_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_id_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_id_V_0_data_out_assign_proc : process(stream_in_key_V_id_V_0_payload_A, stream_in_key_V_id_V_0_payload_B, stream_in_key_V_id_V_0_sel)
    begin
        if ((stream_in_key_V_id_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_id_V_0_data_out <= stream_in_key_V_id_V_0_payload_B;
        else 
            stream_in_key_V_id_V_0_data_out <= stream_in_key_V_id_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_id_V_0_load_A <= (stream_in_key_V_id_V_0_state_cmp_full and not(stream_in_key_V_id_V_0_sel_wr));
    stream_in_key_V_id_V_0_load_B <= (stream_in_key_V_id_V_0_state_cmp_full and stream_in_key_V_id_V_0_sel_wr);
    stream_in_key_V_id_V_0_sel <= stream_in_key_V_id_V_0_sel_rd;
    stream_in_key_V_id_V_0_state_cmp_full <= '0' when (stream_in_key_V_id_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_id_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_id_V_0_vld_out <= stream_in_key_V_id_V_0_state(0);
    stream_in_key_V_keep_V_0_ack_in <= stream_in_key_V_keep_V_0_state(1);

    stream_in_key_V_keep_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_keep_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_keep_V_0_data_out_assign_proc : process(stream_in_key_V_keep_V_0_payload_A, stream_in_key_V_keep_V_0_payload_B, stream_in_key_V_keep_V_0_sel)
    begin
        if ((stream_in_key_V_keep_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_keep_V_0_data_out <= stream_in_key_V_keep_V_0_payload_B;
        else 
            stream_in_key_V_keep_V_0_data_out <= stream_in_key_V_keep_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_keep_V_0_load_A <= (stream_in_key_V_keep_V_0_state_cmp_full and not(stream_in_key_V_keep_V_0_sel_wr));
    stream_in_key_V_keep_V_0_load_B <= (stream_in_key_V_keep_V_0_state_cmp_full and stream_in_key_V_keep_V_0_sel_wr);
    stream_in_key_V_keep_V_0_sel <= stream_in_key_V_keep_V_0_sel_rd;
    stream_in_key_V_keep_V_0_state_cmp_full <= '0' when (stream_in_key_V_keep_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_keep_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_keep_V_0_vld_out <= stream_in_key_V_keep_V_0_state(0);
    stream_in_key_V_last_V_0_ack_in <= stream_in_key_V_last_V_0_state(1);

    stream_in_key_V_last_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_last_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_last_V_0_data_out_assign_proc : process(stream_in_key_V_last_V_0_payload_A, stream_in_key_V_last_V_0_payload_B, stream_in_key_V_last_V_0_sel)
    begin
        if ((stream_in_key_V_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_last_V_0_data_out <= stream_in_key_V_last_V_0_payload_B;
        else 
            stream_in_key_V_last_V_0_data_out <= stream_in_key_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_last_V_0_load_A <= (stream_in_key_V_last_V_0_state_cmp_full and not(stream_in_key_V_last_V_0_sel_wr));
    stream_in_key_V_last_V_0_load_B <= (stream_in_key_V_last_V_0_state_cmp_full and stream_in_key_V_last_V_0_sel_wr);
    stream_in_key_V_last_V_0_sel <= stream_in_key_V_last_V_0_sel_rd;
    stream_in_key_V_last_V_0_state_cmp_full <= '0' when (stream_in_key_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_last_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_last_V_0_vld_out <= stream_in_key_V_last_V_0_state(0);
    stream_in_key_V_strb_V_0_ack_in <= stream_in_key_V_strb_V_0_state(1);

    stream_in_key_V_strb_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_strb_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_strb_V_0_data_out_assign_proc : process(stream_in_key_V_strb_V_0_payload_A, stream_in_key_V_strb_V_0_payload_B, stream_in_key_V_strb_V_0_sel)
    begin
        if ((stream_in_key_V_strb_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_strb_V_0_data_out <= stream_in_key_V_strb_V_0_payload_B;
        else 
            stream_in_key_V_strb_V_0_data_out <= stream_in_key_V_strb_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_strb_V_0_load_A <= (stream_in_key_V_strb_V_0_state_cmp_full and not(stream_in_key_V_strb_V_0_sel_wr));
    stream_in_key_V_strb_V_0_load_B <= (stream_in_key_V_strb_V_0_state_cmp_full and stream_in_key_V_strb_V_0_sel_wr);
    stream_in_key_V_strb_V_0_sel <= stream_in_key_V_strb_V_0_sel_rd;
    stream_in_key_V_strb_V_0_state_cmp_full <= '0' when (stream_in_key_V_strb_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_strb_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_strb_V_0_vld_out <= stream_in_key_V_strb_V_0_state(0);
    stream_in_key_V_user_V_0_ack_in <= stream_in_key_V_user_V_0_state(1);

    stream_in_key_V_user_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_226_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_key_V_user_V_0_ack_out <= grp_axi2matrix_fu_226_stream_in_key_TREADY;
        else 
            stream_in_key_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_key_V_user_V_0_data_out_assign_proc : process(stream_in_key_V_user_V_0_payload_A, stream_in_key_V_user_V_0_payload_B, stream_in_key_V_user_V_0_sel)
    begin
        if ((stream_in_key_V_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_key_V_user_V_0_data_out <= stream_in_key_V_user_V_0_payload_B;
        else 
            stream_in_key_V_user_V_0_data_out <= stream_in_key_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_key_V_user_V_0_load_A <= (stream_in_key_V_user_V_0_state_cmp_full and not(stream_in_key_V_user_V_0_sel_wr));
    stream_in_key_V_user_V_0_load_B <= (stream_in_key_V_user_V_0_state_cmp_full and stream_in_key_V_user_V_0_sel_wr);
    stream_in_key_V_user_V_0_sel <= stream_in_key_V_user_V_0_sel_rd;
    stream_in_key_V_user_V_0_state_cmp_full <= '0' when (stream_in_key_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_key_V_user_V_0_vld_in <= stream_in_key_TVALID;
    stream_in_key_V_user_V_0_vld_out <= stream_in_key_V_user_V_0_state(0);
    stream_in_text_TREADY <= stream_in_text_V_dest_V_0_state(1);
    stream_in_text_V_data_V_0_ack_in <= stream_in_text_V_data_V_0_state(1);

    stream_in_text_V_data_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_data_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_data_V_0_data_out_assign_proc : process(stream_in_text_V_data_V_0_payload_A, stream_in_text_V_data_V_0_payload_B, stream_in_text_V_data_V_0_sel)
    begin
        if ((stream_in_text_V_data_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_data_V_0_data_out <= stream_in_text_V_data_V_0_payload_B;
        else 
            stream_in_text_V_data_V_0_data_out <= stream_in_text_V_data_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_data_V_0_load_A <= (stream_in_text_V_data_V_0_state_cmp_full and not(stream_in_text_V_data_V_0_sel_wr));
    stream_in_text_V_data_V_0_load_B <= (stream_in_text_V_data_V_0_state_cmp_full and stream_in_text_V_data_V_0_sel_wr);
    stream_in_text_V_data_V_0_sel <= stream_in_text_V_data_V_0_sel_rd;
    stream_in_text_V_data_V_0_state_cmp_full <= '0' when (stream_in_text_V_data_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_data_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_data_V_0_vld_out <= stream_in_text_V_data_V_0_state(0);
    stream_in_text_V_dest_V_0_ack_in <= stream_in_text_V_dest_V_0_state(1);

    stream_in_text_V_dest_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_dest_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_dest_V_0_data_out_assign_proc : process(stream_in_text_V_dest_V_0_payload_A, stream_in_text_V_dest_V_0_payload_B, stream_in_text_V_dest_V_0_sel)
    begin
        if ((stream_in_text_V_dest_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_dest_V_0_data_out <= stream_in_text_V_dest_V_0_payload_B;
        else 
            stream_in_text_V_dest_V_0_data_out <= stream_in_text_V_dest_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_dest_V_0_load_A <= (stream_in_text_V_dest_V_0_state_cmp_full and not(stream_in_text_V_dest_V_0_sel_wr));
    stream_in_text_V_dest_V_0_load_B <= (stream_in_text_V_dest_V_0_state_cmp_full and stream_in_text_V_dest_V_0_sel_wr);
    stream_in_text_V_dest_V_0_sel <= stream_in_text_V_dest_V_0_sel_rd;
    stream_in_text_V_dest_V_0_state_cmp_full <= '0' when (stream_in_text_V_dest_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_dest_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_dest_V_0_vld_out <= stream_in_text_V_dest_V_0_state(0);
    stream_in_text_V_id_V_0_ack_in <= stream_in_text_V_id_V_0_state(1);

    stream_in_text_V_id_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_id_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_id_V_0_data_out_assign_proc : process(stream_in_text_V_id_V_0_payload_A, stream_in_text_V_id_V_0_payload_B, stream_in_text_V_id_V_0_sel)
    begin
        if ((stream_in_text_V_id_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_id_V_0_data_out <= stream_in_text_V_id_V_0_payload_B;
        else 
            stream_in_text_V_id_V_0_data_out <= stream_in_text_V_id_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_id_V_0_load_A <= (stream_in_text_V_id_V_0_state_cmp_full and not(stream_in_text_V_id_V_0_sel_wr));
    stream_in_text_V_id_V_0_load_B <= (stream_in_text_V_id_V_0_state_cmp_full and stream_in_text_V_id_V_0_sel_wr);
    stream_in_text_V_id_V_0_sel <= stream_in_text_V_id_V_0_sel_rd;
    stream_in_text_V_id_V_0_state_cmp_full <= '0' when (stream_in_text_V_id_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_id_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_id_V_0_vld_out <= stream_in_text_V_id_V_0_state(0);
    stream_in_text_V_keep_V_0_ack_in <= stream_in_text_V_keep_V_0_state(1);

    stream_in_text_V_keep_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_keep_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_keep_V_0_data_out_assign_proc : process(stream_in_text_V_keep_V_0_payload_A, stream_in_text_V_keep_V_0_payload_B, stream_in_text_V_keep_V_0_sel)
    begin
        if ((stream_in_text_V_keep_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_keep_V_0_data_out <= stream_in_text_V_keep_V_0_payload_B;
        else 
            stream_in_text_V_keep_V_0_data_out <= stream_in_text_V_keep_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_keep_V_0_load_A <= (stream_in_text_V_keep_V_0_state_cmp_full and not(stream_in_text_V_keep_V_0_sel_wr));
    stream_in_text_V_keep_V_0_load_B <= (stream_in_text_V_keep_V_0_state_cmp_full and stream_in_text_V_keep_V_0_sel_wr);
    stream_in_text_V_keep_V_0_sel <= stream_in_text_V_keep_V_0_sel_rd;
    stream_in_text_V_keep_V_0_state_cmp_full <= '0' when (stream_in_text_V_keep_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_keep_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_keep_V_0_vld_out <= stream_in_text_V_keep_V_0_state(0);
    stream_in_text_V_last_V_0_ack_in <= stream_in_text_V_last_V_0_state(1);

    stream_in_text_V_last_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_last_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_last_V_0_data_out_assign_proc : process(stream_in_text_V_last_V_0_payload_A, stream_in_text_V_last_V_0_payload_B, stream_in_text_V_last_V_0_sel)
    begin
        if ((stream_in_text_V_last_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_last_V_0_data_out <= stream_in_text_V_last_V_0_payload_B;
        else 
            stream_in_text_V_last_V_0_data_out <= stream_in_text_V_last_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_last_V_0_load_A <= (stream_in_text_V_last_V_0_state_cmp_full and not(stream_in_text_V_last_V_0_sel_wr));
    stream_in_text_V_last_V_0_load_B <= (stream_in_text_V_last_V_0_state_cmp_full and stream_in_text_V_last_V_0_sel_wr);
    stream_in_text_V_last_V_0_sel <= stream_in_text_V_last_V_0_sel_rd;
    stream_in_text_V_last_V_0_state_cmp_full <= '0' when (stream_in_text_V_last_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_last_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_last_V_0_vld_out <= stream_in_text_V_last_V_0_state(0);
    stream_in_text_V_strb_V_0_ack_in <= stream_in_text_V_strb_V_0_state(1);

    stream_in_text_V_strb_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_strb_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_strb_V_0_data_out_assign_proc : process(stream_in_text_V_strb_V_0_payload_A, stream_in_text_V_strb_V_0_payload_B, stream_in_text_V_strb_V_0_sel)
    begin
        if ((stream_in_text_V_strb_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_strb_V_0_data_out <= stream_in_text_V_strb_V_0_payload_B;
        else 
            stream_in_text_V_strb_V_0_data_out <= stream_in_text_V_strb_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_strb_V_0_load_A <= (stream_in_text_V_strb_V_0_state_cmp_full and not(stream_in_text_V_strb_V_0_sel_wr));
    stream_in_text_V_strb_V_0_load_B <= (stream_in_text_V_strb_V_0_state_cmp_full and stream_in_text_V_strb_V_0_sel_wr);
    stream_in_text_V_strb_V_0_sel <= stream_in_text_V_strb_V_0_sel_rd;
    stream_in_text_V_strb_V_0_state_cmp_full <= '0' when (stream_in_text_V_strb_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_strb_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_strb_V_0_vld_out <= stream_in_text_V_strb_V_0_state(0);
    stream_in_text_V_user_V_0_ack_in <= stream_in_text_V_user_V_0_state(1);

    stream_in_text_V_user_V_0_ack_out_assign_proc : process(grp_axi2matrix_fu_207_stream_in_key_TREADY, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            stream_in_text_V_user_V_0_ack_out <= grp_axi2matrix_fu_207_stream_in_key_TREADY;
        else 
            stream_in_text_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_text_V_user_V_0_data_out_assign_proc : process(stream_in_text_V_user_V_0_payload_A, stream_in_text_V_user_V_0_payload_B, stream_in_text_V_user_V_0_sel)
    begin
        if ((stream_in_text_V_user_V_0_sel = ap_const_logic_1)) then 
            stream_in_text_V_user_V_0_data_out <= stream_in_text_V_user_V_0_payload_B;
        else 
            stream_in_text_V_user_V_0_data_out <= stream_in_text_V_user_V_0_payload_A;
        end if; 
    end process;

    stream_in_text_V_user_V_0_load_A <= (stream_in_text_V_user_V_0_state_cmp_full and not(stream_in_text_V_user_V_0_sel_wr));
    stream_in_text_V_user_V_0_load_B <= (stream_in_text_V_user_V_0_state_cmp_full and stream_in_text_V_user_V_0_sel_wr);
    stream_in_text_V_user_V_0_sel <= stream_in_text_V_user_V_0_sel_rd;
    stream_in_text_V_user_V_0_state_cmp_full <= '0' when (stream_in_text_V_user_V_0_state = ap_const_lv2_1) else '1';
    stream_in_text_V_user_V_0_vld_in <= stream_in_text_TVALID;
    stream_in_text_V_user_V_0_vld_out <= stream_in_text_V_user_V_0_state(0);
    stream_out_TDATA <= stream_out_V_data_V_1_data_out;
    stream_out_TDEST <= stream_out_V_dest_V_1_data_out;
    stream_out_TID <= stream_out_V_id_V_1_data_out;
    stream_out_TKEEP <= stream_out_V_keep_V_1_data_out;
    stream_out_TLAST <= stream_out_V_last_V_1_data_out;
    stream_out_TSTRB <= stream_out_V_strb_V_1_data_out;
    stream_out_TUSER <= stream_out_V_user_V_1_data_out;
    stream_out_TVALID <= stream_out_V_dest_V_1_state(0);
    stream_out_V_data_V_1_ack_in <= stream_out_V_data_V_1_state(1);
    stream_out_V_data_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_data_V_1_data_out_assign_proc : process(stream_out_V_data_V_1_payload_A, stream_out_V_data_V_1_payload_B, stream_out_V_data_V_1_sel)
    begin
        if ((stream_out_V_data_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_B;
        else 
            stream_out_V_data_V_1_data_out <= stream_out_V_data_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_data_V_1_load_A <= (stream_out_V_data_V_1_state_cmp_full and not(stream_out_V_data_V_1_sel_wr));
    stream_out_V_data_V_1_load_B <= (stream_out_V_data_V_1_state_cmp_full and stream_out_V_data_V_1_sel_wr);
    stream_out_V_data_V_1_sel <= stream_out_V_data_V_1_sel_rd;
    stream_out_V_data_V_1_state_cmp_full <= '0' when (stream_out_V_data_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_data_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_data_V_1_vld_out <= stream_out_V_data_V_1_state(0);
    stream_out_V_dest_V_1_ack_in <= stream_out_V_dest_V_1_state(1);
    stream_out_V_dest_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_dest_V_1_data_out_assign_proc : process(stream_out_V_dest_V_1_payload_A, stream_out_V_dest_V_1_payload_B, stream_out_V_dest_V_1_sel)
    begin
        if ((stream_out_V_dest_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_B;
        else 
            stream_out_V_dest_V_1_data_out <= stream_out_V_dest_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_dest_V_1_load_A <= (stream_out_V_dest_V_1_state_cmp_full and not(stream_out_V_dest_V_1_sel_wr));
    stream_out_V_dest_V_1_load_B <= (stream_out_V_dest_V_1_state_cmp_full and stream_out_V_dest_V_1_sel_wr);
    stream_out_V_dest_V_1_sel <= stream_out_V_dest_V_1_sel_rd;
    stream_out_V_dest_V_1_state_cmp_full <= '0' when (stream_out_V_dest_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_dest_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_dest_V_1_vld_out <= stream_out_V_dest_V_1_state(0);
    stream_out_V_id_V_1_ack_in <= stream_out_V_id_V_1_state(1);
    stream_out_V_id_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_id_V_1_data_out_assign_proc : process(stream_out_V_id_V_1_payload_A, stream_out_V_id_V_1_payload_B, stream_out_V_id_V_1_sel)
    begin
        if ((stream_out_V_id_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_B;
        else 
            stream_out_V_id_V_1_data_out <= stream_out_V_id_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_id_V_1_load_A <= (stream_out_V_id_V_1_state_cmp_full and not(stream_out_V_id_V_1_sel_wr));
    stream_out_V_id_V_1_load_B <= (stream_out_V_id_V_1_state_cmp_full and stream_out_V_id_V_1_sel_wr);
    stream_out_V_id_V_1_sel <= stream_out_V_id_V_1_sel_rd;
    stream_out_V_id_V_1_state_cmp_full <= '0' when (stream_out_V_id_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_id_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_id_V_1_vld_out <= stream_out_V_id_V_1_state(0);
    stream_out_V_keep_V_1_ack_in <= stream_out_V_keep_V_1_state(1);
    stream_out_V_keep_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_keep_V_1_data_out_assign_proc : process(stream_out_V_keep_V_1_payload_A, stream_out_V_keep_V_1_payload_B, stream_out_V_keep_V_1_sel)
    begin
        if ((stream_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_B;
        else 
            stream_out_V_keep_V_1_data_out <= stream_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_keep_V_1_load_A <= (stream_out_V_keep_V_1_state_cmp_full and not(stream_out_V_keep_V_1_sel_wr));
    stream_out_V_keep_V_1_load_B <= (stream_out_V_keep_V_1_state_cmp_full and stream_out_V_keep_V_1_sel_wr);
    stream_out_V_keep_V_1_sel <= stream_out_V_keep_V_1_sel_rd;
    stream_out_V_keep_V_1_state_cmp_full <= '0' when (stream_out_V_keep_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_keep_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_keep_V_1_vld_out <= stream_out_V_keep_V_1_state(0);
    stream_out_V_last_V_1_ack_in <= stream_out_V_last_V_1_state(1);
    stream_out_V_last_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_last_V_1_data_out_assign_proc : process(stream_out_V_last_V_1_payload_A, stream_out_V_last_V_1_payload_B, stream_out_V_last_V_1_sel)
    begin
        if ((stream_out_V_last_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_B;
        else 
            stream_out_V_last_V_1_data_out <= stream_out_V_last_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_last_V_1_load_A <= (stream_out_V_last_V_1_state_cmp_full and not(stream_out_V_last_V_1_sel_wr));
    stream_out_V_last_V_1_load_B <= (stream_out_V_last_V_1_state_cmp_full and stream_out_V_last_V_1_sel_wr);
    stream_out_V_last_V_1_sel <= stream_out_V_last_V_1_sel_rd;
    stream_out_V_last_V_1_state_cmp_full <= '0' when (stream_out_V_last_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_last_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_last_V_1_vld_out <= stream_out_V_last_V_1_state(0);
    stream_out_V_strb_V_1_ack_in <= stream_out_V_strb_V_1_state(1);
    stream_out_V_strb_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_strb_V_1_data_out_assign_proc : process(stream_out_V_strb_V_1_payload_A, stream_out_V_strb_V_1_payload_B, stream_out_V_strb_V_1_sel)
    begin
        if ((stream_out_V_strb_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_B;
        else 
            stream_out_V_strb_V_1_data_out <= stream_out_V_strb_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_strb_V_1_load_A <= (stream_out_V_strb_V_1_state_cmp_full and not(stream_out_V_strb_V_1_sel_wr));
    stream_out_V_strb_V_1_load_B <= (stream_out_V_strb_V_1_state_cmp_full and stream_out_V_strb_V_1_sel_wr);
    stream_out_V_strb_V_1_sel <= stream_out_V_strb_V_1_sel_rd;
    stream_out_V_strb_V_1_state_cmp_full <= '0' when (stream_out_V_strb_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_strb_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_strb_V_1_vld_out <= stream_out_V_strb_V_1_state(0);
    stream_out_V_user_V_1_ack_in <= stream_out_V_user_V_1_state(1);
    stream_out_V_user_V_1_ack_out <= stream_out_TREADY;

    stream_out_V_user_V_1_data_out_assign_proc : process(stream_out_V_user_V_1_payload_A, stream_out_V_user_V_1_payload_B, stream_out_V_user_V_1_sel)
    begin
        if ((stream_out_V_user_V_1_sel = ap_const_logic_1)) then 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_B;
        else 
            stream_out_V_user_V_1_data_out <= stream_out_V_user_V_1_payload_A;
        end if; 
    end process;

    stream_out_V_user_V_1_load_A <= (stream_out_V_user_V_1_state_cmp_full and not(stream_out_V_user_V_1_sel_wr));
    stream_out_V_user_V_1_load_B <= (stream_out_V_user_V_1_state_cmp_full and stream_out_V_user_V_1_sel_wr);
    stream_out_V_user_V_1_sel <= stream_out_V_user_V_1_sel_rd;
    stream_out_V_user_V_1_state_cmp_full <= '0' when (stream_out_V_user_V_1_state = ap_const_lv2_1) else '1';
    stream_out_V_user_V_1_vld_in <= grp_matrix2axi_fu_188_stream_out_TVALID;
    stream_out_V_user_V_1_vld_out <= stream_out_V_user_V_1_state(0);
    tmp_20_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_163),6));
    tmp_24_fu_285_p2 <= std_logic_vector(unsigned(tmp_60_cast_reg_353) + unsigned(tmp_cast_fu_281_p1));
    tmp_25_fu_335_p2 <= std_logic_vector(unsigned(tmp_62_cast_reg_374) + unsigned(tmp_20_cast_fu_331_p1));
    tmp_60_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_257_p3),6));
    tmp_62_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_307_p3),6));
    tmp_63_cast_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_285_p2),64));
    tmp_64_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_335_p2),64));
    tmp_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i5_reg_141),6));
    tmp_fu_257_p3 <= (i_0_i1_reg_130 & ap_const_lv2_0);
    tmp_s_fu_307_p3 <= (i_0_i_reg_152 & ap_const_lv2_0);
end behav;
