#include <stdint.h>
#include "aes.h"

//SUBSTITUTION MATRIX

//ap_uint<8> substitution[16][16] = {
//        {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
//        {0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
//        {0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
//        {0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
//        {0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
//        {0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
//        {0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
//        {0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
//        {0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
//        {0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
//        {0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
//        {0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
//        {0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
//        {0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
//        {0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
//        {0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
//    };

const ap_uint<8> sbox[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};


const ap_uint<8> gf_mul2_table[256] = {
    0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e,
    0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e,
    0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e,
    0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e,
    0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e,
    0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe,
    0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde,
    0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe,
    0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05,
    0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25,
    0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45,
    0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65,
    0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85,
    0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5,
    0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5,
    0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5
};

const ap_uint<8> gf_mul3_table[256] = {
    0x00, 0x03, 0x06, 0x05, 0x0C, 0x0F, 0x0A, 0x09, 0x18, 0x1B, 0x1E, 0x1D, 0x14, 0x17, 0x12, 0x11,
    0x30, 0x33, 0x36, 0x35, 0x3C, 0x3F, 0x3A, 0x39, 0x28, 0x2B, 0x2E, 0x2D, 0x24, 0x27, 0x22, 0x21,
    0x60, 0x63, 0x66, 0x65, 0x6C, 0x6F, 0x6A, 0x69, 0x78, 0x7B, 0x7E, 0x7D, 0x74, 0x77, 0x72, 0x71,
    0x50, 0x53, 0x56, 0x55, 0x5C, 0x5F, 0x5A, 0x59, 0x48, 0x4B, 0x4E, 0x4D, 0x44, 0x47, 0x42, 0x41,
    0xC0, 0xC3, 0xC6, 0xC5, 0xCC, 0xCF, 0xCA, 0xC9, 0xD8, 0xDB, 0xDE, 0xDD, 0xD4, 0xD7, 0xD2, 0xD1,
    0xF0, 0xF3, 0xF6, 0xF5, 0xFC, 0xFF, 0xFA, 0xF9, 0xE8, 0xEB, 0xEE, 0xED, 0xE4, 0xE7, 0xE2, 0xE1,
    0xA0, 0xA3, 0xA6, 0xA5, 0xAC, 0xAF, 0xAA, 0xA9, 0xB8, 0xBB, 0xBE, 0xBD, 0xB4, 0xB7, 0xB2, 0xB1,
    0x90, 0x93, 0x96, 0x95, 0x9C, 0x9F, 0x9A, 0x99, 0x88, 0x8B, 0x8E, 0x8D, 0x84, 0x87, 0x82, 0x81,
    0x9B, 0x98, 0x9D, 0x9E, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8F, 0x8C, 0x89, 0x8A,
    0xAB, 0xA8, 0xAD, 0xAE, 0xA7, 0xA4, 0xA1, 0xA2, 0xB3, 0xB0, 0xB5, 0xB6, 0xBF, 0xBC, 0xB9, 0xBA,
    0xFB, 0xF8, 0xFD, 0xFE, 0xF7, 0xF4, 0xF1, 0xF2, 0xE3, 0xE0, 0xE5, 0xE6, 0xEF, 0xEC, 0xE9, 0xEA,
    0xCB, 0xC8, 0xCD, 0xCE, 0xC7, 0xC4, 0xC1, 0xC2, 0xD3, 0xD0, 0xD5, 0xD6, 0xDF, 0xDC, 0xD9, 0xDA,
    0x5B, 0x58, 0x5D, 0x5E, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4F, 0x4C, 0x49, 0x4A,
    0x6B, 0x68, 0x6D, 0x6E, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7F, 0x7C, 0x79, 0x7A,
    0x3B, 0x38, 0x3D, 0x3E, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2F, 0x2C, 0x29, 0x2A,
    0x0B, 0x08, 0x0D, 0x0E, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1F, 0x1C, 0x19, 0x1A
};


//!-----------------------------------------------------------------------------------------!
//MATRIX CLASS IMPLEMENTATION
AESMatrix::AESMatrix(){
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			data[i][j] = 0;
		}
	}
}

AESMatrix::AESMatrix(const ap_uint<8> init_data[4][4]){
	for(int i = 0; i < 4; i++){
		for(int j = 0; j < 4; j++){
			data[i][j] = init_data[i][j];
		}
	}
}

ap_uint<8>& AESMatrix::at(int row, int col) {
    return data[row][col];
}

void AESMatrix::setAt(int row, int col, ap_uint<8> value){
	data[row][col] = value;
}

void AESMatrix::getRow(int row, ap_uint<8> rowData[4]){
	for(int i = 0; i < 4; i++){
		rowData[i] = data[row][i];
	}
}

void AESMatrix::setRow(int row, ap_uint<8> rowData[4]){
	for(int i = 0; i < 4; i++){
		data[row][i] = rowData[i];
	}
}

void AESMatrix::getCol(int col, ap_uint<8> colData[4]){
	for(int i = 0; i < 4; i++){
		colData[i] = data[i][col];
	}
}

void AESMatrix::setCol(int col, ap_uint<8> colData[4]){
	for(int i = 0; i < 4; i++){
		data[i][col] = colData[i];
	}
}

void AESMatrix::print() const{
	for (int i = 0; i < 4; i++) {
	    for (int j = 0; j < 4; j++) {
	        std::cout << std::hex << (int)data[i][j] << " ";
	    }
	    std::cout << std::endl;
	}
}

void AESMatrix::shiftRowLeft(int row, int shiftAmount) {
    ap_uint<8> tempRow[4];
    #pragma HLS ARRAY_PARTITION variable=tempRow complete
    for (int col = 0; col < 4; col++) {
        tempRow[col] = data[row][(col + shiftAmount) % 4];
    }
    for (int col = 0; col < 4; col++) {
        data[row][col] = tempRow[col];
    }
}

void AESMatrix::shiftRowRight(int row, int shiftAmount) {
    ap_uint<8> tempRow[4];
    #pragma HLS ARRAY_PARTITION variable=tempRow complete
    for (int col = 0; col < 4; col++) {
        tempRow[col] = data[row][(col - shiftAmount + 4) % 4];
    }
    for (int col = 0; col < 4; col++) {
        data[row][col] = tempRow[col];
    }
}

//!-----------------------------------------------------------------------------------------!

//AES FUNCTIONS
void axi2matrix(stream_t& stream_in, AESMatrix &state){
	interface_t input_data = stream_in.read();

	ap_uint<128> data = input_data.data;
	for(int i = 0; i < 4; i++){
		#pragma HLS UNROLL
		for(int j = 0; j < 4; j++){
			#pragma HLS UNROLL
			state.setAt(j,i, data.range((15 - (i * 4 + j)) * 8 + 7, (15 - (i * 4 + j)) * 8));
		}
	}
}

void matrix2axi(AESMatrix &state, stream_t &stream_out) {
    interface_t output_data;

    ap_uint<128> data = 0;
    for (int i = 0; i < 4; i++) {
        #pragma HLS UNROLL
        for (int j = 0; j < 4; j++) {
            #pragma HLS UNROLL
            data.range((15 - (i * 4 + j)) * 8 + 7, (15 - (i * 4 + j)) * 8) = state.at(j, i);
        }
    }

    // Assign the packed data to the output interface
    output_data.data = data;
    output_data.keep = 0xFFFF; // Indicate all bytes are valid
    output_data.last = 1;      // Indicate the last (or only) transfer in the stream

    stream_out.write(output_data);
}


//SUBSTITUTE BYTES WITH LOOKUP TABLE
//void substituteBytes(AESMatrix &state){
//	ap_uint<8> tempData;
//	ap_uint<4> lower;
//	ap_uint<4> upper;
//
//	for(int i = 0; i < 4; i++){
//		#pragma HLS UNROLL
//		for(int j = 0; j < 4; j++){
//			#pragma HLS UNROLL
//			tempData = state.at(i,j);
//
//			upper = tempData.range(7,4);
//			lower = tempData.range(3,0);
//
//			state.setAt(i,j,substitution[upper][lower]);
//		}
//	}
//}

void substituteBytes(AESMatrix &state){
	for(int i = 0; i < 4; i++){
#pragma HLS UNROLL
		for(int j = 0; j < 4; j++){
#pragma HLS UNROLL
			state.setAt(i,j,sbox[state.at(i,j)]);
		}
	}
}

//SHIFT ROWS
void shiftRows(AESMatrix &state) {
    state.shiftRowLeft(1, 1);
    state.shiftRowLeft(2, 2);
    state.shiftRowRight(3, 1);
}

ap_uint<8> gf_mul2(ap_uint<8> x) {
    return gf_mul2_table[x];
}

ap_uint<8> gf_mul3(ap_uint<8> x) {
    return gf_mul3_table[x];
}

void mixColumns(AESMatrix &state) {
    for (int col = 0; col < 4; col++) {
        #pragma HLS UNROLL

        ap_uint<8> s0 = state.at(0, col);
        ap_uint<8> s1 = state.at(1, col);
        ap_uint<8> s2 = state.at(2, col);
        ap_uint<8> s3 = state.at(3, col);

        ap_uint<8> t0 = gf_mul2(s0) ^ gf_mul3(s1) ^ s2 ^ s3;
        ap_uint<8> t1 = s0 ^ gf_mul2(s1) ^ gf_mul3(s2) ^ s3;
        ap_uint<8> t2 = s0 ^ s1 ^ gf_mul2(s2) ^ gf_mul3(s3);
        ap_uint<8> t3 = gf_mul3(s0) ^ s1 ^ s2 ^ gf_mul2(s3);

        state.setAt(0, col, t0);
        state.setAt(1, col, t1);
        state.setAt(2, col, t2);
        state.setAt(3, col, t3);
    }
}

void addRoundKey(AESMatrix &state, AESMatrix &roundKey){
	for(int i = 0; i < 4 ; i++){
		#pragma HLS UNROLL
		for(int j = 0; j<4; j++){
			#pragma HLS UNROLL
			state.setAt(i,j, state.at(i,j)^roundKey.at(i,j));
		}
	}
}

//KEY EXPANSION
const ap_uint<8> rcon[11] = {
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
};

// RotWord: Circularly rotate a word
void rotWord(ap_uint<8> word[4]) {
    ap_uint<8> temp = word[0];
    word[0] = word[1];
    word[1] = word[2];
    word[2] = word[3];
    word[3] = temp;
}

// SubWord: Substitute each byte using the S-box
void subWord(ap_uint<8> word[4]) {
    for (int i = 0; i < 4; i++) {
        word[i] = sbox[word[i]];
    }
}

void keyExpansion(AESMatrix &masterKey, ap_uint<8> expandedKey[4][44]) {
    // Copy the masterKey into the first 4 columns of expandedKey
    for (int col = 0; col < 4; col++) {
        for (int row = 0; row < 4; row++) {
            expandedKey[row][col] = masterKey.at(row, col);
        }
    }

    // Generate the rest of the round keys
    for (int col = 4; col < 44; col++) {
        ap_uint<8> temp[4];
        #pragma HLS ARRAY_PARTITION variable=temp complete

        // Copy the previous column
        for (int row = 0; row < 4; row++) {
            temp[row] = expandedKey[row][col - 1];
        }

        if (col % 4 == 0) {
            // RotWord + SubWord + Rcon
            rotWord(temp);
            subWord(temp);
            temp[0] ^= rcon[col / 4 - 1];
        }

        // XOR with the column 4 positions back
        for (int row = 0; row < 4; row++) {
            expandedKey[row][col] = expandedKey[row][col - 4] ^ temp[row];
        }
    }
}

void aesEncrypt(AESMatrix &state, AESMatrix &masterKey) {
    // Expanded key storage (44 columns for AES-128)
    ap_uint<8> expandedKey[4][44];

    // Perform key expansion
    keyExpansion(masterKey, expandedKey);

    // Initial round key addition
    AESMatrix roundKey;
    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            roundKey.setAt(row, col, expandedKey[row][col]);
        }
    }
    addRoundKey(state, roundKey);

    // Perform 9 main rounds
    for (int round = 1; round <= 9; round++) {
//    	std::cout<<"Input round "<<round<<std::endl;
//    	state.print();
//    	std::cout<<std::endl;

        substituteBytes(state);     // SubBytes
//        std::cout<<"After SBOX round "<<round<<std::endl;
//        state.print();
//        std::cout<<std::endl;
        shiftRows(state);           // ShiftRows
//        std::cout<<"SHIFT ROWS round "<<round<<std::endl;
//        state.print();
//        std::cout<<std::endl;
        mixColumns(state);          // MixColumns
//        std::cout<<"MIX COLUMNS round "<<round<<std::endl;
//        state.print();
//        std::cout<<std::endl;

        // Set the current round key
        for (int row = 0; row < 4; row++) {
            for (int col = 0; col < 4; col++) {
                roundKey.setAt(row, col, expandedKey[row][col + (round * 4)]);
            }
        }
        addRoundKey(state, roundKey);
//        std::cout<<"ADD ROUND KEY round "<<round<<std::endl;
//        state.print();
//        std::cout<<std::endl;

    }

    // FINAL ROUND
    substituteBytes(state);
    shiftRows(state);

    for (int row = 0; row < 4; row++) {
        for (int col = 0; col < 4; col++) {
            roundKey.setAt(row, col, expandedKey[row][col + 40]);
        }
    }
    addRoundKey(state, roundKey);
}

void AESEncrypt_TopFunction(stream_t& stream_in_text, stream_t& stream_in_key, stream_t& stream_out){
	#pragma HLS INTERFACE axis port=stream_in_text
    #pragma HLS INTERFACE axis port=stream_in_key
    #pragma HLS INTERFACE axis port=stream_out

    #pragma HLS INTERFACE s_axilite port=return bundle=control

	AESMatrix matrixText, matrixKey;

	axi2matrix(stream_in_text, matrixText);
	axi2matrix(stream_in_key, matrixKey);

	aesEncrypt(matrixText, matrixKey);

	matrix2axi(matrixText, stream_out);
}


