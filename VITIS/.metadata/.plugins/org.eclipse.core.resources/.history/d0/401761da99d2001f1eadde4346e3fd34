/******************************************************************************
* Copyright (C) 2023 Advanced Micro Devices, Inc. All Rights Reserved.
* SPDX-License-Identifier: MIT
******************************************************************************/
/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xparameters.h"
#include "xaxidma.h"
#include "xil_cache.h"

#define DMA_TEXT      XPAR_AXI_DMA_0_DEVICE_ID
#define DMA_KEY      XPAR_AXI_DMA_1_DEVICE_ID
#define DMA_OUTPUT      XPAR_AXI_DMA_2_DEVICE_ID

#define DMA_0_MM2S_BUFFER_BASE  0x10000000
#define DMA_1_MM2S_BUFFER_BASE  0x20000000
#define DMA_2_S2MM_BUFFER_BASE  0x30000000

#define BUFFER_SIZE           16  // Number of bytes to transfer

u32 *dma0_mm2s_buffer = (u32 *)DMA_0_MM2S_BUFFER_BASE;
u32 *dma1_mm2s_buffer = (u32 *)DMA_1_MM2S_BUFFER_BASE;
u32 *dma2_s2mm_buffer = (u32 *)DMA_2_S2MM_BUFFER_BASE;

XAxiDma dma_text, dma_key, dma_output;
XAxiDma_Config *dma_config;

int init_dma(XAxiDma *dma, u16 device_id) {
    dma_config = XAxiDma_LookupConfig(device_id);
    if (!dma_config) {
        xil_printf("DMA Configuration not found for device ID %d\r\n", device_id);
        return XST_FAILURE;
    }

    if (XAxiDma_CfgInitialize(dma, dma_config) != XST_SUCCESS) {
        xil_printf("DMA Initialization failed for device ID %d\r\n", device_id);
        return XST_FAILURE;
    }

    if (XAxiDma_HasSg(dma)) {
        xil_printf("DMA is in Scatter-Gather mode. Use Simple DMA.\r\n");
        return XST_FAILURE;
    }

    return XST_SUCCESS;
}

int main(){
	xil_printf("Hello hello\r\n");

	if (init_dma(&dma_text, DMA_TEXT) != XST_SUCCESS) {
		xil_printf("DMA Text failed to initialize\r\n");
		return XST_FAILURE;
	} else {
		xil_printf("DMA Text succesfully initialized\r\n");
	}
	if (init_dma(&dma_key, DMA_KEY) != XST_SUCCESS) {
		xil_printf("DMA Key failed to initialize\r\n");
		return XST_FAILURE;
	} else {
		xil_printf("DMA Key succesfully initialized\r\n");
	}
	if (init_dma(&dma_output, DMA_OUTPUT) != XST_SUCCESS){
		xil_printf("DMA Output failed to initialize\r\n");
		return XST_FAILURE;
	} else {
		xil_printf("DMA Output succesfully initialized\r\n");
	}

    // Prepare buffers for 128-bit data
    dma0_mm2s_buffer[0] = 0x54686973;  // 32 bits (part of 128-bit word)
    dma0_mm2s_buffer[1] = 0x49734d61;  // 32 bits
    dma0_mm2s_buffer[2] = 0x73746572;  // 32 bits
    dma0_mm2s_buffer[3] = 0x4b657958;  // 32 bits

    dma1_mm2s_buffer[0] = 0x54686973;  // 32 bits (part of 128-bit word)
    dma1_mm2s_buffer[1] = 0x49735361;  // 32 bits
    dma1_mm2s_buffer[2] = 0x6d706c65;  // 32 bits
    dma1_mm2s_buffer[3] = 0x54657874;  // 32 bits

    dma2_s2mm_buffer[0] = 0;  // Clear output buffer
    dma2_s2mm_buffer[1] = 0;
    dma2_s2mm_buffer[2] = 0;
    dma2_s2mm_buffer[3] = 0;

    xil_printf("Flushing Cache\r\n");
	// Flush the cache
	Xil_DCacheFlushRange((UINTPTR)dma0_mm2s_buffer, BUFFER_SIZE);
	Xil_DCacheFlushRange((UINTPTR)dma1_mm2s_buffer, BUFFER_SIZE);
	Xil_DCacheFlushRange((UINTPTR)dma2_s2mm_buffer, BUFFER_SIZE);
	xil_printf("Successfully Flushed Cache\r\n");

	// Start MM2S Transfers
	if (XAxiDma_SimpleTransfer(&dma_text, (UINTPTR)dma0_mm2s_buffer, BUFFER_SIZE, XAXIDMA_DMA_TO_DEVICE) != XST_SUCCESS) {
	    xil_printf("DMA TEXT MM2S transfer failed\r\n");
	    return XST_FAILURE;
	} else {
		xil_printf("DMA TEXT MM2S transfer success\r\n");
	}

	if (XAxiDma_SimpleTransfer(&dma_key, (UINTPTR)dma1_mm2s_buffer, BUFFER_SIZE, XAXIDMA_DMA_TO_DEVICE) != XST_SUCCESS) {
	    xil_printf("DMA KEY MM2S transfer failed\r\n");
	    return XST_FAILURE;
	} else {
		xil_printf("DMA KEY MM2S transfer success\r\n");
	}

	// Start S2MM Transfer
	if (XAxiDma_SimpleTransfer(&dma_output, (UINTPTR)dma2_s2mm_buffer, BUFFER_SIZE, XAXIDMA_DEVICE_TO_DMA) != XST_SUCCESS) {
	    xil_printf("DMA OUTPUT S2MM transfer failed\r\n");
	    return XST_FAILURE;
	}else {
		xil_printf("DMA OUTPUT MM2S transfer success\r\n");
	}

	//Wait for the transfers to finish
	xil_printf("Waiting for the transfers to finish\r\n");
	while (XAxiDma_Busy(&dma_text, XAXIDMA_DMA_TO_DEVICE));
	while (XAxiDma_Busy(&dma_key, XAXIDMA_DMA_TO_DEVICE));
	while (XAxiDma_Busy(&dma_output, XAXIDMA_DEVICE_TO_DMA));
	xil_printf("Transfer finished\r\n");

	Xil_DCacheInvalidateRange((UINTPTR)dma2_s2mm_buffer, BUFFER_SIZE);

    xil_printf("Output: 0x%08X%08X%08X%08X\r\n",
        dma2_s2mm_buffer[0],  // Word 0 (32 bits)
        dma2_s2mm_buffer[1],  // Word 1 (32 bits)
        dma2_s2mm_buffer[2],  // Word 2 (32 bits)
        dma2_s2mm_buffer[3]   // Word 3 (32 bits)
    );

    xil_printf("Transfer Complete\r\n");
}
